{
    "version": "https://jsonfeed.org/version/1",
    "title": "永不陨落的星辰",
    "subtitle": "",
    "icon": "https://www.yexingcheng.com/images/favicon.ico",
    "description": "如因为网络原因,如果有文章加载不出来的情况，请访问(https://beize_admin.gitee.io)",
    "home_page_url": "https://www.yexingcheng.com",
    "items": [
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E9%87%91%E5%8D%B0%E5%AE%A2%E7%94%B5%E5%AD%90/",
            "url": "https://www.yexingcheng.com/interview-questions/%E9%87%91%E5%8D%B0%E5%AE%A2%E7%94%B5%E5%AD%90/",
            "title": "金印客电子面试题",
            "date_published": "2022-11-30T08:36:58.225Z",
            "content_html": "<h2 id=\"1-上机做一个前台的详情页页面\"><a href=\"#1-上机做一个前台的详情页页面\" class=\"headerlink\" title=\"1.上机做一个前台的详情页页面\"></a>1.上机做一个前台的详情页页面</h2><h2 id=\"2-介绍项目\"><a href=\"#2-介绍项目\" class=\"headerlink\" title=\"2.介绍项目\"></a>2.介绍项目</h2><h2 id=\"3-对Vue3有哪些了解\"><a href=\"#3-对Vue3有哪些了解\" class=\"headerlink\" title=\"3.对Vue3有哪些了解\"></a>3.对Vue3有哪些了解</h2><h2 id=\"4-layUI有没有用过\"><a href=\"#4-layUI有没有用过\" class=\"headerlink\" title=\"4.layUI有没有用过\"></a>4.layUI有没有用过</h2><h2 id=\"5-单独负责一个网站或者APP能全权负责吗\"><a href=\"#5-单独负责一个网站或者APP能全权负责吗\" class=\"headerlink\" title=\"5.单独负责一个网站或者APP能全权负责吗\"></a>5.单独负责一个网站或者APP能全权负责吗</h2><h2 id=\"6-跨域是什么，咋解决的\"><a href=\"#6-跨域是什么，咋解决的\" class=\"headerlink\" title=\"6.跨域是什么，咋解决的\"></a>6.跨域是什么，咋解决的</h2><h2 id=\"7-jsonp和cors有啥区别\"><a href=\"#7-jsonp和cors有啥区别\" class=\"headerlink\" title=\"7.jsonp和cors有啥区别\"></a>7.jsonp和cors有啥区别</h2><h2 id=\"8-nodeJS做过什么\"><a href=\"#8-nodeJS做过什么\" class=\"headerlink\" title=\"8.nodeJS做过什么\"></a>8.nodeJS做过什么</h2><h2 id=\"9-文件资源压缩有没有了解\"><a href=\"#9-文件资源压缩有没有了解\" class=\"headerlink\" title=\"9.文件资源压缩有没有了解\"></a>9.文件资源压缩有没有了解</h2><h2 id=\"10-小程序做过吗，用过uniapp没有\"><a href=\"#10-小程序做过吗，用过uniapp没有\" class=\"headerlink\" title=\"10.小程序做过吗，用过uniapp没有\"></a>10.小程序做过吗，用过uniapp没有</h2><h2 id=\"11-你了解我们公司吗\"><a href=\"#11-你了解我们公司吗\" class=\"headerlink\" title=\"11.你了解我们公司吗\"></a>11.你了解我们公司吗</h2>",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E8%95%BE%E8%93%9D%E7%A7%91%E6%8A%80/",
            "url": "https://www.yexingcheng.com/interview-questions/%E8%95%BE%E8%93%9D%E7%A7%91%E6%8A%80/",
            "title": "蕾蓝科技面试题",
            "date_published": "2022-11-29T08:45:01.277Z",
            "content_html": "<h2 id=\"1-自我介绍\"><a href=\"#1-自我介绍\" class=\"headerlink\" title=\"1.自我介绍\"></a>1.自我介绍</h2><h2 id=\"2-介绍一个你的项目\"><a href=\"#2-介绍一个你的项目\" class=\"headerlink\" title=\"2.介绍一个你的项目\"></a>2.介绍一个你的项目</h2><h2 id=\"3-原生JS中的闭包，闭包中的变量怎么销毁，怎么释放变量，使用闭包的场景\"><a href=\"#3-原生JS中的闭包，闭包中的变量怎么销毁，怎么释放变量，使用闭包的场景\" class=\"headerlink\" title=\"3.原生JS中的闭包，闭包中的变量怎么销毁，怎么释放变量，使用闭包的场景\"></a>3.原生JS中的闭包，闭包中的变量怎么销毁，怎么释放变量，使用闭包的场景</h2><h2 id=\"4-有没有用原生js写项目\"><a href=\"#4-有没有用原生js写项目\" class=\"headerlink\" title=\"4.有没有用原生js写项目\"></a>4.有没有用原生js写项目</h2><h2 id=\"5-作用域链是什么\"><a href=\"#5-作用域链是什么\" class=\"headerlink\" title=\"5.作用域链是什么\"></a>5.作用域链是什么</h2><h2 id=\"6-es6增加哪些特性，箭头函数和普通函数有啥区别\"><a href=\"#6-es6增加哪些特性，箭头函数和普通函数有啥区别\" class=\"headerlink\" title=\"6.es6增加哪些特性，箭头函数和普通函数有啥区别\"></a>6.es6增加哪些特性，箭头函数和普通函数有啥区别</h2><h2 id=\"7-call，apply-bind\"><a href=\"#7-call，apply-bind\" class=\"headerlink\" title=\"7.call，apply,bind\"></a>7.call，apply,bind</h2><h2 id=\"8-async与await，await能不能单独使用\"><a href=\"#8-async与await，await能不能单独使用\" class=\"headerlink\" title=\"8.async与await，await能不能单独使用\"></a>8.async与await，await能不能单独使用</h2><h2 id=\"9-promise用法\"><a href=\"#9-promise用法\" class=\"headerlink\" title=\"9.promise用法\"></a>9.promise用法</h2><h2 id=\"10-Vue双向绑定原理\"><a href=\"#10-Vue双向绑定原理\" class=\"headerlink\" title=\"10.Vue双向绑定原理\"></a>10.Vue双向绑定原理</h2><h2 id=\"11，vuex有几个特性\"><a href=\"#11，vuex有几个特性\" class=\"headerlink\" title=\"11，vuex有几个特性\"></a>11，vuex有几个特性</h2><h2 id=\"12-keepalive怎么缓存的，存到哪里了\"><a href=\"#12-keepalive怎么缓存的，存到哪里了\" class=\"headerlink\" title=\"12.keepalive怎么缓存的，存到哪里了\"></a>12.keepalive怎么缓存的，存到哪里了</h2><h2 id=\"13-组件通信了解吗\"><a href=\"#13-组件通信了解吗\" class=\"headerlink\" title=\"13.组件通信了解吗\"></a>13.组件通信了解吗</h2><h2 id=\"14-Vue首页加载慢怎么解决\"><a href=\"#14-Vue首页加载慢怎么解决\" class=\"headerlink\" title=\"14.Vue首页加载慢怎么解决\"></a>14.Vue首页加载慢怎么解决</h2><h2 id=\"15-前端SEO怎么理解的，有啥方法\"><a href=\"#15-前端SEO怎么理解的，有啥方法\" class=\"headerlink\" title=\"15.前端SEO怎么理解的，有啥方法\"></a>15.前端SEO怎么理解的，有啥方法</h2><h2 id=\"16-fetch会用吗\"><a href=\"#16-fetch会用吗\" class=\"headerlink\" title=\"16.fetch会用吗\"></a>16.fetch会用吗</h2>",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E7%9B%92%E9%A9%AC%E7%A7%91%E6%8A%80/",
            "url": "https://www.yexingcheng.com/interview-questions/%E7%9B%92%E9%A9%AC%E7%A7%91%E6%8A%80/",
            "title": "盒马科技面试题",
            "date_published": "2022-11-29T08:43:41.617Z",
            "content_html": "<h2 id=\"1-对递归的理解和注意事项\"><a href=\"#1-对递归的理解和注意事项\" class=\"headerlink\" title=\"1.对递归的理解和注意事项\"></a>1.对递归的理解和注意事项</h2><h2 id=\"2-jsx怎么转成js的-如果createElement第一个参数传的是一个html传统标签-会怎么样-原生html标签和组件标签怎么分辨\"><a href=\"#2-jsx怎么转成js的-如果createElement第一个参数传的是一个html传统标签-会怎么样-原生html标签和组件标签怎么分辨\" class=\"headerlink\" title=\"2.jsx怎么转成js的,如果createElement第一个参数传的是一个html传统标签,会怎么样.原生html标签和组件标签怎么分辨\"></a>2.jsx怎么转成js的,如果createElement第一个参数传的是一个html传统标签,会怎么样.原生html标签和组件标签怎么分辨</h2><h2 id=\"3-vuex如果要把state保存在本地-要在哪里写-如果有10个函数修改状态是要在每个函数里面都写上保存到本地的代码吗\"><a href=\"#3-vuex如果要把state保存在本地-要在哪里写-如果有10个函数修改状态是要在每个函数里面都写上保存到本地的代码吗\" class=\"headerlink\" title=\"3.vuex如果要把state保存在本地,要在哪里写.如果有10个函数修改状态是要在每个函数里面都写上保存到本地的代码吗\"></a>3.vuex如果要把state保存在本地,要在哪里写.如果有10个函数修改状态是要在每个函数里面都写上保存到本地的代码吗</h2><h2 id=\"4-对diff算法的理解\"><a href=\"#4-对diff算法的理解\" class=\"headerlink\" title=\"4.对diff算法的理解\"></a>4.对diff算法的理解</h2><h2 id=\"5-你开发项目中遇到的bug-为什么严格模式下函数组件会调用两次-流程是什么\"><a href=\"#5-你开发项目中遇到的bug-为什么严格模式下函数组件会调用两次-流程是什么\" class=\"headerlink\" title=\"5.你开发项目中遇到的bug?为什么严格模式下函数组件会调用两次,流程是什么\"></a>5.你开发项目中遇到的bug?为什么严格模式下函数组件会调用两次,流程是什么</h2>",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E8%AE%AF%E9%A3%9E%E7%A7%91%E6%8A%80/",
            "url": "https://www.yexingcheng.com/interview-questions/%E8%AE%AF%E9%A3%9E%E7%A7%91%E6%8A%80/",
            "title": "讯飞科技面试题",
            "date_published": "2022-11-28T01:55:19.498Z",
            "content_html": "<h2 id=\"1-css中你知道的选择器，以及他们的执行顺序\"><a href=\"#1-css中你知道的选择器，以及他们的执行顺序\" class=\"headerlink\" title=\"1.css中你知道的选择器，以及他们的执行顺序\"></a>1.css中你知道的选择器，以及他们的执行顺序</h2><h2 id=\"2-css中的常用单位\"><a href=\"#2-css中的常用单位\" class=\"headerlink\" title=\"2.css中的常用单位\"></a>2.css中的常用单位</h2><h2 id=\"3-active伪类用过吗-（伪类选择器）\"><a href=\"#3-active伪类用过吗-（伪类选择器）\" class=\"headerlink\" title=\"3.:active伪类用过吗 （伪类选择器）\"></a>3.:active伪类用过吗 （伪类选择器）</h2><h2 id=\"4-es6新增特性\"><a href=\"#4-es6新增特性\" class=\"headerlink\" title=\"4.es6新增特性\"></a>4.es6新增特性</h2><h2 id=\"5-循坏计时器设置十秒执行一次，把浏览器放到后台，会有什么影响（对执行时间有啥影响）\"><a href=\"#5-循坏计时器设置十秒执行一次，把浏览器放到后台，会有什么影响（对执行时间有啥影响）\" class=\"headerlink\" title=\"5.循坏计时器设置十秒执行一次，把浏览器放到后台，会有什么影响（对执行时间有啥影响）\"></a>5.循坏计时器设置十秒执行一次，把浏览器放到后台，会有什么影响（对执行时间有啥影响）</h2><h2 id=\"6-cookie-、localstorage和sessionstorage的区别\"><a href=\"#6-cookie-、localstorage和sessionstorage的区别\" class=\"headerlink\" title=\"6.cookie 、localstorage和sessionstorage的区别\"></a>6.cookie 、localstorage和sessionstorage的区别</h2><h2 id=\"7-两个div嵌套，都有一个点击事件，怎么阻止冒泡\"><a href=\"#7-两个div嵌套，都有一个点击事件，怎么阻止冒泡\" class=\"headerlink\" title=\"7.两个div嵌套，都有一个点击事件，怎么阻止冒泡\"></a>7.两个div嵌套，都有一个点击事件，怎么阻止冒泡</h2><h2 id=\"8-跨域\"><a href=\"#8-跨域\" class=\"headerlink\" title=\"8.跨域\"></a>8.跨域</h2><h2 id=\"9-你对-next-Tick的理解有哪些\"><a href=\"#9-你对-next-Tick的理解有哪些\" class=\"headerlink\" title=\"9.你对$next Tick的理解有哪些\"></a>9.你对$next Tick的理解有哪些</h2><h2 id=\"10-vue2和vue3的原理\"><a href=\"#10-vue2和vue3的原理\" class=\"headerlink\" title=\"10.vue2和vue3的原理\"></a>10.vue2和vue3的原理</h2><h2 id=\"11-对webSocket的理解\"><a href=\"#11-对webSocket的理解\" class=\"headerlink\" title=\"11.对webSocket的理解\"></a>11.对webSocket的理解</h2><h2 id=\"12-在项目中封装过哪些函数\"><a href=\"#12-在项目中封装过哪些函数\" class=\"headerlink\" title=\"12.在项目中封装过哪些函数\"></a>12.在项目中封装过哪些函数</h2>",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E6%B5%99%E6%B1%9F%E4%BA%A4%E5%B7%A5/",
            "url": "https://www.yexingcheng.com/interview-questions/%E6%B5%99%E6%B1%9F%E4%BA%A4%E5%B7%A5/",
            "title": "浙江交工面试题",
            "date_published": "2022-11-28T01:54:42.665Z",
            "content_html": "<h2 id=\"1、项目亮点\"><a href=\"#1、项目亮点\" class=\"headerlink\" title=\"1、项目亮点\"></a>1、项目亮点</h2><h2 id=\"2、封装组件的业务场景（如果简历上写过封装组件的）\"><a href=\"#2、封装组件的业务场景（如果简历上写过封装组件的）\" class=\"headerlink\" title=\"2、封装组件的业务场景（如果简历上写过封装组件的）\"></a>2、封装组件的业务场景（如果简历上写过封装组件的）</h2><h2 id=\"3、React的Axios封装\"><a href=\"#3、React的Axios封装\" class=\"headerlink\" title=\"3、React的Axios封装\"></a>3、React的Axios封装</h2><h2 id=\"4、es6数组新增方法\"><a href=\"#4、es6数组新增方法\" class=\"headerlink\" title=\"4、es6数组新增方法\"></a>4、es6数组新增方法</h2><h2 id=\"5、reduce数组去重\"><a href=\"#5、reduce数组去重\" class=\"headerlink\" title=\"5、reduce数组去重\"></a>5、reduce数组去重</h2><h2 id=\"6、Promise-async-await\"><a href=\"#6、Promise-async-await\" class=\"headerlink\" title=\"6、Promise ,async,await\"></a>6、Promise ,async,await</h2><h2 id=\"7、在react中，如何去获取地址栏？后面的参数（用自己封装好的pathname，已经去过重了），现在不希望去重\"><a href=\"#7、在react中，如何去获取地址栏？后面的参数（用自己封装好的pathname，已经去过重了），现在不希望去重\" class=\"headerlink\" title=\"7、在react中，如何去获取地址栏？后面的参数（用自己封装好的pathname，已经去过重了），现在不希望去重\"></a>7、在react中，如何去获取地址栏？后面的参数（用自己封装好的pathname，已经去过重了），现在不希望去重</h2><h2 id=\"8、在react中，父组件如何调用子组件，forward结合useImperativehandle\"><a href=\"#8、在react中，父组件如何调用子组件，forward结合useImperativehandle\" class=\"headerlink\" title=\"8、在react中，父组件如何调用子组件，forward结合useImperativehandle\"></a>8、在react中，父组件如何调用子组件，forward结合useImperativehandle</h2><h2 id=\"9、react如何捕获异常\"><a href=\"#9、react如何捕获异常\" class=\"headerlink\" title=\"9、react如何捕获异常\"></a>9、react如何捕获异常</h2><h2 id=\"10、try-catch如何封装\"><a href=\"#10、try-catch如何封装\" class=\"headerlink\" title=\"10、try ,catch如何封装\"></a>10、try ,catch如何封装</h2>",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E8%A1%8C%E7%9F%A5%E7%BD%91%E7%BB%9C/",
            "url": "https://www.yexingcheng.com/interview-questions/%E8%A1%8C%E7%9F%A5%E7%BD%91%E7%BB%9C/",
            "title": "行知网络面试题",
            "date_published": "2022-11-28T01:54:02.312Z",
            "content_html": "<h1 id=\"行知网络-技术面\"><a href=\"#行知网络-技术面\" class=\"headerlink\" title=\"行知网络-技术面\"></a>行知网络-技术面</h1><h2 id=\"1-react类组件和函数组件区别\"><a href=\"#1-react类组件和函数组件区别\" class=\"headerlink\" title=\"1.react类组件和函数组件区别\"></a>1.react类组件和函数组件区别</h2><h2 id=\"2-react的Useeffect副作用如何清除\"><a href=\"#2-react的Useeffect副作用如何清除\" class=\"headerlink\" title=\"2.react的Useeffect副作用如何清除\"></a>2.react的Useeffect副作用如何清除</h2><h2 id=\"3-React的Axios封装\"><a href=\"#3-React的Axios封装\" class=\"headerlink\" title=\"3.React的Axios封装\"></a>3.React的Axios封装</h2><h2 id=\"4-Vue的自定义指令\"><a href=\"#4-Vue的自定义指令\" class=\"headerlink\" title=\"4.Vue的自定义指令\"></a>4.Vue的自定义指令</h2><h2 id=\"5-Vuex五个参数\"><a href=\"#5-Vuex五个参数\" class=\"headerlink\" title=\"5.Vuex五个参数\"></a>5.Vuex五个参数</h2><h2 id=\"6-说一下你react常用的生命周期\"><a href=\"#6-说一下你react常用的生命周期\" class=\"headerlink\" title=\"6.说一下你react常用的生命周期\"></a>6.说一下你react常用的生命周期</h2><h2 id=\"7-谈一下你对ts的理解\"><a href=\"#7-谈一下你对ts的理解\" class=\"headerlink\" title=\"7.谈一下你对ts的理解\"></a>7.谈一下你对ts的理解</h2><h2 id=\"8-ts定义一个对象类型，怎们去定义\"><a href=\"#8-ts定义一个对象类型，怎们去定义\" class=\"headerlink\" title=\"8.ts定义一个对象类型，怎们去定义\"></a>8.ts定义一个对象类型，怎们去定义</h2><h2 id=\"9-对uiapp的理解\"><a href=\"#9-对uiapp的理解\" class=\"headerlink\" title=\"9.对uiapp的理解\"></a>9.对uiapp的理解</h2><h2 id=\"10-umi的理解\"><a href=\"#10-umi的理解\" class=\"headerlink\" title=\"10.umi的理解\"></a>10.umi的理解</h2><h1 id=\"行知网络-经理面\"><a href=\"#行知网络-经理面\" class=\"headerlink\" title=\"行知网络 - 经理面\"></a>行知网络 - 经理面</h1><h2 id=\"1-怎样和后端对接口\"><a href=\"#1-怎样和后端对接口\" class=\"headerlink\" title=\"1.怎样和后端对接口\"></a>1.怎样和后端对接口</h2><h2 id=\"2-怎样和ui对原型\"><a href=\"#2-怎样和ui对原型\" class=\"headerlink\" title=\"2.怎样和ui对原型\"></a>2.怎样和ui对原型</h2><h2 id=\"3-你项目中遇到的难点\"><a href=\"#3-你项目中遇到的难点\" class=\"headerlink\" title=\"3.你项目中遇到的难点\"></a>3.你项目中遇到的难点</h2><h2 id=\"4-你对每一个项目主要负责的功能和收获\"><a href=\"#4-你对每一个项目主要负责的功能和收获\" class=\"headerlink\" title=\"4.你对每一个项目主要负责的功能和收获\"></a>4.你对每一个项目主要负责的功能和收获</h2><h2 id=\"5-遇到问题，你一般怎么解决\"><a href=\"#5-遇到问题，你一般怎么解决\" class=\"headerlink\" title=\"5.遇到问题，你一般怎么解决\"></a>5.遇到问题，你一般怎么解决</h2><h2 id=\"6-你在流媒体项目中遇到的难点，以图片和视频为例去讲\"><a href=\"#6-你在流媒体项目中遇到的难点，以图片和视频为例去讲\" class=\"headerlink\" title=\"6.你在流媒体项目中遇到的难点，以图片和视频为例去讲\"></a>6.你在流媒体项目中遇到的难点，以图片和视频为例去讲</h2><h2 id=\"7-后端定义的接口，有什么规范\"><a href=\"#7-后端定义的接口，有什么规范\" class=\"headerlink\" title=\"7.后端定义的接口，有什么规范\"></a>7.后端定义的接口，有什么规范</h2><h2 id=\"8-你对加班怎们看\"><a href=\"#8-你对加班怎们看\" class=\"headerlink\" title=\"8.你对加班怎们看\"></a>8.你对加班怎们看</h2><h2 id=\"9-谈一下你印象最深的项目，为什么\"><a href=\"#9-谈一下你印象最深的项目，为什么\" class=\"headerlink\" title=\"9.谈一下你印象最深的项目，为什么\"></a>9.谈一下你印象最深的项目，为什么</h2>",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E4%B8%AD%E7%A7%91%E4%BC%98%E8%AE%AF/",
            "url": "https://www.yexingcheng.com/interview-questions/%E4%B8%AD%E7%A7%91%E4%BC%98%E8%AE%AF/",
            "title": "中科优讯面试题",
            "date_published": "2022-11-28T01:52:11.765Z",
            "content_html": "<h2 id=\"1-自我介绍\"><a href=\"#1-自我介绍\" class=\"headerlink\" title=\"1.自我介绍\"></a>1.自我介绍</h2><h2 id=\"2-cookie-localstorage和sessionstorage\"><a href=\"#2-cookie-localstorage和sessionstorage\" class=\"headerlink\" title=\"2.cookie localstorage和sessionstorage\"></a>2.cookie localstorage和sessionstorage</h2><h2 id=\"3-跨域请求\"><a href=\"#3-跨域请求\" class=\"headerlink\" title=\"3.跨域请求\"></a>3.跨域请求</h2><h2 id=\"4-js原型链的理解\"><a href=\"#4-js原型链的理解\" class=\"headerlink\" title=\"4.js原型链的理解\"></a>4.js原型链的理解</h2><h2 id=\"5-盒模型\"><a href=\"#5-盒模型\" class=\"headerlink\" title=\"5.盒模型\"></a>5.盒模型</h2><h2 id=\"6-Es6新增\"><a href=\"#6-Es6新增\" class=\"headerlink\" title=\"6.Es6新增\"></a>6.Es6新增</h2><h2 id=\"7-怎么实现居中\"><a href=\"#7-怎么实现居中\" class=\"headerlink\" title=\"7.怎么实现居中\"></a>7.怎么实现居中</h2><h2 id=\"8-在项目登录怎么做的\"><a href=\"#8-在项目登录怎么做的\" class=\"headerlink\" title=\"8.在项目登录怎么做的\"></a>8.在项目登录怎么做的</h2><h2 id=\"9-在项目中登录白名单怎么实现\"><a href=\"#9-在项目中登录白名单怎么实现\" class=\"headerlink\" title=\"9.在项目中登录白名单怎么实现\"></a>9.在项目中登录白名单怎么实现</h2><h2 id=\"10-订单中不同的操作怎么实现分类弹窗\"><a href=\"#10-订单中不同的操作怎么实现分类弹窗\" class=\"headerlink\" title=\"10.订单中不同的操作怎么实现分类弹窗\"></a>10.订单中不同的操作怎么实现分类弹窗</h2><h2 id=\"11-Vue中Vuex的使用\"><a href=\"#11-Vue中Vuex的使用\" class=\"headerlink\" title=\"11.Vue中Vuex的使用\"></a>11.Vue中Vuex的使用</h2><h2 id=\"12-Vue中的传值\"><a href=\"#12-Vue中的传值\" class=\"headerlink\" title=\"12.Vue中的传值\"></a>12.Vue中的传值</h2><h2 id=\"13-怎么获取路由的传值\"><a href=\"#13-怎么获取路由的传值\" class=\"headerlink\" title=\"13.怎么获取路由的传值\"></a>13.怎么获取路由的传值</h2><h2 id=\"14-MVVM的理解\"><a href=\"#14-MVVM的理解\" class=\"headerlink\" title=\"14.MVVM的理解\"></a>14.MVVM的理解</h2>",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E6%88%90%E9%BA%A6%E7%A7%91%E6%8A%80/",
            "url": "https://www.yexingcheng.com/interview-questions/%E6%88%90%E9%BA%A6%E7%A7%91%E6%8A%80/",
            "title": "成麦科技面试题",
            "date_published": "2022-11-28T01:51:20.379Z",
            "content_html": "<h2 id=\"1-react和vue的区别，尽可能多的说。\"><a href=\"#1-react和vue的区别，尽可能多的说。\" class=\"headerlink\" title=\"1.react和vue的区别，尽可能多的说。\"></a>1.react和vue的区别，尽可能多的说。</h2><h3 id=\"框架简介：\"><a href=\"#框架简介：\" class=\"headerlink\" title=\"框架简介：\"></a>框架简介：</h3><blockquote>\n<p>React主张是函数式编程的理念， 实现了前端界面的高性能高效率开发，react很擅长处理组件化的页面。React的官方网站提到了“学习一次，随处写作”这个关键功能，可以使用React框架在JavaScript中构建移动应用程序。在 React 中，所有的组件的渲染功能都依靠 JSX，它是JavaScript的语法扩展，它在创建UI组件和调试时非常简单有用。</p>\n<p>Vue是渐进式JavaScript框架。“渐进式框架”和“自底向上增量开发的设计”是Vue开发的两个概念。Vue可以在任意其他类型的项目中使用，使用成本较低，更灵活，主张较弱，在Vue的项目中也可以轻松融汇其他的技术来开发。特点：易用（使用成本低），灵活（生态系统完善，适用于任何规模的项目），高效（体积小，优化好，性能好）。</p>\n</blockquote>\n<h3 id=\"框架共同点：\"><a href=\"#框架共同点：\" class=\"headerlink\" title=\"框架共同点：\"></a>框架共同点：</h3><blockquote>\n<p>①都使用虚拟dom。<br>②提供了响应式和组件化的视图组件。<br>③把注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。(vue-router、vuex、react-router、redux等等)</p>\n</blockquote>\n<h3 id=\"各自的优势：\"><a href=\"#各自的优势：\" class=\"headerlink\" title=\"各自的优势：\"></a>各自的优势：</h3><blockquote>\n<p>React</p>\n<p>①灵活性和响应性：它提供最大的灵活性和响应能力。<br>②丰富的JavaScript库：来自世界各地的贡献者正在努力添加更多功能。<br>③可扩展性：由于其灵活的结构和可扩展性，React已被证明对大型应用程序更好。<br>④不断发展： React得到了Facebook专业开发人员的支持，他们不断寻找改进方法。<br>⑤web或移动平台： React提供React Native平台，可通过相同的React组件模型为iOS和Android开发本机呈现的应用程序。</p>\n</blockquote>\n<blockquote>\n<p>Vue</p>\n<p>①易于使用： Vue.js包含基于HTML的标准模板，可以更轻松地使用和修改现有应用程序。<br>②更顺畅的集成：无论是单页应用程序还是复杂的Web界面，Vue.js都可以更平滑地集成更小的部件，而不会对整个系统产生任何影响。<br>③更好的性能，更小的尺寸：它占用更少的空间，并且往往比其他框架提供更好的性能。<br>④精心编写的文档：通过详细的文档提供简单的学习曲线，无需额外的知识; HTML和JavaScript将完成工作。<br>⑤适应性：整体声音设计和架构使其成为一种流行的JavaScript框架。它提供无障碍的迁移，简单有效的结构和可重用的模板。</p>\n</blockquote>\n<h3 id=\"两者的区别：\"><a href=\"#两者的区别：\" class=\"headerlink\" title=\"两者的区别：\"></a>两者的区别：</h3><h4 id=\"1、数据是否可变：\"><a href=\"#1、数据是否可变：\" class=\"headerlink\" title=\"1、数据是否可变：\"></a>1、数据是否可变：</h4><blockquote>\n<p>React：整体是函数式的思想，在react中，是单向数据流，推崇结合immutable来实现数据不可变。<br>Vue：的思想是响应式的，也就是基于是数据可变的，通过对每一个属性建立Watcher来监听，当属性变化的时候，响应式的更新对应的虚拟dom。</p>\n</blockquote>\n<h4 id=\"2、编译-amp-写法\"><a href=\"#2、编译-amp-写法\" class=\"headerlink\" title=\"2、编译&amp;写法\"></a>2、编译&amp;写法</h4><blockquote>\n<p>React：思路是all in js，通过js来生成html，所以设计了jsx，还有通过js来操作css，社区的styled-component、jss等。<br>Vue：把html，css，js组合到一起，用各自的处理方式，Vue有单文件组件，可以把html、css、js写到一个文件中，html提供了模板引擎来处理。</p>\n</blockquote>\n<h4 id=\"3、重新渲染和优化\"><a href=\"#3、重新渲染和优化\" class=\"headerlink\" title=\"3、重新渲染和优化\"></a>3、重新渲染和优化</h4><blockquote>\n<p>当你比较React和Vue时，速度不能成为决定哪个更好的重要比较因素。在性能方面，让我们考虑重新渲染功能。当组件的状态发生变化时，React的机制会触发整个组件树的重新呈现。您可能需要使用额外的属性来避免不必要地重新渲染子组件。虽然Vue的重新渲染功能是开箱即用的，但Vue提供了优化的重新渲染，其中系统在渲染过程中跟踪依赖关系并相应地工作。重新渲染是Vue最显着的特征，也使其成为全世界开发人员广泛接受的框架。</p>\n</blockquote>\n<h4 id=\"4、类式的组件写法，还是声明式的写法\"><a href=\"#4、类式的组件写法，还是声明式的写法\" class=\"headerlink\" title=\"4、类式的组件写法，还是声明式的写法\"></a>4、类式的组件写法，还是声明式的写法</h4><blockquote>\n<p>react是类式的写法，api很少，而Vue是声明式的写法，通过传入各种options，api和参数都很多。所以react结合typescript更容易一起写，Vue稍微复杂。</p>\n</blockquote>\n<h4 id=\"5、路由和状态管理解决方案\"><a href=\"#5、路由和状态管理解决方案\" class=\"headerlink\" title=\"5、路由和状态管理解决方案\"></a>5、路由和状态管理解决方案</h4><blockquote>\n<p>在像React和Vue这样的基于组件的框架中，当您开始扩展应用程序时，需要更加关注状态管理和数据流。这是因为有许多组件相互交互并共享数据。在这种情况下，React提供了一种称为Flux &#x2F; Redux架构的创新解决方案，它代表单向数据流，是著名MVC架构的替代方案。现在，如果我们考虑Vue.js框架，就会有一个名为Vuex的更高级架构，它集成到Vue中并提供无与伦比的体验。</p>\n</blockquote>\n<h4 id=\"6、构建工具\"><a href=\"#6、构建工具\" class=\"headerlink\" title=\"6、构建工具\"></a>6、构建工具</h4><blockquote>\n<p>React和Vue都有一个非常好的开发环境。只需很少或没有配置，就可以创建应用程序，能够使用最新的实践和模板。在React中，有一个Create React App（CRA），在Vue中，它是vue-cli。这两种引导工具都倾向于提供舒适灵活的开发环境，并提供开始编码的出色起点。</p>\n</blockquote>\n<h2 id=\"2-html常用标签\"><a href=\"#2-html常用标签\" class=\"headerlink\" title=\"2.html常用标签\"></a>2.html常用标签</h2><blockquote>\n<p>a,p,div,span,img,header,main,footer,ul,i,li,ol</p>\n</blockquote>\n<h2 id=\"3-parseInt的理解\"><a href=\"#3-parseInt的理解\" class=\"headerlink\" title=\"3.parseInt的理解\"></a>3.parseInt的理解</h2><blockquote>\n<p><strong>parseInt(*string*, *radix*)</strong> 解析一个字符串并返回指定基数的十进制整数，<code>radix</code> 是 2-36 之间的整数，表示被解析字符串的基数。</p>\n<pre><code class=\"js\">parseInt(string, radix);\n</code></pre>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li><p><code>string</code></p>\n<p>要被解析的值。如果参数不是一个字符串，则将其转换为字符串 (使用 <a href=\"https://www.ecma-international.org/ecma-262/6.0/#sec-tostring\"><code>ToString</code></a>抽象操作)。字符串开头的空白符将会被忽略。</p>\n</li>\n<li><p><code>radix</code>_ 可选_</p>\n<p>从 <code>2</code> 到 <code>36</code> 的整数，表示进制的基数。例如指定 <code>16</code> 表示被解析值是十六进制数。如果超出这个范围，将返回 <code>NaN</code>。假如指定 <code>0</code> 或未指定，基数将会根据字符串的值进行推算。注意，推算的结果不会永远是默认值 <code>10</code>！文章后面的描述解释了当参数 <code>radix</code> 不传时该函数的具体行为。</p>\n</li>\n</ul>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>从给定的字符串中解析出的一个整数。</p>\n<p>或者 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>，当</p>\n<ul>\n<li><code>radix</code> 小于 <code>2</code> 或大于 <code>36</code>，或</li>\n<li>第一个非空格字符不能转换为数字。</li>\n</ul>\n</blockquote>\n<h2 id=\"4-数组循环，常用的方法\"><a href=\"#4-数组循环，常用的方法\" class=\"headerlink\" title=\"4.数组循环，常用的方法\"></a>4.数组循环，常用的方法</h2><blockquote>\n<p>for in</p>\n<p>for of</p>\n<p>forEach()</p>\n</blockquote>\n<h2 id=\"5-map循环三个参数，map循环返回的值是新值还是旧值，map的实际场景\"><a href=\"#5-map循环三个参数，map循环返回的值是新值还是旧值，map的实际场景\" class=\"headerlink\" title=\"5.map循环三个参数，map循环返回的值是新值还是旧值，map的实际场景\"></a>5.map循环三个参数，map循环返回的值是新值还是旧值，map的实际场景</h2><blockquote>\n<p><strong><code>map()</code></strong> 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。</p>\n<h3 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li><code>callbackFn</code></li>\n</ul>\n<p> 生成新数组元素的函数，使用三个参数：<code>currentValue``callbackFn</code> 数组中正在处理的当前元素。<code>index``callbackFn</code> 数组中正在处理的当前元素的索引。<code>array``map</code> 方法调用的数组。</p>\n<ul>\n<li><code>thisArg</code> 可选</li>\n</ul>\n<p> 执行 <code>callbackFn</code> 函数时被用作 <code>this</code> 的值。</p>\n<h3 id=\"返回值-1\"><a href=\"#返回值-1\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>一个新数组，每个元素都是回调函数的返回值</p>\n</blockquote>\n<h2 id=\"6-react的生命周期\"><a href=\"#6-react的生命周期\" class=\"headerlink\" title=\"6.react的生命周期\"></a>6.react的生命周期</h2><blockquote>\n<h2 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h2><p>当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：</p>\n<ul>\n<li><code>constructor()</code>: 在 React 组件挂载之前，会调用它的构造函数。</li>\n<li><code>getDerivedStateFromProps()</code>: 在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。</li>\n<li><code>render()</code>: render() 方法是 class 组件中唯一必须实现的方法。</li>\n<li><code>componentDidMount()</code>: 在组件挂载后（插入 DOM 树中）立即调用。</li>\n</ul>\n<p>render() 方法是 class 组件中唯一必须实现的方法，其他方法可以根据自己的需要来实现。</p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p>每当组件的 state 或 props 发生变化时，组件就会更新。</p>\n<p>当组件的 props 或 state 发生变化时会触发更新。组件更新的生命周期调用顺序如下：</p>\n<ul>\n<li><code>getDerivedStateFromProps()</code>: 在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。根据 shouldComponentUpdate() 的返回值，判断 React 组件的输出是否受当前 state 或 props 更改的影响。</li>\n<li><code>shouldComponentUpdate()</code>:当 props 或 state 发生变化时，shouldComponentUpdate() 会在渲染执行之前被调用。</li>\n<li><code>render()</code>: render() 方法是 class 组件中唯一必须实现的方法。</li>\n<li><code>getSnapshotBeforeUpdate()</code>: 在最近一次渲染输出（提交到 DOM 节点）之前调用。</li>\n<li><code>componentDidUpdate()</code>: 在更新后会被立即调用。</li>\n</ul>\n<p>render() 方法是 class 组件中唯一必须实现的方法，其他方法可以根据自己的需要来实现。</p>\n<h2 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h2><p>当组件从 DOM 中移除时会调用如下方法：</p>\n<ul>\n<li><code>componentWillUnmount()</code>: 在组件卸载及销毁之前直接调用。</li>\n</ul>\n</blockquote>\n<h2 id=\"7-react的性能优化怎么做\"><a href=\"#7-react的性能优化怎么做\" class=\"headerlink\" title=\"7.react的性能优化怎么做\"></a>7.react的性能优化怎么做</h2><h2 id=\"8-react的组件传值\"><a href=\"#8-react的组件传值\" class=\"headerlink\" title=\"8.react的组件传值\"></a>8.react的组件传值</h2><h2 id=\"9-setState是异步还是同步的，怎样获取同步数据\"><a href=\"#9-setState是异步还是同步的，怎样获取同步数据\" class=\"headerlink\" title=\"9.setState是异步还是同步的，怎样获取同步数据\"></a>9.setState是异步还是同步的，怎样获取同步数据</h2><h2 id=\"10-谈一下你对redux的理解\"><a href=\"#10-谈一下你对redux的理解\" class=\"headerlink\" title=\"10.谈一下你对redux的理解\"></a>10.谈一下你对redux的理解</h2>",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E7%A5%9E%E8%88%9F%E6%95%B0%E7%A0%81/",
            "url": "https://www.yexingcheng.com/interview-questions/%E7%A5%9E%E8%88%9F%E6%95%B0%E7%A0%81/",
            "title": "神舟数码面试题",
            "date_published": "2022-11-28T01:50:42.834Z",
            "content_html": "<h2 id=\"1-说说你对vuex的理解，mutations和actions有什么区别，你的项目中有哪些数据保存在vuex当中\"><a href=\"#1-说说你对vuex的理解，mutations和actions有什么区别，你的项目中有哪些数据保存在vuex当中\" class=\"headerlink\" title=\"1.说说你对vuex的理解，mutations和actions有什么区别，你的项目中有哪些数据保存在vuex当中?\"></a>1.说说你对vuex的理解，mutations和actions有什么区别，你的项目中有哪些数据保存在vuex当中?</h2><h2 id=\"2-vue项目首页加载做过哪些优化？\"><a href=\"#2-vue项目首页加载做过哪些优化？\" class=\"headerlink\" title=\"2.vue项目首页加载做过哪些优化？\"></a>2.vue项目首页加载做过哪些优化？</h2><h2 id=\"3-vue页面组件的样式写scoped可以区分全局样式和组件内的样式，那scoped的实现原理是什么？\"><a href=\"#3-vue页面组件的样式写scoped可以区分全局样式和组件内的样式，那scoped的实现原理是什么？\" class=\"headerlink\" title=\"3.vue页面组件的样式写scoped可以区分全局样式和组件内的样式，那scoped的实现原理是什么？\"></a>3.vue页面组件的样式写scoped可以区分全局样式和组件内的样式，那scoped的实现原理是什么？</h2><h2 id=\"4-说说Vue-use-的理解？\"><a href=\"#4-说说Vue-use-的理解？\" class=\"headerlink\" title=\"4.说说Vue.use()的理解？\"></a>4.说说Vue.use()的理解？</h2><h2 id=\"5-有没有封装过组件，有没有将封装的组件发布到npm或者别的平台的？\"><a href=\"#5-有没有封装过组件，有没有将封装的组件发布到npm或者别的平台的？\" class=\"headerlink\" title=\"5.有没有封装过组件，有没有将封装的组件发布到npm或者别的平台的？\"></a>5.有没有封装过组件，有没有将封装的组件发布到npm或者别的平台的？</h2><h2 id=\"6-es6中箭头函数和普通函数有什么区别，为什么箭头函数没有this？\"><a href=\"#6-es6中箭头函数和普通函数有什么区别，为什么箭头函数没有this？\" class=\"headerlink\" title=\"6.es6中箭头函数和普通函数有什么区别，为什么箭头函数没有this？\"></a>6.es6中箭头函数和普通函数有什么区别，为什么箭头函数没有this？</h2><h2 id=\"7-es6中forEach-map-for-of-for-in-四种循环的区别是什么，哪些业务中使用过map循环，平常用map多还是forEach多？\"><a href=\"#7-es6中forEach-map-for-of-for-in-四种循环的区别是什么，哪些业务中使用过map循环，平常用map多还是forEach多？\" class=\"headerlink\" title=\"7.es6中forEach, map, for of , for in 四种循环的区别是什么，哪些业务中使用过map循环，平常用map多还是forEach多？\"></a>7.es6中forEach, map, for of , for in 四种循环的区别是什么，哪些业务中使用过map循环，平常用map多还是forEach多？</h2><h2 id=\"8-如果要去华东跟随项目出差能接受吗…\"><a href=\"#8-如果要去华东跟随项目出差能接受吗…\" class=\"headerlink\" title=\"8.如果要去华东跟随项目出差能接受吗…\"></a>8.如果要去华东跟随项目出差能接受吗…</h2>",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E5%8F%8C%E7%BE%BD%E4%B9%9D%E5%B7%9E/",
            "url": "https://www.yexingcheng.com/interview-questions/%E5%8F%8C%E7%BE%BD%E4%B9%9D%E5%B7%9E/",
            "title": "双羽九州面试题",
            "date_published": "2022-11-28T01:49:01.152Z",
            "content_html": "<h2 id=\"1-说一下你知道的数据结构和算法\"><a href=\"#1-说一下你知道的数据结构和算法\" class=\"headerlink\" title=\"1.说一下你知道的数据结构和算法\"></a>1.说一下你知道的数据结构和算法</h2><h2 id=\"2-冒泡排序的时间复杂度\"><a href=\"#2-冒泡排序的时间复杂度\" class=\"headerlink\" title=\"2.冒泡排序的时间复杂度\"></a>2.冒泡排序的时间复杂度</h2><h2 id=\"3-margin的值为负值会发生什么\"><a href=\"#3-margin的值为负值会发生什么\" class=\"headerlink\" title=\"3.margin的值为负值会发生什么\"></a>3.margin的值为负值会发生什么</h2><h2 id=\"4-BFC\"><a href=\"#4-BFC\" class=\"headerlink\" title=\"4.BFC\"></a>4.BFC</h2><h2 id=\"5-vue路由传参的方式，以及弊端\"><a href=\"#5-vue路由传参的方式，以及弊端\" class=\"headerlink\" title=\"5.vue路由传参的方式，以及弊端\"></a>5.vue路由传参的方式，以及弊端</h2><h2 id=\"6-vue传值\"><a href=\"#6-vue传值\" class=\"headerlink\" title=\"6.vue传值\"></a>6.vue传值</h2><h2 id=\"7-嵌套路由\"><a href=\"#7-嵌套路由\" class=\"headerlink\" title=\"7.嵌套路由\"></a>7.嵌套路由</h2><h2 id=\"8-http请求头你了解的\"><a href=\"#8-http请求头你了解的\" class=\"headerlink\" title=\"8.http请求头你了解的\"></a>8.http请求头你了解的</h2><h2 id=\"9-contenttype你的了解\"><a href=\"#9-contenttype你的了解\" class=\"headerlink\" title=\"9.contenttype你的了解\"></a>9.contenttype你的了解</h2><h2 id=\"10-描述你简历项目\"><a href=\"#10-描述你简历项目\" class=\"headerlink\" title=\"10.描述你简历项目\"></a>10.描述你简历项目</h2>",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/JavaScript/promise/",
            "url": "https://www.yexingcheng.com/JavaScript/promise/",
            "title": "详解JsPromise",
            "date_published": "2022-11-14T12:49:25.617Z",
            "content_html": "<h1 id=\"什么是promise\"><a href=\"#什么是promise\" class=\"headerlink\" title=\"什么是promise?\"></a>什么是promise?</h1><p>来看看官方解释：</p>\n<p>Promise 是目前 JS 异步编程的一种解决方案。</p>\n<blockquote>\n<p>Promise 对象用于表示一个异步操作的最终完成（或失败）及其结果值。<br>Promise 必须为以下三种状态之一：等待态（Pending）、执行态（Fulfilled）和拒绝态（Rejected）。一旦Promise 被 resolve 或 reject，不能再迁移至其他任何状态（即状态 immutable）。</p>\n</blockquote>\n<p><strong>基本过程</strong>：<br>初始化 Promise 状态（pending）<br>立即执行 Promise 中传入的 fn 函数，将Promise 内部 resolve、reject 函数作为参数传递给 fn ，按事件机制时机处理<br>执行 then(..) 注册回调处理数组（then 方法可被同一个 promise 调用多次）<br>Promise里的关键是要保证，then方法传入的参数 onFulfilled 和 onRejected，必须在then方法被调用的那一轮事件循环之后的新执行栈中执行。</p>\n",
            "tags": [
                "JavaScript",
                "Js"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/JavaScript/object-oriented/",
            "url": "https://www.yexingcheng.com/JavaScript/object-oriented/",
            "title": "Js面向对象详解",
            "date_published": "2022-11-14T12:28:45.829Z",
            "content_html": "",
            "tags": [
                "JavaScript",
                "Js"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/algorithm/sort/",
            "url": "https://www.yexingcheng.com/algorithm/sort/",
            "title": "基础排序算法总结",
            "date_published": "2022-11-13T18:17:16.850Z",
            "content_html": "<h1 id=\"冒泡排序：\"><a href=\"#冒泡排序：\" class=\"headerlink\" title=\"冒泡排序：\"></a>冒泡排序：</h1><blockquote>\n<p>从开始位置两两比较，持续n轮</p>\n</blockquote>\n<h2 id=\"基础版：\"><a href=\"#基础版：\" class=\"headerlink\" title=\"基础版：\"></a>基础版：</h2><pre><code class=\"js\">function bubbleSort(arr)&#123;\n    for(let i = 0; i &lt;arr.length; i++)&#123;\n        for(let j = 0; j &lt;arr.length; j++)&#123;\n            if(arr[j]&gt;arr[j+1])&#123;\n                let tmp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = tmp;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"改进版\"><a href=\"#改进版\" class=\"headerlink\" title=\"改进版\"></a>改进版</h2><pre><code class=\"js\">function bubleSort(arr)&#123;\n    for(let i = arr.length-1;i&gt;0;i--)&#123;\n        for(let j = 0; j&lt;i;j++)&#123;\n            if(arr[j]&gt;arr[j+1])&#123;\n                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]]\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"选择排序：\"><a href=\"#选择排序：\" class=\"headerlink\" title=\"选择排序：\"></a>选择排序：</h1><blockquote>\n<p>每次选出最大&#x2F;最小值 持续n轮</p>\n</blockquote>\n<h2 id=\"基础班\"><a href=\"#基础班\" class=\"headerlink\" title=\"基础班\"></a>基础班</h2><pre><code class=\"javascript\">function selectSort(arr)&#123;\n    for(let i = 0i&lt;arr.length; i &lt; ++)&#123;\n        let index = i;\n\n        for(let j = i;j&lt;arr.length;j++)&#123;\n            if(arr[index]&gt;arr[j])&#123;\n                index = j;\n        &#125;\n    &#125;\n    [arr[i], arr[index]] = [arr[index],arr[i]]\n&#125;\n</code></pre>\n<h2 id=\"改进版-1\"><a href=\"#改进版-1\" class=\"headerlink\" title=\"改进版\"></a>改进版</h2><pre><code class=\"javascript\">function selectSort (arr) &#123;\n  for (let i = 0, len_i = arr.length - 1; i &lt; len_i; i++) &#123;\n    let index = i\n    for (let j = i + 1, len_j = arr.length; j &lt; len_j; j++) &#123;\n      if (arr[index] &gt; arr[j]) &#123;\n        index = j\n      &#125;\n    &#125;\n    if (index !== i) &#123;\n      [arr[i], arr[index]] = [arr[index], arr[i]]\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<h1 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h1><h1 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h1><h1 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h1><h1 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h1><h1 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h1>",
            "tags": [
                "算法",
                "js",
                "面试",
                "算法"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/algorithm/concurrent-requests/",
            "url": "https://www.yexingcheng.com/algorithm/concurrent-requests/",
            "title": "并发请求",
            "date_published": "2022-11-13T17:54:00.855Z",
            "content_html": "<h1 id=\"并发请求：\"><a href=\"#并发请求：\" class=\"headerlink\" title=\"并发请求：\"></a>并发请求：</h1><p>给定一个url数组，每一项都是一个url地址，然后给出一个最大的并发请求数，直到所有请求发送完毕，然后把所有的返回结果归并到一个数组里面，并且顺序和url地址顺序相同</p>\n<p>首先，请求肯定是异步的，所以我们返回一个Promise,并且这个Promise一定是成功的，并且我们准备好一个返回数组，并且排除特殊情况</p>\n<pre><code class=\"js\">function concurRequest(urls,maxNum)&#123;\n    return new Promise(resolve=&gt;&#123;\n        if(urls.length===0)&#123;\n            reslove([])\n            return\n        &#125;\n    &#125;)\n        let result = []\n\n&#125;\n</code></pre>\n<p>每次我们取出一个url地址，然后发送请求，因为我们不用等待请求结果，所以可以看作是并发的</p>\n<pre><code class=\"js\">function concurRequest(urls,maxNum)&#123;\n    return new Promise(resolve=&gt;&#123;\n        if(urls.length===0)&#123;\n            reslove([])\n            return\n        &#125;\n        let result = []\n        let index = 0;//下一个请求的下标\n\n        function request()&#123;\n            const url = urls[index];\n            index++;\n            fetch(url)\n        &#125;\n\n    &#125;)\n&#125;\n</code></pre>\n<p>现在以及可以发送请求了，但是在他请求完了之后，不管是成功还是失败，我们都加入到返回数组中</p>\n<pre><code class=\"js\">function concurRequest(urls,maxNum)&#123;\n    return new Promise(resolve=&gt;&#123;\n        if(urls.length===0)&#123;\n            reslove([])\n            return\n        &#125;\n        let result = []\n        let index = 0;//下一个请求的下标\n\n        async function request()&#123;\n            const i = index;//保存请求url在urls数组中的位置\n            const url = urls[index];\n            index++;\n            try&#123;\n                const res  = await fetch(url)\n                result[i] = res\n            &#125;catch(e)&#123;\n                result[i] = e\n            &#125;\n\n        &#125;\n\n    &#125;)\n&#125;\n</code></pre>\n<p>当一个请求完成了，就要开始发送下一个请求了：</p>\n<pre><code class=\"js\">function concurRequest(urls,maxNum)&#123;\n    return new Promise(resolve=&gt;&#123;\n        if(urls.length===0)&#123;\n            reslove([])\n            return\n        &#125;\n        let result = []\n        let index = 0;//下一个请求的下标\n\n        async function request()&#123;\n\n            if(index==urls.length)return//发送次数到达最大就停止发送\n            const i = index;//保存请求url在urls数组中的位置\n            const url = urls[index];\n            index++;\n            try&#123;\n                const res  = await fetch(url)\n                result[i] = res\n            &#125;catch(e)&#123;\n                result[i] = e\n            &#125;finally&#123;\n                request()\n            &#125;\n\n        &#125;\n\n    &#125;)\n&#125;\n</code></pre>\n<p>最后要判断所有请求是否都完成了，我们每完成一次请求就记录一次数据</p>\n<pre><code class=\"js\">function concurRequest(urls,maxNum)&#123;\n    return new Promise(resolve=&gt;&#123;\n        if(urls.length===0)&#123;\n            reslove([])\n            return\n        &#125;\n        let result = []\n        let index = 0;//下一个请求的下标\n        let count = 0;//完成的请求数量\n        async function request()&#123;\n\n            if(index==urls.length)return//发送次数到达最大就停止发送\n            const i = index;//保存请求url在urls数组中的位置\n            const url = urls[index];\n            index++;\n            try&#123;\n                const res  = await fetch(url)\n                result[i] = res\n            &#125;catch(e)&#123;\n                result[i] = e\n            &#125;finally&#123;\n                count++\n                if(count===urls.length)&#123;\n                    resolve(result)\n                &#125;\n                request()\n            &#125;\n\n        &#125;\n    &#125;)\n&#125;\n</code></pre>\n<p>这样我们请求的函数就有了，但是要调用几次呢，就是调用最大并发数的次数：</p>\n<pre><code class=\"js\">function concurRequest(urls,maxNum)&#123;\n    return new Promise(resolve=&gt;&#123;\n        if(urls.length===0)&#123;\n            reslove([])\n            return\n        &#125;\n        let result = []\n        let index = 0;//下一个请求的下标\n        let count = 0;//完成的请求数量\n        async function request()&#123;\n\n            if(index==urls.length)return//发送次数到达最大就停止发送\n            const i = index;//保存请求url在urls数组中的位置\n            const url = urls[index];\n            index++;\n            try&#123;\n                const res  = await fetch(url)\n                result[i] = res\n            &#125;catch(e)&#123;\n                result[i] = e\n            &#125;finally&#123;\n                count++\n                if(count===urls.length)&#123;\n                    resolve(result)\n                &#125;\n                request()\n            &#125;\n\n        &#125;\n\n        let times = Math.min(urls.length,maxNum)\n\n        for(let i = 0; i &lt; times; i++)&#123;\n            request()\n        &#125;\n    &#125;)\n&#125;\n</code></pre>\n<p>到这里这道面试题就完成了</p>\n",
            "tags": [
                "算法",
                "js",
                "面试",
                "算法"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/data-structures/stack/",
            "url": "https://www.yexingcheng.com/data-structures/stack/",
            "title": "栈代码面试题",
            "date_published": "2022-11-12T13:27:30.117Z",
            "content_html": "<h1 id=\"使用临时堆栈对堆栈进行排序\"><a href=\"#使用临时堆栈对堆栈进行排序\" class=\"headerlink\" title=\"使用临时堆栈对堆栈进行排序\"></a>使用临时堆栈对堆栈进行排序</h1><p>给定一堆整数，使用另一个临时堆栈按升序对其进行排序。</p>\n<h2 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h2><blockquote>\n<p>输入 ：[34、3、31、98、92、23]<br>输出：[3、23、31、34、92、98]</p>\n<p>输入：[3、5、1、4、2、8]<br>输出：[1、2、3、4、5、8]</p>\n</blockquote>\n<h2 id=\"算法：\"><a href=\"#算法：\" class=\"headerlink\" title=\"算法：\"></a>算法：</h2><p>1、创建一个临时堆栈为tmpStack<br>2、虽然输入堆栈不为空，但请执行以下操作：</p>\n<ul>\n<li>从输入堆栈弹出一个元素，成为temp</li>\n<li>当临时堆栈不为空且临时堆栈顶部大于 temp 时， 临时堆栈中弹出并将其推送到输入堆栈</li>\n<li>将temp推入临时堆栈</li>\n</ul>\n<p>3、排序后的数字在tempStack</p>\n<h2 id=\"执行：\"><a href=\"#执行：\" class=\"headerlink\" title=\"执行：\"></a>执行：</h2><pre><code class=\"js\">function sortStack(input)&#123;\n\n    let tempStack = [];\n    while(input.length &gt; 0)&#123;\n\n        let temp = input.pop();\n\n    while(tempStack.length &gt; 0 &amp;&amp; tempStack[tempStack.length-1]&gt;temp)&#123;\n\n        input.push(tempStack[tempStack.length-1]);\n\n        tempStack.pop();\n    &#125;   \n\n    tempStack.push(temp);\n\n    &#125;\n    return tempStack;\n&#125;\n\n\nconst arr = [34, 3, 31, 98, 92, 23]\n\nconsole.log(sortStack(arr))\n</code></pre>\n<blockquote>\n<p>输入：[34, 3, 31, 98, 92, 23]</p>\n<p>取出的元素：23<br>输入：[34, 3, 31, 98, 92]<br>tmpStack：[23]</p>\n<p>取出的元素：92<br>输入：[34, 3, 31, 98]<br>tmpStack: [23, 92]</p>\n<p>取出元素: 98<br>输入: [34, 3, 31]<br>tmpStack: [23, 92, 98]</p>\n<p>取出元素: 31<br>输入: [34, 3, 98, 92]<br>tmpStack: [23, 31]</p>\n<p>取出元素: 92<br>输入: [34, 3, 98]<br>tmpStack: [23, 31, 92]</p>\n<p>取出元素: 98<br>输入: [34, 3]<br>tmpStack: [23, 31, 92 , 98]</p>\n<p>取出的元素：3<br>输入：[34, 98, 92, 31, 23]<br>tmpStack：[3]</p>\n<p>取出的元素：23<br>输入：[34, 98, 92, 31]<br>tmpStack: [3, 23]</p>\n<p>取出元素: 31<br>输入: [34, 98, 92]<br>tmpStack: [3, 23, 31]</p>\n<p>取出元素: 92<br>输入: [34, 98]<br>tmpStack: [3, 23, 31 , 92]</p>\n<p>取出的元素：98<br>输入：[34]<br>tmpStack：[3, 23, 31, 92, 98]</p>\n<p>取出的元素：34<br>输入：[98, 92]<br>tmpStack：[3, 23, 31, 34]</p>\n<p>元素取出：92<br>输入：[98]<br>tmpStack：[3,23,31,34,92]</p>\n<p>取出元素：98<br>输入：[]<br>tmpStack：[3,23,31,34,92,98]</p>\n<p>最终排序列表： [3、23、31、34、92、98]</p>\n</blockquote>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><blockquote>\n<p>98 92 34 31 23 3</p>\n</blockquote>\n<p><strong>时间复杂度：</strong> O(n 2 )其中 n 是给定堆栈中的整数总数。<br><strong>辅助空间：</strong> O(n)</p>\n",
            "tags": [
                "数据结构",
                "js",
                "stack"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/data-structures/array/",
            "url": "https://www.yexingcheng.com/data-structures/array/",
            "title": "数组代码面试题",
            "date_published": "2022-11-11T14:11:17.368Z",
            "content_html": "<h1 id=\"查找数组中最小和次小的元素\"><a href=\"#查找数组中最小和次小的元素\" class=\"headerlink\" title=\"查找数组中最小和次小的元素\"></a>查找数组中最小和次小的元素</h1><h2 id=\"实例：\"><a href=\"#实例：\" class=\"headerlink\" title=\"实例：\"></a>实例：</h2><pre><code>输入：arr[] = &#123;12, 13, 1, 10, 34, 1&#125;\n输出：最小元素是 1 \n     第二个最小的元素是 10\n</code></pre>\n<h3 id=\"方法1（简单方法）\"><a href=\"#方法1（简单方法）\" class=\"headerlink\" title=\"方法1（简单方法）\"></a>方法1（简单方法）</h3><p>一个简单的解决方案是按照升序对数组进行排序。排序数组中的前两个元素将是两个最小的元素</p>\n<pre><code class=\"js\">let arr = [111, 13, 25, 9, 34, 1];\n\narr.sort((a,b)=&gt;a-b)\n\nconsole.log(arr[0],arr[1]);\n</code></pre>\n<p>如果最小元素出现不止一次，那么我们将不得不使用循环来打印唯一的最小元素和次小元素。 </p>\n<p><strong>时间复杂度：</strong> O(N*logN)<br><strong>辅助空间：</strong> O(1)</p>\n<h3 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h3><p>更好的<strong>解决方案</strong>是扫描阵列两次。在第一次遍历中找到最小元素。设此元素为 x。在第二次遍历中，找到大于 x 的最小元素。</p>\n<p>使用这种方法，我们可以克服方法 1 的问题，即最小元素在数组中出现多次时出现的问题。<br>上述解决方案需要对输入数组进行两次遍历。 </p>\n",
            "tags": [
                "数据结构",
                "Array",
                "js"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/data-structures/main/",
            "url": "https://www.yexingcheng.com/data-structures/main/",
            "title": "面试需要了解的八个数据结构",
            "date_published": "2022-11-11T13:59:56.618Z",
            "content_html": "<p>1976 年，一个瑞士计算机科学家写一本书《Algorithms + Data Structures &#x3D; Programs》。即：算法 + 数据结构 &#x3D; 程序。40 多年过去了，这个等式依然成立。</p>\n<p>很多代码面试题都要求候选者深入理解数据结构，不管你来自大学计算机专业还是编程培训机构，也不管你有多少年编程经验。有时面试题会直接提到数据结构，比如“给我实现一个二叉树”，然而有时则不那么明显，比如“统计一下每个作者写的书的数量”。</p>\n<h1 id=\"什么是数据结构？\"><a href=\"#什么是数据结构？\" class=\"headerlink\" title=\"什么是数据结构？\"></a>什么是数据结构？</h1><p>数据结构是计算机存储、组织数据的方式。对于特定的数据结构(比如数组)，有些操作效率很高(读某个数组元素)，有些操作的效率很低(删除某个数组元素)。程序员的目标是为当前的问题选择最优的数据结构。</p>\n<h2 id=\"为什么我们需要数据结构\"><a href=\"#为什么我们需要数据结构\" class=\"headerlink\" title=\"为什么我们需要数据结构\"></a>为什么我们需要数据结构</h2><p>数据是程序的核心要素，因此数据结构的价值不言而喻。无论你在写什么程序，你都需要与数据打交道，比如员工工资、股票价格、杂货清单或者电话本。在不同场景下，数据需要以特定的方式存储，我们有不同的数据结构可以满足我们的需求。</p>\n<h1 id=\"8种常用的数据结构\"><a href=\"#8种常用的数据结构\" class=\"headerlink\" title=\"8种常用的数据结构\"></a>8种常用的数据结构</h1><p>1.数组<br>2.栈<br>3.队列<br>4.链表<br>5.图<br>6.树<br>7.前缀树<br>8.哈希表</p>\n<h2 id=\"1、数组\"><a href=\"#1、数组\" class=\"headerlink\" title=\"1、数组\"></a>1、数组</h2><p><strong>数组</strong>(Array)大概是最简单，也是最常用的数据结构了。其他数据结构，比如栈和队列都是由数组衍生出来的</p>\n<p>下面展示了一个数组，他有四个元素</p>\n<p><img data-src=\"/data-structures/main/image-20221111221359307.png\" alt=\"image-20221111221359307\"></p>\n<p>每一个元素的位置由数字编号，称为下标或者索引。大多数编程语言的第一个元素的下标为0。</p>\n<p>根据维度区分，有2种不同的数组：</p>\n<ul>\n<li>一维数组</li>\n<li>多维数组</li>\n</ul>\n<h3 id=\"数组的基本操作\"><a href=\"#数组的基本操作\" class=\"headerlink\" title=\"数组的基本操作\"></a>数组的基本操作</h3><ul>\n<li>Insert - 在某个索引处插入元素</li>\n<li>Get - 读取某个索引处的元素</li>\n<li>Delete - 删除某个索引处的元素</li>\n<li>Size - 获取数组的长度</li>\n</ul>\n<p><a href=\"/data-structures/array/\">常见的数组代码面试题</a></p>\n<h2 id=\"2-栈\"><a href=\"#2-栈\" class=\"headerlink\" title=\"2. 栈\"></a>2. 栈</h2><p>撤回，即 Ctrl+Z，是我们最常见的操作之一，大多数应用都会支持这个功能。你知道它是怎么实现的吗？答案是这样的：把之前的应用状态(限制个数)保存到内存中，最近的状态放到第一个。这时，我们需要栈(stack)来实现这个功能。</p>\n<p>栈中的元素采用 LIFO (Last In First Out)，即后进先出。</p>\n<p>下图的栈有 3 个元素，3 在最上面，因此它会被第一个移除</p>\n<p><img data-src=\"/data-structures/main/image-20221112212908111.png\" alt=\"image-20221112212908111\"></p>\n<p>栈的基本操作 </p>\n<p>栈的基本操作</p>\n<ul>\n<li>Push —  在栈的最上方插入元素</li>\n<li>Pop — 返回栈最上方的元素，并将其删除</li>\n<li>isEmpty —  查询栈是否为空</li>\n<li>Top —  返回栈最上方的元素，并不删除</li>\n</ul>\n<p><a href=\"/data-structures/stack/\">常见的数组代码面试题</a></p>\n",
            "tags": [
                "数据结构",
                "js"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/JavaScript/wrapper-object/",
            "url": "https://www.yexingcheng.com/JavaScript/wrapper-object/",
            "title": "js中包装对象",
            "date_published": "2022-11-08T13:08:22.631Z",
            "content_html": "<h1 id=\"先来看定义\"><a href=\"#先来看定义\" class=\"headerlink\" title=\"先来看定义\"></a>先来看定义</h1><p>对象是javascript语言最主要的数据类型，三种原始类型的值————Number,string,boolean在一定条件下，也会自动转为对象，也就是原始类型的<code>包装对象</code>(wrapper)</p>\n<p>所谓<code>包装对象</code> 指的是Number,string,boolean分别对应的Number,String,Boolean三个原生对象。这三个原生对象可以把原始类型的值变成(包装成)对象</p>\n<pre><code class=\"js\">var v1 = new Number(123);\nvar v2 = new String(&#39;abc&#39;);\nvar v3 = new Boolean(true);\n\ntypeof v1 // &quot;object&quot;\ntypeof v2 // &quot;object&quot;\ntypeof v3 // &quot;object&quot;\n\nv1 === 123 // false\nv2 === &#39;abc&#39; // false\nv3 === true // false\n</code></pre>\n<p>面代码中，基于原始类型的值，生成了三个对应的包装对象。可以看到，v1、v2、v3都是对象，且与对应的简单类型值不相等。</p>\n<p>包装对象的设计目的，首先是使得“对象”这种类型可以覆盖 JavaScript 所有的值，整门语言有一个通用的数据模型，其次是使得原始类型的值也有办法调用自己的方法。</p>\n<p><code>Number</code>、<code>String</code>和<code>Boolean</code>这三个原生对象，如果不作为构造函数调用（即调用时不加new），而是作为普通函数调用，常常用于将任意类型的值转为数值、字符串和布尔值。</p>\n<pre><code class=\"js\">// 字符串转为数值\nNumber(&#39;123&#39;) // 123\n\n// 数值转为字符串\nString(123) // &quot;123&quot;\n\n// 数值转为布尔值\nBoolean(123) // true\n</code></pre>\n<p>总结一下，这三个对象作为构造函数使用（带有new）时，可以将原始类型的值转为对象；作为普通函数使用时（不带有new），可以将任意类型的值，转为原始类型的值。</p>\n<h1 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h1><p>三种包装对象各自提供了许多实例方法。这里介绍两种它们共同具有、从Object对象继承的方法:<code>valueOf()</code>和<code>toString()</code></p>\n<ul>\n<li>valueOf()<br><code>valueOf()</code>方法返回包装对象实例对应的原始类型的值。</li>\n</ul>\n<pre><code class=\"js\">new Number(123).valueOf()  // 123\nnew String(&#39;abc&#39;).valueOf() // &quot;abc&quot;\nnew Boolean(true).valueOf() // true\n</code></pre>\n<ul>\n<li>toString()<br><code>toString()</code>方法返回对应的字符串形式</li>\n</ul>\n<pre><code class=\"js\">new Number(123).toString() // &quot;123&quot;\nnew String(&#39;abc&#39;).toString() // &quot;abc&quot;\nnew Boolean(true).toString() // &quot;true&quot;\n</code></pre>\n<h2 id=\"原始类型与实例对象的自动转换\"><a href=\"#原始类型与实例对象的自动转换\" class=\"headerlink\" title=\"原始类型与实例对象的自动转换\"></a>原始类型与实例对象的自动转换</h2><p>某些场合，原始类型的值会自动当作包装对象调用，即调用包装对象的属性和方法。这时，JavaScript 引擎会自动将原始类型的值转为包装对象实例，并在使用后立刻销毁实例。</p>\n<p>比如，字符串可以调用<code>length</code>属性，返回字符串的长度。</p>\n<pre><code class=\"js\">&#39;abc&#39;.length // 3\n</code></pre>\n<p>上面代码中，<code>abc</code>是一个字符串，本身不是对象，不能调用<code>length</code>属性。JavaScript 引擎自动将其转为包装对象，在这个对象上调用<code>length</code>属性。调用结束后，这个临时对象就会被销毁。这就叫原始类型与实例对象的自动转换</p>\n<pre><code class=\"js\">var str = &#39;abc&#39;;\nstr.length // 3\n\n// 等同于\nvar strObj = new String(str)\n// String &#123;\n//   0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;, length: 3, [[PrimitiveValue]]: &quot;abc&quot;\n// &#125;\nstrObj.length // 3\n</code></pre>\n<p>自动转换生成的包装对象是只读的，无法修改。所以，字符串无法添加新属性。</p>\n<pre><code class=\"js\">var s = &#39;Hello World&#39;;\ns.x = 123;\ns.x // undefined\n</code></pre>\n<p>另一方面，调用结束后，包装对象实例会自动销毁。这意味着，下一次调用字符串的属性时，实际是调用一个新生成的对象，而不是上一次调用时生成的那个对象，所以取不到赋值在上一个对象的属性。如果要为字符串添加属性，只有在它的原型对象String.prototype上定义。</p>\n<h2 id=\"自定义方法\"><a href=\"#自定义方法\" class=\"headerlink\" title=\"自定义方法\"></a>自定义方法</h2><p>除了原生的实例方法，包装对象还可以自定义方法和属性，供原始类型的值直接调用。</p>\n<p>比如，我们可以新增一个double方法，使得字符串和数字翻倍。</p>\n<pre><code class=\"js\">String.prototype.double = function () &#123;\n  return this.valueOf() + this.valueOf();\n&#125;;\n\n&#39;abc&#39;.double() // abcabc\n\nNumber.prototype.double = function () &#123;\n  return this.valueOf() + this.valueOf();\n&#125;;\n\n(123).double() // 246\n</code></pre>\n<p>上面代码在String和Number这两个对象的原型上面，分别自定义了一个方法，从而可以在所有实例对象上调用。注意，最后的123外面必须要加上圆括号，否则后面的点运算符（.）会被解释成小数点。</p>\n<h1 id=\"Boolean对象\"><a href=\"#Boolean对象\" class=\"headerlink\" title=\"Boolean对象\"></a>Boolean对象</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述:\"></a>概述:</h2><p>Boolean对象是 JavaScript 的三个包装对象之一。作为构造函数，它主要用于生成布尔值的包装对象实例。</p>\n<pre><code class=\"js\">var b = new Boolean(true);\n\ntypeof b // &quot;object&quot;\nb.valueOf() // true\n</code></pre>\n<p>上面代码的变量b是一个<code>Boolean</code>对象的实例，它的类型是对象，值为布尔值<code>true</code>。</p>\n<p>注意，<code>false</code>对应的包装对象实例，布尔运算结果也是<code>true</code>。</p>\n<pre><code class=\"js\">if (new Boolean(false)) &#123;\n  console.log(&#39;true&#39;);\n&#125; // true\n\nif (new Boolean(false).valueOf()) &#123;\n  console.log(&#39;true&#39;);\n&#125; // 无输出\n</code></pre>\n<p>上面代码的第一个例子之所以得到true，是因为false对应的包装对象实例是一个对象，进行逻辑运算时，被自动转化成布尔值true（因为所有对象对应的布尔值都是true）。而实例的valueOf方法，则返回实例对应的原始值，本例为false。</p>\n<h2 id=\"Boolean-函数的类型转换作用\"><a href=\"#Boolean-函数的类型转换作用\" class=\"headerlink\" title=\"Boolean 函数的类型转换作用\"></a>Boolean 函数的类型转换作用</h2><p><code>Boolean</code>对象除了可以作为构造函数，还可以单独使用，将任意值转为布尔值。这时<code>Boolean</code>就是一个单纯的工具方法。</p>\n<pre><code class=\"js\">Boolean(undefined) // false\nBoolean(null) // false\nBoolean(0) // false\nBoolean(&#39;&#39;) // false\nBoolean(NaN) // false\n\nBoolean(1) // true\nBoolean(&#39;false&#39;) // true\nBoolean([]) // true\nBoolean(&#123;&#125;) // true\nBoolean(function () &#123;&#125;) // true\nBoolean(/foo/) // true\n</code></pre>\n<p>上面代码中几种得到true的情况，都值得认真记住。</p>\n<p>顺便提一下，使用双重的否运算符（!）也可以将任意值转为对应的布尔值。</p>\n<pre><code class=\"js\">!!undefined // false\n!!null // false\n!!0 // false\n!!&#39;&#39; // false\n!!NaN // false\n\n!!1 // true\n!!&#39;false&#39; // true\n!![] // true\n!!&#123;&#125; // true\n!!function()&#123;&#125; // true\n!!/foo/ // true\n</code></pre>\n<p>最后，对于一些特殊值，<code>Boolean</code>对象前面加不加<code>new</code>，会得到完全相反的结果，必须小心。</p>\n<pre><code class=\"js\">if (Boolean(false)) &#123;\n  console.log(&#39;true&#39;);\n&#125; // 无输出\n\nif (new Boolean(false)) &#123;\n  console.log(&#39;true&#39;);\n&#125; // true\n\nif (Boolean(null)) &#123;\n  console.log(&#39;true&#39;);\n&#125; // 无输出\n\nif (new Boolean(null)) &#123;\n  console.log(&#39;true&#39;);\n&#125; // true\n</code></pre>\n<h1 id=\"Number-对象\"><a href=\"#Number-对象\" class=\"headerlink\" title=\"Number 对象\"></a>Number 对象</h1><h2 id=\"概述-1\"><a href=\"#概述-1\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><code>Number</code>对象是数值对应的包装对象，可以作为构造函数使用，也可以作为工具函数使用。</p>\n<p>作为构造函数时，它用于生成值为数值的对象。</p>\n<pre><code class=\"js\">var n = new Number(1);\ntypeof n // &quot;object&quot;\n</code></pre>\n<p>上面代码中，<code>Number</code>对象作为构造函数使用，返回一个值为1的对象。</p>\n<p>作为工具函数时，它可以将任何类型的值转为数值。</p>\n<pre><code class=\"js\">Number(true) // 1\n</code></pre>\n<h2 id=\"静态属性\"><a href=\"#静态属性\" class=\"headerlink\" title=\"静态属性\"></a>静态属性</h2><p><code>Number</code>对象拥有以下一些静态属性（即直接定义在<code>Number</code>对象上的属性，而不是定义在实例上的属性）。</p>\n<ul>\n<li><code>Number.POSITIVE_INFINITY</code>：正的无限，指向Infinity。</li>\n<li><code>Number.NEGATIVE_INFINITY</code>：负的无限，指向-Infinity。</li>\n<li><code>Number.NaN</code>：表示非数值，指向NaN。</li>\n<li><code>Number.MIN_VALUE</code>：表示最小的正数（即最接近0的正数，在64位浮点数体系中为5e-324），相应- 的，最接近0的负数为-<code>Number.MIN_VALUE</code>。</li>\n<li><code>Number.MAX_SAFE_INTEGER</code>：表示能够精确表示的最大整数，即9007199254740991。</li>\n<li><code>Number.MIN_SAFE_INTEGER</code>：表示能够精确表示的最小整数，即-9007199254740991。</li>\n</ul>\n<p>实例方法<br><code>Number</code>对象有4个实例方法，都跟将数值转换成指定格式有关。</p>\n<p><strong>Number.prototype.toString()</strong><br><code>Numbe</code>r对象部署了自己的<code>toString</code>方法，用来将一个数值转为字符串形式。</p>\n<pre><code class=\"js\">(10).toString() // &quot;10&quot;\n</code></pre>\n<p><code>toString</code>方法可以接受一个参数，表示输出的进制。如果省略这个参数，默认将数值先转为十进制，再输出字符串；否则，就根据参数指定的进制，将一个数字转化成某个进制的字符串。</p>\n<pre><code class=\"js\">(10).toString(2) // &quot;1010&quot;\n(10).toString(8) // &quot;12&quot;\n(10).toString(16) // &quot;a&quot;\n</code></pre>\n<p>上面代码中，10一定要放在括号里，这样表明后面的点表示调用对象属性。如果不加括号，这个点会被 JavaScript 引擎解释成小数点，从而报错。</p>\n<pre><code class=\"js\">10.toString(2)\n// SyntaxError: Unexpected token ILLEGAL\n</code></pre>\n<p>只要能够让 JavaScript 引擎不混淆小数点和对象的点运算符，各种写法都能用。除了为10加上括号，还可以在<code>10</code>后面加两个点，JavaScript 会把第一个点理解成小数点（即10.0），把第二个点理解成调用对象属性，从而得到正确结果。</p>\n<pre><code class=\"js\">10..toString(2) // &quot;1010&quot;\n\n// 其他方法还包括\n10 .toString(2) // &quot;1010&quot;\n10.0.toString(2) // &quot;1010&quot;\n</code></pre>\n<p>这实际上意味着，可以直接对一个小数使用<code>toString</code>方法。</p>\n<pre><code class=\"js\">10.5.toString() // &quot;10.5&quot;\n10.5.toString(2) // &quot;1010.1&quot;\n10.5.toString(8) // &quot;12.4&quot;\n10.5.toString(16) // &quot;a.8&quot;\n</code></pre>\n<p>通过方括号运算符也可以调用<code>toString</code>方法。</p>\n<pre><code class=\"js\">10[&#39;toString&#39;](2) // &quot;1010&quot;\n</code></pre>\n<p><code>toString</code>方法只能将十进制的数，转为其他进制的字符串。如果要将其他进制的数，转回十进制，需要使用<code>parseInt</code>方法。</p>\n<p><strong>Number.prototype.toFixed()</strong></p>\n<p>toPrecision方法用于将一个数转为指定位数的有效数字。</p>\n<pre><code class=\"js\">(12.34).toPrecision(1) // &quot;1e+1&quot;\n(12.34).toPrecision(2) // &quot;12&quot;\n(12.34).toPrecision(3) // &quot;12.3&quot;\n(12.34).toPrecision(4) // &quot;12.34&quot;\n(12.34).toPrecision(5) // &quot;12.340&quot;\n</code></pre>\n<p><code>toPrecision</code>方法的参数为有效数字的位数，范围是1到21，超出这个范围会抛出<code>RangeError</code>错误。</p>\n<p><code>toPrecision</code>方法用于四舍五入时不太可靠，跟浮点数不是精确储存有关。</p>\n<pre><code class=\"js\">(12.35).toPrecision(3) // &quot;12.3&quot;\n(12.25).toPrecision(3) // &quot;12.3&quot;\n(12.15).toPrecision(3) // &quot;12.2&quot;\n(12.45).toPrecision(3) // &quot;12.4&quot;\n</code></pre>\n<h1 id=\"String-对象\"><a href=\"#String-对象\" class=\"headerlink\" title=\"String 对象\"></a>String 对象</h1><h2 id=\"概述-2\"><a href=\"#概述-2\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>String对象是 JavaScript 原生提供的三个包装对象之一，用来生成字符串对象。</p>\n<pre><code class=\"js\">var s1 = &#39;abc&#39;;\nvar s2 = new String(&#39;abc&#39;);\n\ntypeof s1 // &quot;string&quot;\ntypeof s2 // &quot;object&quot;\n\ns2.valueOf() // &quot;abc&quot;\n</code></pre>\n<p>字符串对象是一个类似数组的对象（很像数组，但不是数组）。</p>\n<pre><code class=\"js\">new String(&#39;abc&#39;)\n// String &#123;0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;, length: 3&#125;\n\n(new String(&#39;abc&#39;))[1] // &quot;b&quot;\n</code></pre>\n<h2 id=\"实例属性\"><a href=\"#实例属性\" class=\"headerlink\" title=\"实例属性\"></a>实例属性</h2><p><strong>String.prototype.length</strong><br>字符串实例的length属性返回字符串的长度。</p>\n<pre><code class=\"js\">&#39;abc&#39;.length // 3\n</code></pre>\n<h2 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法:\"></a>静态方法:</h2><p><strong>String.prototype.match()</strong></p>\n<p><code>match</code>方法用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回<code>null</code>。</p>\n<pre><code class=\"js\">&#39;cat, bat, sat, fat&#39;.match(&#39;at&#39;) // [&quot;at&quot;]\n&#39;cat, bat, sat, fat&#39;.match(&#39;xt&#39;) // null\n</code></pre>\n<p>返回的数组还有<code>index</code>属性和<code>input</code>属性，分别表示匹配字符串开始的位置和原始字符串。</p>\n<pre><code class=\"js\">var matches = &#39;cat, bat, sat, fat&#39;.match(&#39;at&#39;);\nmatches.index // 1\nmatches.input // &quot;cat, bat, sat, fat&quot;\nmatch方法还可以使用正则表达式作为参数。\n</code></pre>\n<p><strong>String.prototype.localeCompare()</strong></p>\n<p><code>localeCompare</code>方法用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。</p>\n<pre><code class=\"js\">&#39;apple&#39;.localeCompare(&#39;banana&#39;) // -1\n&#39;apple&#39;.localeCompare(&#39;apple&#39;) // 0\n</code></pre>\n<p>该方法的最大特点，就是会考虑自然语言的顺序。举例来说，正常情况下，大写的英文字母小于小写字母。</p>\n<pre><code class=\"js\">&#39;B&#39; &gt; &#39;a&#39; // false\n</code></pre>\n<p>上面代码中，字母B小于字母a。因为 JavaScript 采用的是 Unicode 码点比较，B的码点是<code>66</code>，而a的码点是<code>97</code>。</p>\n<p>但是，<code>localeCompare</code>方法会考虑自然语言的排序情况，将B排在a的前面。</p>\n<pre><code class=\"js\">&#39;B&#39;.localeCompare(&#39;a&#39;) // 1\n</code></pre>\n<p>上面代码中，<code>localeCompare</code>方法返回整数1，表示B较大。</p>\n<p><code>localeCompare</code>还可以有第二个参数，指定所使用的语言（默认是英语），然后根据该语言的规则进行比较。</p>\n<pre><code class=\"js\">&#39;ä&#39;.localeCompare(&#39;z&#39;, &#39;de&#39;) // -1\n&#39;ä&#39;.localeCompare(&#39;z&#39;, &#39;sv&#39;) // 1\n</code></pre>\n<p>上面代码中，de表示德语，sv表示瑞典语。德语中，ä小于z，所以返回-1；瑞典语中，ä大于z，所以返回1。</p>\n",
            "tags": [
                "JavaScript",
                "js"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/JavaScript/Variable-recycling/",
            "url": "https://www.yexingcheng.com/JavaScript/Variable-recycling/",
            "title": "JS变量回收机制",
            "date_published": "2022-11-06T16:09:01.945Z",
            "content_html": "<h1 id=\"先看题目\"><a href=\"#先看题目\" class=\"headerlink\" title=\"先看题目:\"></a>先看题目:</h1><ol>\n<li><p>下列代码有几个变量没有被回收？<code>点我查看</code> [3]{.gap}。 {.quiz .fill}</p>\n<blockquote>\n<p>即i和add,局部变量有一个i，因为局部变量被另一个作用域引用，所以局部变量i也不回收</p>\n</blockquote>\n</li>\n</ol>\n<pre><code class=\"js\">var i = 1;\nvar i = 2;\nvar add = function() &#123;\n    var i = 0;\n    return function()\n&#123;\n        i++;\n        console.log(i);\n    &#125;\n&#125;();\nadd();\n</code></pre>\n<h1 id=\"变量回收原则\"><a href=\"#变量回收原则\" class=\"headerlink\" title=\"变量回收原则:\"></a>变量回收原则:</h1><ul>\n<li>全局变量不会回收</li>\n<li>局部变量会被回收,也就是函数一旦运行完后，函数内部的东西都会被销毁</li>\n<li>只要被另外一个作用域引用就不会被回收</li>\n</ul>\n<pre><code class=\"js\">var i = 1;   // 全局变量不会被回收\nvar i = 2;   // 这里重复声明变量i,因此var声明被忽略，只是把i赋值为2\nvar add = function() &#123;  // 全局变量不会被回收\n    var i = 0;  // 局部变量\n    return function() &#123;\n        i++;\n        console.log(i); // 被另一个作用域引用导致不会被回收\n    &#125;\n&#125;();\nadd();\n</code></pre>\n<h1 id=\"JS的垃圾回收机制\"><a href=\"#JS的垃圾回收机制\" class=\"headerlink\" title=\"JS的垃圾回收机制\"></a>JS的垃圾回收机制</h1><h2 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h2><blockquote>\n<p>js中最常见的垃圾回收方式是标记清除<br>标记清除就是从根部出发，看是否能达到某个对象，如果能达到则认定这个对象还被需要，如果无法达到，则释放它。<br>这个过程大致分为三步</p>\n</blockquote>\n<ul>\n<li>垃圾回收器创建roots列表,roots通常是代码中保留引用的全局变量，在js中，我们一般认定全局变量window作为root,也就是所谓的跟部</li>\n<li>从根部出发检查所有的roots,所有的children也会被递归检查，能从root到达的都会被标记为active</li>\n<li>未被标记为active的数据被认定为不再需要，垃圾回收器开始释放他们</li>\n</ul>\n<p>注意:<br>当一个对象<code>零引用</code>时，我们从根部<code>一定无法到达</code>。<br>但反过来，从<code>根部无法到达</code>的<code>不一定</code>是严格意义上的零引用，比如循环引用，所以标记清除要<code>更优于引用计数</code>。</p>\n<h2 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h2><p>工作原理:工作原理：跟踪记录每个值被引用的次数。</p>\n<h2 id=\"什么情况会引起内存泄漏-无法释放已经不使用的内存\"><a href=\"#什么情况会引起内存泄漏-无法释放已经不使用的内存\" class=\"headerlink\" title=\"什么情况会引起内存泄漏(无法释放已经不使用的内存)?\"></a>什么情况会引起内存泄漏(无法释放已经不使用的内存)?</h2><blockquote>\n<p>虽然有垃圾回收机制但是我们编写代码操作不当还是会造成内存泄漏。</p>\n</blockquote>\n<ul>\n<li>1、意外的全局变量引起的内存泄漏。</li>\n</ul>\n<p>原因：全局变量，不会被回收。<br>解决：使用严格模式避免。</p>\n<ul>\n<li>2、闭包引起的内存泄漏</li>\n</ul>\n<p>原因：闭包可以维持函数内局部变量，使其得不到释放。<br>解决：将事件处理函数定义在外部，解除闭包,或者在定义事件处理函数的外部函数中，删除对dom的引用。</p>\n<ul>\n<li>3、没有清理的DOM元素引用</li>\n</ul>\n<p>原因：虽然别的地方删除了，但是对象中还存在对dom的引用<br>解决：手动删除。</p>\n<ul>\n<li>4、被遗忘的定时器或者回调</li>\n</ul>\n<p>原因：定时器中有dom的引用，即使dom删除了，但是定时器还在，所以内存中还是有这个dom。<br>解决：手动删除定时器和dom。</p>\n<ul>\n<li>5、子元素存在引用引起的内存泄漏</li>\n</ul>\n<p>原因：div中的ul li 得到这个div，会间接引用某个得到的li，那么此时因为div间接引用li，即使li被清空，也还是在内存中，并且只要li不被删除，他的父元素都不会被删除。<br>解决：手动删除清空。</p>\n",
            "tags": [
                "JavaScript",
                "js"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/algorithm/toTree/",
            "url": "https://www.yexingcheng.com/algorithm/toTree/",
            "title": "扁平数据结构转tree",
            "date_published": "2022-11-04T02:11:00.788Z",
            "content_html": "<h1 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h1><p>首先来看下题目:打平的数据内容如下：</p>\n<pre><code class=\"javascript\">let arr = [\n    &#123;id: 1, name: &#39;部门1&#39;, pid: 0&#125;,\n    &#123;id: 2, name: &#39;部门2&#39;, pid: 1&#125;,\n    &#123;id: 3, name: &#39;部门3&#39;, pid: 1&#125;,\n    &#123;id: 4, name: &#39;部门4&#39;, pid: 3&#125;,\n    &#123;id: 5, name: &#39;部门5&#39;, pid: 4&#125;,\n]\n</code></pre>\n<p>我们想要的输出结果如下:</p>\n<pre><code class=\"json\">[\n    &#123;\n        &quot;id&quot;: 1,\n        &quot;name&quot;: &quot;部门1&quot;,\n        &quot;pid&quot;: 0,\n        &quot;children&quot;: [\n            &#123;\n                &quot;id&quot;: 2,\n                &quot;name&quot;: &quot;部门2&quot;,\n                &quot;pid&quot;: 1,\n                &quot;children&quot;: []\n            &#125;,\n            &#123;\n                &quot;id&quot;: 3,\n                &quot;name&quot;: &quot;部门3&quot;,\n                &quot;pid&quot;: 1,\n                &quot;children&quot;: [\n                    // 结果 ,,,\n                ]\n            &#125;\n        ]\n    &#125;\n]\n</code></pre>\n<p>首先我们要了解一个概念，衡量一个算法的好坏，主要看算法的时间复杂度和空间复杂度</p>\n<blockquote>\n<p>时间复杂度的计算并不是计算程序具体运行的时间，而是算法执行语句的次数。 随着n的不断增大，时间复杂度不断增大，算法花费时间越多。</p>\n</blockquote>\n<h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><h3 id=\"计算方法\"><a href=\"#计算方法\" class=\"headerlink\" title=\"计算方法\"></a>计算方法</h3><ul>\n<li>选取相对增长最高的项</li>\n<li>最高项系数是都化为1</li>\n<li>若是常数的话用O(1)表示 举个例子：如f(n)&#x3D;3*n^4+3n+300 则 O(n)&#x3D;n^4</li>\n</ul>\n<p>通常我们计算时间复杂度都是计算最坏情况。计算时间复杂度的要注意的几个点</p>\n<ul>\n<li>如果算法的执行时间不随n的增加而增长，假如算法中有上千条语句，执行时间也不过是一个较大的常数。此类算法的时间复杂度是O(1)。 举例如下：代码执行100次，是一个常数，复杂度也是O(1)</li>\n</ul>\n<pre><code class=\"js\">    let x = 1;\n    while (x &lt;100) &#123;\n     x++;\n    &#125;\n</code></pre>\n<ul>\n<li>有多个循环语句时候，算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的方法决定的。举例如下：在下面for循环当中，外层循环每执行一次，内层循环要执行n次，执行次数是根据n所决定的，时间复杂度是O(n^2)。</li>\n</ul>\n<pre><code class=\"js\">  for (i = 0; i &lt; n; i++)&#123;\n         for (j = 0; j &lt; n; j++) &#123;\n             // ...code\n         &#125;\n     &#125;\n</code></pre>\n<ul>\n<li>循环不仅与n有关，还与执行循环判断条件有关。举例如下：在代码中，如果arr[i]不等于1的话，时间复杂度是O(n)。如果arr[i]等于1的话，循环不执行，时间复杂度是O(0)。</li>\n</ul>\n<pre><code class=\"js\">    for(var i = 0; i&lt;n &amp;&amp; arr[i] !=1; i++) &#123;\n    // ...code\n    &#125;\n</code></pre>\n<h2 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h2><blockquote>\n<p>空间复杂度是对一个算法在运行过程中临时占用存储空间的大小。</p>\n</blockquote>\n<h3 id=\"计算方法-1\"><a href=\"#计算方法-1\" class=\"headerlink\" title=\"计算方法\"></a>计算方法</h3><p>1、 忽略常数，用O(1)表示</p>\n<p>2、 递归算法的空间复杂度 &#x3D; （递归深度n）*(每次递归所要的辅助空间)</p>\n<p>计算空间复杂度的简单几点</p>\n<ul>\n<li>仅仅只复制单个变量，空间复杂度为O(1)。 以下例子空间复杂度为O(1)</li>\n</ul>\n<pre><code class=\"js\">   let a = 1;\n   let b = 2;\n   let c = 3;\n   console.log(&#39;输出a,b,c&#39;, a, b, c);\n</code></pre>\n<ul>\n<li>递归实现，调用fun函数，每次都创建一个变量K，调用n次，空间复杂度O(n*1) &#x3D; O(n)</li>\n</ul>\n<pre><code class=\"js\">    function fun(n) &#123;\n       let k = 10;\n       if (n == k) &#123;\n           return n;\n       &#125; else &#123;\n           return fun(++n)\n       &#125;\n    &#125;\n</code></pre>\n<h1 id=\"不考虑性能实现，递归遍历查找\"><a href=\"#不考虑性能实现，递归遍历查找\" class=\"headerlink\" title=\"不考虑性能实现，递归遍历查找\"></a>不考虑性能实现，递归遍历查找</h1>",
            "tags": [
                "算法",
                "js",
                "面试",
                "算法"
            ]
        }
    ]
}