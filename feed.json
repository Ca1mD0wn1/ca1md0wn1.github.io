{
    "version": "https://jsonfeed.org/version/1",
    "title": "永不陨落的星辰",
    "subtitle": "",
    "icon": "https://www.yexingcheng.com/images/favicon.ico",
    "description": "如因为网络原因,如果有文章加载不出来的情况，请访问(https://beize_admin.gitee.io)",
    "home_page_url": "https://www.yexingcheng.com",
    "items": [
        {
            "id": "https://www.yexingcheng.com/algorithm/DeepClone/",
            "url": "https://www.yexingcheng.com/algorithm/DeepClone/",
            "title": "js实现深拷贝",
            "date_published": "2022-12-02T03:22:10.233Z",
            "content_html": "<h1 id=\"要求\"><a class=\"anchor\" href=\"#要求\">#</a> 要求：</h1>\n<p>1、请实现一个对象深拷贝的方法，要求支持全部 is 基本数据类型提示: typeof 用来检测变量的数据类型，返回值一共有六个<br>\n 'number'<br>\n'string'&quot;boolean'<br>\n'object'<br>\n'undefined'<br>\n'function'</p>\n<p>核心思路：<strong>递归</strong></p>\n",
            "tags": [
                "算法",
                "js",
                "面试",
                "算法"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E9%87%91%E5%8D%B0%E5%AE%A2%E7%94%B5%E5%AD%90/",
            "url": "https://www.yexingcheng.com/interview-questions/%E9%87%91%E5%8D%B0%E5%AE%A2%E7%94%B5%E5%AD%90/",
            "title": "金印客电子面试题",
            "date_published": "2022-11-30T08:36:58.225Z",
            "content_html": "<h2 id=\"1上机做一个前台的详情页页面\"><a class=\"anchor\" href=\"#1上机做一个前台的详情页页面\">#</a> 1. 上机做一个前台的详情页页面</h2>\n<h2 id=\"2介绍项目\"><a class=\"anchor\" href=\"#2介绍项目\">#</a> 2. 介绍项目</h2>\n<h2 id=\"3对vue3有哪些了解\"><a class=\"anchor\" href=\"#3对vue3有哪些了解\">#</a> 3. 对 Vue3 有哪些了解</h2>\n<h2 id=\"4layui有没有用过\"><a class=\"anchor\" href=\"#4layui有没有用过\">#</a> 4.layUI 有没有用过</h2>\n<h2 id=\"5单独负责一个网站或者app能全权负责吗\"><a class=\"anchor\" href=\"#5单独负责一个网站或者app能全权负责吗\">#</a> 5. 单独负责一个网站或者 APP 能全权负责吗</h2>\n<h2 id=\"6跨域是什么咋解决的\"><a class=\"anchor\" href=\"#6跨域是什么咋解决的\">#</a> 6. 跨域是什么，咋解决的</h2>\n<h2 id=\"7jsonp和cors有啥区别\"><a class=\"anchor\" href=\"#7jsonp和cors有啥区别\">#</a> 7.jsonp 和 cors 有啥区别</h2>\n<h2 id=\"8nodejs做过什么\"><a class=\"anchor\" href=\"#8nodejs做过什么\">#</a> 8.nodeJS 做过什么</h2>\n<h2 id=\"9文件资源压缩有没有了解\"><a class=\"anchor\" href=\"#9文件资源压缩有没有了解\">#</a> 9. 文件资源压缩有没有了解</h2>\n<h2 id=\"10小程序做过吗用过uniapp没有\"><a class=\"anchor\" href=\"#10小程序做过吗用过uniapp没有\">#</a> 10. 小程序做过吗，用过 uniapp 没有</h2>\n<h2 id=\"11你了解我们公司吗\"><a class=\"anchor\" href=\"#11你了解我们公司吗\">#</a> 11. 你了解我们公司吗</h2>\n",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E8%95%BE%E8%93%9D%E7%A7%91%E6%8A%80/",
            "url": "https://www.yexingcheng.com/interview-questions/%E8%95%BE%E8%93%9D%E7%A7%91%E6%8A%80/",
            "title": "蕾蓝科技面试题",
            "date_published": "2022-11-29T08:45:01.277Z",
            "content_html": "<h2 id=\"1自我介绍\"><a class=\"anchor\" href=\"#1自我介绍\">#</a> 1. 自我介绍</h2>\n<h2 id=\"2介绍一个你的项目\"><a class=\"anchor\" href=\"#2介绍一个你的项目\">#</a> 2. 介绍一个你的项目</h2>\n<h2 id=\"3原生js中的闭包闭包中的变量怎么销毁怎么释放变量使用闭包的场景\"><a class=\"anchor\" href=\"#3原生js中的闭包闭包中的变量怎么销毁怎么释放变量使用闭包的场景\">#</a> 3. 原生 JS 中的闭包，闭包中的变量怎么销毁，怎么释放变量，使用闭包的场景</h2>\n<h2 id=\"4有没有用原生js写项目\"><a class=\"anchor\" href=\"#4有没有用原生js写项目\">#</a> 4. 有没有用原生 js 写项目</h2>\n<h2 id=\"5作用域链是什么\"><a class=\"anchor\" href=\"#5作用域链是什么\">#</a> 5. 作用域链是什么</h2>\n<h2 id=\"6es6增加哪些特性箭头函数和普通函数有啥区别\"><a class=\"anchor\" href=\"#6es6增加哪些特性箭头函数和普通函数有啥区别\">#</a> 6.es6 增加哪些特性，箭头函数和普通函数有啥区别</h2>\n<h2 id=\"7callapplybind\"><a class=\"anchor\" href=\"#7callapplybind\">#</a> 7.call，apply,bind</h2>\n<h2 id=\"8async与awaitawait能不能单独使用\"><a class=\"anchor\" href=\"#8async与awaitawait能不能单独使用\">#</a> 8.async 与 await，await 能不能单独使用</h2>\n<h2 id=\"9promise用法\"><a class=\"anchor\" href=\"#9promise用法\">#</a> 9.promise 用法</h2>\n<h2 id=\"10vue双向绑定原理\"><a class=\"anchor\" href=\"#10vue双向绑定原理\">#</a> 10.Vue 双向绑定原理</h2>\n<h2 id=\"11vuex有几个特性\"><a class=\"anchor\" href=\"#11vuex有几个特性\">#</a> 11，vuex 有几个特性</h2>\n<h2 id=\"12keepalive怎么缓存的存到哪里了\"><a class=\"anchor\" href=\"#12keepalive怎么缓存的存到哪里了\">#</a> 12.keepalive 怎么缓存的，存到哪里了</h2>\n<h2 id=\"13组件通信了解吗\"><a class=\"anchor\" href=\"#13组件通信了解吗\">#</a> 13. 组件通信了解吗</h2>\n<h2 id=\"14vue首页加载慢怎么解决\"><a class=\"anchor\" href=\"#14vue首页加载慢怎么解决\">#</a> 14.Vue 首页加载慢怎么解决</h2>\n<h2 id=\"15前端seo怎么理解的有啥方法\"><a class=\"anchor\" href=\"#15前端seo怎么理解的有啥方法\">#</a> 15. 前端 SEO 怎么理解的，有啥方法</h2>\n<h2 id=\"16fetch会用吗\"><a class=\"anchor\" href=\"#16fetch会用吗\">#</a> 16.fetch 会用吗</h2>\n",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E7%9B%92%E9%A9%AC%E7%A7%91%E6%8A%80/",
            "url": "https://www.yexingcheng.com/interview-questions/%E7%9B%92%E9%A9%AC%E7%A7%91%E6%8A%80/",
            "title": "盒马科技面试题",
            "date_published": "2022-11-29T08:43:41.617Z",
            "content_html": "<h2 id=\"1对递归的理解和注意事项\"><a class=\"anchor\" href=\"#1对递归的理解和注意事项\">#</a> 1. 对递归的理解和注意事项</h2>\n<h2 id=\"2jsx怎么转成js的如果createelement第一个参数传的是一个html传统标签会怎么样原生html标签和组件标签怎么分辨\"><a class=\"anchor\" href=\"#2jsx怎么转成js的如果createelement第一个参数传的是一个html传统标签会怎么样原生html标签和组件标签怎么分辨\">#</a> 2.jsx 怎么转成 js 的，如果 createElement 第一个参数传的是一个 html 传统标签，会怎么样。原生 html 标签和组件标签怎么分辨</h2>\n<h2 id=\"3vuex如果要把state保存在本地要在哪里写如果有10个函数修改状态是要在每个函数里面都写上保存到本地的代码吗\"><a class=\"anchor\" href=\"#3vuex如果要把state保存在本地要在哪里写如果有10个函数修改状态是要在每个函数里面都写上保存到本地的代码吗\">#</a> 3.vuex 如果要把 state 保存在本地，要在哪里写。如果有 10 个函数修改状态是要在每个函数里面都写上保存到本地的代码吗</h2>\n<h2 id=\"4对diff算法的理解\"><a class=\"anchor\" href=\"#4对diff算法的理解\">#</a> 4. 对 diff 算法的理解</h2>\n<h2 id=\"5你开发项目中遇到的bug为什么严格模式下函数组件会调用两次流程是什么\"><a class=\"anchor\" href=\"#5你开发项目中遇到的bug为什么严格模式下函数组件会调用两次流程是什么\">#</a> 5. 你开发项目中遇到的 bug? 为什么严格模式下函数组件会调用两次，流程是什么</h2>\n",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E8%AE%AF%E9%A3%9E%E7%A7%91%E6%8A%80/",
            "url": "https://www.yexingcheng.com/interview-questions/%E8%AE%AF%E9%A3%9E%E7%A7%91%E6%8A%80/",
            "title": "讯飞科技面试题",
            "date_published": "2022-11-28T01:55:19.498Z",
            "content_html": "<h2 id=\"1css中你知道的选择器以及他们的执行顺序\"><a class=\"anchor\" href=\"#1css中你知道的选择器以及他们的执行顺序\">#</a> 1.css 中你知道的选择器，以及他们的执行顺序</h2>\n<h2 id=\"2css中的常用单位\"><a class=\"anchor\" href=\"#2css中的常用单位\">#</a> 2.css 中的常用单位</h2>\n<h2 id=\"3active伪类用过吗-伪类选择器\"><a class=\"anchor\" href=\"#3active伪类用过吗-伪类选择器\">#</a> 3.:active 伪类用过吗 （伪类选择器）</h2>\n<h2 id=\"4es6新增特性\"><a class=\"anchor\" href=\"#4es6新增特性\">#</a> 4.es6 新增特性</h2>\n<h2 id=\"5循坏计时器设置十秒执行一次把浏览器放到后台会有什么影响对执行时间有啥影响\"><a class=\"anchor\" href=\"#5循坏计时器设置十秒执行一次把浏览器放到后台会有什么影响对执行时间有啥影响\">#</a> 5. 循坏计时器设置十秒执行一次，把浏览器放到后台，会有什么影响（对执行时间有啥影响）</h2>\n<h2 id=\"6cookie-localstorage和sessionstorage的区别\"><a class=\"anchor\" href=\"#6cookie-localstorage和sessionstorage的区别\">#</a> 6.cookie 、localstorage 和 sessionstorage 的区别</h2>\n<h2 id=\"7两个div嵌套都有一个点击事件怎么阻止冒泡\"><a class=\"anchor\" href=\"#7两个div嵌套都有一个点击事件怎么阻止冒泡\">#</a> 7. 两个 div 嵌套，都有一个点击事件，怎么阻止冒泡</h2>\n<h2 id=\"8跨域\"><a class=\"anchor\" href=\"#8跨域\">#</a> 8. 跨域</h2>\n<h2 id=\"9你对next-tick的理解有哪些\"><a class=\"anchor\" href=\"#9你对next-tick的理解有哪些\">#</a> 9. 你对 $next Tick 的理解有哪些</h2>\n<h2 id=\"10vue2和vue3的原理\"><a class=\"anchor\" href=\"#10vue2和vue3的原理\">#</a> 10.vue2 和 vue3 的原理</h2>\n<h2 id=\"11对websocket的理解\"><a class=\"anchor\" href=\"#11对websocket的理解\">#</a> 11. 对 webSocket 的理解</h2>\n<h2 id=\"12在项目中封装过哪些函数\"><a class=\"anchor\" href=\"#12在项目中封装过哪些函数\">#</a> 12. 在项目中封装过哪些函数</h2>\n",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E6%B5%99%E6%B1%9F%E4%BA%A4%E5%B7%A5/",
            "url": "https://www.yexingcheng.com/interview-questions/%E6%B5%99%E6%B1%9F%E4%BA%A4%E5%B7%A5/",
            "title": "浙江交工面试题",
            "date_published": "2022-11-28T01:54:42.665Z",
            "content_html": "<h2 id=\"1-项目亮点\"><a class=\"anchor\" href=\"#1-项目亮点\">#</a> 1、项目亮点</h2>\n<h2 id=\"2-封装组件的业务场景如果简历上写过封装组件的\"><a class=\"anchor\" href=\"#2-封装组件的业务场景如果简历上写过封装组件的\">#</a> 2、封装组件的业务场景（如果简历上写过封装组件的）</h2>\n<h2 id=\"3-react的axios封装\"><a class=\"anchor\" href=\"#3-react的axios封装\">#</a> 3、React 的 Axios 封装</h2>\n<h2 id=\"4-es6数组新增方法\"><a class=\"anchor\" href=\"#4-es6数组新增方法\">#</a> 4、es6 数组新增方法</h2>\n<h2 id=\"5-reduce数组去重\"><a class=\"anchor\" href=\"#5-reduce数组去重\">#</a> 5、reduce 数组去重</h2>\n<h2 id=\"6-promise-asyncawait\"><a class=\"anchor\" href=\"#6-promise-asyncawait\">#</a> 6、Promise ,async,await</h2>\n<h2 id=\"7-在react中如何去获取地址栏后面的参数用自己封装好的pathname已经去过重了现在不希望去重\"><a class=\"anchor\" href=\"#7-在react中如何去获取地址栏后面的参数用自己封装好的pathname已经去过重了现在不希望去重\">#</a> 7、在 react 中，如何去获取地址栏？后面的参数（用自己封装好的 pathname，已经去过重了），现在不希望去重</h2>\n<h2 id=\"8-在react中父组件如何调用子组件forward结合useimperativehandle\"><a class=\"anchor\" href=\"#8-在react中父组件如何调用子组件forward结合useimperativehandle\">#</a> 8、在 react 中，父组件如何调用子组件，forward 结合 useImperativehandle</h2>\n<h2 id=\"9-react如何捕获异常\"><a class=\"anchor\" href=\"#9-react如何捕获异常\">#</a> 9、react 如何捕获异常</h2>\n<h2 id=\"10-try-catch如何封装\"><a class=\"anchor\" href=\"#10-try-catch如何封装\">#</a> 10、try ,catch 如何封装</h2>\n",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E8%A1%8C%E7%9F%A5%E7%BD%91%E7%BB%9C/",
            "url": "https://www.yexingcheng.com/interview-questions/%E8%A1%8C%E7%9F%A5%E7%BD%91%E7%BB%9C/",
            "title": "行知网络面试题",
            "date_published": "2022-11-28T01:54:02.312Z",
            "content_html": "<h1 id=\"行知网络-技术面\"><a class=\"anchor\" href=\"#行知网络-技术面\">#</a> 行知网络 - 技术面</h1>\n<h2 id=\"1react类组件和函数组件区别\"><a class=\"anchor\" href=\"#1react类组件和函数组件区别\">#</a> 1.react 类组件和函数组件区别</h2>\n<h2 id=\"2react的useeffect副作用如何清除\"><a class=\"anchor\" href=\"#2react的useeffect副作用如何清除\">#</a> 2.react 的 Useeffect 副作用如何清除</h2>\n<h2 id=\"3react的axios封装\"><a class=\"anchor\" href=\"#3react的axios封装\">#</a> 3.React 的 Axios 封装</h2>\n<h2 id=\"4vue的自定义指令\"><a class=\"anchor\" href=\"#4vue的自定义指令\">#</a> 4.Vue 的自定义指令</h2>\n<h2 id=\"5vuex五个参数\"><a class=\"anchor\" href=\"#5vuex五个参数\">#</a> 5.Vuex 五个参数</h2>\n<h2 id=\"6说一下你react常用的生命周期\"><a class=\"anchor\" href=\"#6说一下你react常用的生命周期\">#</a> 6. 说一下你 react 常用的生命周期</h2>\n<h2 id=\"7谈一下你对ts的理解\"><a class=\"anchor\" href=\"#7谈一下你对ts的理解\">#</a> 7. 谈一下你对 ts 的理解</h2>\n<h2 id=\"8ts定义一个对象类型怎们去定义\"><a class=\"anchor\" href=\"#8ts定义一个对象类型怎们去定义\">#</a> 8.ts 定义一个对象类型，怎们去定义</h2>\n<h2 id=\"9对uiapp的理解\"><a class=\"anchor\" href=\"#9对uiapp的理解\">#</a> 9. 对 uiapp 的理解</h2>\n<h2 id=\"10umi的理解\"><a class=\"anchor\" href=\"#10umi的理解\">#</a> 10.umi 的理解</h2>\n<h1 id=\"行知网络-经理面\"><a class=\"anchor\" href=\"#行知网络-经理面\">#</a> 行知网络 - 经理面</h1>\n<h2 id=\"1怎样和后端对接口\"><a class=\"anchor\" href=\"#1怎样和后端对接口\">#</a> 1. 怎样和后端对接口</h2>\n<h2 id=\"2怎样和ui对原型\"><a class=\"anchor\" href=\"#2怎样和ui对原型\">#</a> 2. 怎样和 ui 对原型</h2>\n<h2 id=\"3你项目中遇到的难点\"><a class=\"anchor\" href=\"#3你项目中遇到的难点\">#</a> 3. 你项目中遇到的难点</h2>\n<h2 id=\"4你对每一个项目主要负责的功能和收获\"><a class=\"anchor\" href=\"#4你对每一个项目主要负责的功能和收获\">#</a> 4. 你对每一个项目主要负责的功能和收获</h2>\n<h2 id=\"5遇到问题你一般怎么解决\"><a class=\"anchor\" href=\"#5遇到问题你一般怎么解决\">#</a> 5. 遇到问题，你一般怎么解决</h2>\n<h2 id=\"6你在流媒体项目中遇到的难点以图片和视频为例去讲\"><a class=\"anchor\" href=\"#6你在流媒体项目中遇到的难点以图片和视频为例去讲\">#</a> 6. 你在流媒体项目中遇到的难点，以图片和视频为例去讲</h2>\n<h2 id=\"7后端定义的接口有什么规范\"><a class=\"anchor\" href=\"#7后端定义的接口有什么规范\">#</a> 7. 后端定义的接口，有什么规范</h2>\n<h2 id=\"8你对加班怎们看\"><a class=\"anchor\" href=\"#8你对加班怎们看\">#</a> 8. 你对加班怎们看</h2>\n<h2 id=\"9谈一下你印象最深的项目为什么\"><a class=\"anchor\" href=\"#9谈一下你印象最深的项目为什么\">#</a> 9. 谈一下你印象最深的项目，为什么</h2>\n",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E4%B8%AD%E7%A7%91%E4%BC%98%E8%AE%AF/",
            "url": "https://www.yexingcheng.com/interview-questions/%E4%B8%AD%E7%A7%91%E4%BC%98%E8%AE%AF/",
            "title": "中科优讯面试题",
            "date_published": "2022-11-28T01:52:11.765Z",
            "content_html": "<h2 id=\"1自我介绍\"><a class=\"anchor\" href=\"#1自我介绍\">#</a> 1. 自我介绍</h2>\n<h2 id=\"2cookie-localstorage和sessionstorage\"><a class=\"anchor\" href=\"#2cookie-localstorage和sessionstorage\">#</a> 2.cookie localstorage 和 sessionstorage</h2>\n<h2 id=\"3跨域请求\"><a class=\"anchor\" href=\"#3跨域请求\">#</a> 3. 跨域请求</h2>\n<h2 id=\"4js原型链的理解\"><a class=\"anchor\" href=\"#4js原型链的理解\">#</a> 4.js 原型链的理解</h2>\n<h2 id=\"5盒模型\"><a class=\"anchor\" href=\"#5盒模型\">#</a> 5. 盒模型</h2>\n<h2 id=\"6es6新增\"><a class=\"anchor\" href=\"#6es6新增\">#</a> 6.Es6 新增</h2>\n<h2 id=\"7怎么实现居中\"><a class=\"anchor\" href=\"#7怎么实现居中\">#</a> 7. 怎么实现居中</h2>\n<h2 id=\"8在项目登录怎么做的\"><a class=\"anchor\" href=\"#8在项目登录怎么做的\">#</a> 8. 在项目登录怎么做的</h2>\n<h2 id=\"9在项目中登录白名单怎么实现\"><a class=\"anchor\" href=\"#9在项目中登录白名单怎么实现\">#</a> 9. 在项目中登录白名单怎么实现</h2>\n<h2 id=\"10订单中不同的操作怎么实现分类弹窗\"><a class=\"anchor\" href=\"#10订单中不同的操作怎么实现分类弹窗\">#</a> 10. 订单中不同的操作怎么实现分类弹窗</h2>\n<h2 id=\"11vue中vuex的使用\"><a class=\"anchor\" href=\"#11vue中vuex的使用\">#</a> 11.Vue 中 Vuex 的使用</h2>\n<h2 id=\"12vue中的传值\"><a class=\"anchor\" href=\"#12vue中的传值\">#</a> 12.Vue 中的传值</h2>\n<h2 id=\"13怎么获取路由的传值\"><a class=\"anchor\" href=\"#13怎么获取路由的传值\">#</a> 13. 怎么获取路由的传值</h2>\n<h2 id=\"14mvvm的理解\"><a class=\"anchor\" href=\"#14mvvm的理解\">#</a> 14.MVVM 的理解</h2>\n",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E6%88%90%E9%BA%A6%E7%A7%91%E6%8A%80/",
            "url": "https://www.yexingcheng.com/interview-questions/%E6%88%90%E9%BA%A6%E7%A7%91%E6%8A%80/",
            "title": "成麦科技面试题",
            "date_published": "2022-11-28T01:51:20.379Z",
            "content_html": "<h2 id=\"1react和vue的区别尽可能多的说\"><a class=\"anchor\" href=\"#1react和vue的区别尽可能多的说\">#</a> 1.react 和 vue 的区别，尽可能多的说。</h2>\n<h3 id=\"框架简介\"><a class=\"anchor\" href=\"#框架简介\">#</a> 框架简介：</h3>\n<blockquote>\n<p>React 主张是函数式编程的理念， 实现了前端界面的高性能高效率开发，react 很擅长处理组件化的页面。React 的官方网站提到了 “学习一次，随处写作” 这个关键功能，可以使用 React 框架在 JavaScript 中构建移动应用程序。在 React 中，所有的组件的渲染功能都依靠 JSX，它是 JavaScript 的语法扩展，它在创建 UI 组件和调试时非常简单有用。</p>\n<p>Vue 是渐进式 JavaScript 框架。“渐进式框架” 和 “自底向上增量开发的设计” 是 Vue 开发的两个概念。Vue 可以在任意其他类型的项目中使用，使用成本较低，更灵活，主张较弱，在 Vue 的项目中也可以轻松融汇其他的技术来开发。特点：易用（使用成本低），灵活（生态系统完善，适用于任何规模的项目），高效（体积小，优化好，性能好）。</p>\n</blockquote>\n<h3 id=\"框架共同点\"><a class=\"anchor\" href=\"#框架共同点\">#</a> 框架共同点：</h3>\n<blockquote>\n<p>①都使用虚拟 dom。<br>\n②提供了响应式和组件化的视图组件。<br>\n③把注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。(vue-router、vuex、react-router、redux 等等)</p>\n</blockquote>\n<h3 id=\"各自的优势\"><a class=\"anchor\" href=\"#各自的优势\">#</a> 各自的优势：</h3>\n<blockquote>\n<p>React</p>\n<p>①灵活性和响应性：它提供最大的灵活性和响应能力。<br>\n②丰富的 JavaScript 库：来自世界各地的贡献者正在努力添加更多功能。<br>\n③可扩展性：由于其灵活的结构和可扩展性，React 已被证明对大型应用程序更好。<br>\n④不断发展： React 得到了 Facebook 专业开发人员的支持，他们不断寻找改进方法。<br>\n⑤web 或移动平台： React 提供 React Native 平台，可通过相同的 React 组件模型为 iOS 和 Android 开发本机呈现的应用程序。</p>\n</blockquote>\n<blockquote>\n<p>Vue</p>\n<p>①易于使用： Vue.js 包含基于 HTML 的标准模板，可以更轻松地使用和修改现有应用程序。<br>\n②更顺畅的集成：无论是单页应用程序还是复杂的 Web 界面，Vue.js 都可以更平滑地集成更小的部件，而不会对整个系统产生任何影响。<br>\n③更好的性能，更小的尺寸：它占用更少的空间，并且往往比其他框架提供更好的性能。<br>\n④精心编写的文档：通过详细的文档提供简单的学习曲线，无需额外的知识；HTML 和 JavaScript 将完成工作。<br>\n⑤适应性：整体声音设计和架构使其成为一种流行的 JavaScript 框架。它提供无障碍的迁移，简单有效的结构和可重用的模板。</p>\n</blockquote>\n<h3 id=\"两者的区别\"><a class=\"anchor\" href=\"#两者的区别\">#</a> 两者的区别：</h3>\n<h4 id=\"1-数据是否可变\"><a class=\"anchor\" href=\"#1-数据是否可变\">#</a> 1、数据是否可变：</h4>\n<blockquote>\n<p>React：整体是函数式的思想，在 react 中，是单向数据流，推崇结合 immutable 来实现数据不可变。<br>\nVue：的思想是响应式的，也就是基于是数据可变的，通过对每一个属性建立 Watcher 来监听，当属性变化的时候，响应式的更新对应的虚拟 dom。</p>\n</blockquote>\n<h4 id=\"2-编译写法\"><a class=\"anchor\" href=\"#2-编译写法\">#</a> 2、编译 &amp; 写法</h4>\n<blockquote>\n<p>React：思路是 all in js，通过 js 来生成 html，所以设计了 jsx，还有通过 js 来操作 css，社区的 styled-component、jss 等。<br>\nVue：把 html，css，js 组合到一起，用各自的处理方式，Vue 有单文件组件，可以把 html、css、js 写到一个文件中，html 提供了模板引擎来处理。</p>\n</blockquote>\n<h4 id=\"3-重新渲染和优化\"><a class=\"anchor\" href=\"#3-重新渲染和优化\">#</a> 3、重新渲染和优化</h4>\n<blockquote>\n<p>当你比较 React 和 Vue 时，速度不能成为决定哪个更好的重要比较因素。在性能方面，让我们考虑重新渲染功能。当组件的状态发生变化时，React 的机制会触发整个组件树的重新呈现。您可能需要使用额外的属性来避免不必要地重新渲染子组件。虽然 Vue 的重新渲染功能是开箱即用的，但 Vue 提供了优化的重新渲染，其中系统在渲染过程中跟踪依赖关系并相应地工作。重新渲染是 Vue 最显着的特征，也使其成为全世界开发人员广泛接受的框架。</p>\n</blockquote>\n<h4 id=\"4-类式的组件写法还是声明式的写法\"><a class=\"anchor\" href=\"#4-类式的组件写法还是声明式的写法\">#</a> 4、类式的组件写法，还是声明式的写法</h4>\n<blockquote>\n<p>react 是类式的写法，api 很少，而 Vue 是声明式的写法，通过传入各种 options，api 和参数都很多。所以 react 结合 typescript 更容易一起写，Vue 稍微复杂。</p>\n</blockquote>\n<h4 id=\"5-路由和状态管理解决方案\"><a class=\"anchor\" href=\"#5-路由和状态管理解决方案\">#</a> 5、路由和状态管理解决方案</h4>\n<blockquote>\n<p>在像 React 和 Vue 这样的基于组件的框架中，当您开始扩展应用程序时，需要更加关注状态管理和数据流。这是因为有许多组件相互交互并共享数据。在这种情况下，React 提供了一种称为 Flux / Redux 架构的创新解决方案，它代表单向数据流，是著名 MVC 架构的替代方案。现在，如果我们考虑 Vue.js 框架，就会有一个名为 Vuex 的更高级架构，它集成到 Vue 中并提供无与伦比的体验。</p>\n</blockquote>\n<h4 id=\"6-构建工具\"><a class=\"anchor\" href=\"#6-构建工具\">#</a> 6、构建工具</h4>\n<blockquote>\n<p>React 和 Vue 都有一个非常好的开发环境。只需很少或没有配置，就可以创建应用程序，能够使用最新的实践和模板。在 React 中，有一个 Create React App（CRA），在 Vue 中，它是 vue-cli。这两种引导工具都倾向于提供舒适灵活的开发环境，并提供开始编码的出色起点。</p>\n</blockquote>\n<h2 id=\"2html常用标签\"><a class=\"anchor\" href=\"#2html常用标签\">#</a> 2.html 常用标签</h2>\n<blockquote>\n<p>a,p,div,span,img,header,main,footer,ul,i,li,ol</p>\n</blockquote>\n<h2 id=\"3parseint的理解\"><a class=\"anchor\" href=\"#3parseint的理解\">#</a> 3.parseInt 的理解</h2>\n<blockquote>\n<p><strong>parseInt(*string*, *radix*)</strong> 解析一个字符串并返回指定基数的十进制整数， <code>radix</code>  是 2-36 之间的整数，表示被解析字符串的基数。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> radix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"参数\"><a class=\"anchor\" href=\"#参数\">#</a> 参数</h3>\n<ul>\n<li>\n<p><code>string</code></p>\n<p>要被解析的值。如果参数不是一个字符串，则将其转换为字符串 (使用 <a href=\"https://www.ecma-international.org/ecma-262/6.0/#sec-tostring\"> <code>ToString</code> </a> 抽象操作)。字符串开头的空白符将会被忽略。</p>\n</li>\n<li>\n<p><code>radix</code> _ 可选_</p>\n<p>从  <code>2</code>  到  <code>36</code>  的整数，表示进制的基数。例如指定  <code>16</code>  表示被解析值是十六进制数。如果超出这个范围，将返回  <code>NaN</code> 。假如指定  <code>0</code>  或未指定，基数将会根据字符串的值进行推算。注意，推算的结果不会永远是默认值  <code>10</code> ！文章后面的描述解释了当参数  <code>radix</code>  不传时该函数的具体行为。</p>\n</li>\n</ul>\n<h3 id=\"返回值\"><a class=\"anchor\" href=\"#返回值\">#</a> 返回值</h3>\n<p>从给定的字符串中解析出的一个整数。</p>\n<p>或者 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\"> <code>NaN</code> </a>，当</p>\n<ul>\n<li><code>radix</code>  小于  <code>2</code>  或大于  <code>36</code> ，或</li>\n<li>第一个非空格字符不能转换为数字。</li>\n</ul>\n</blockquote>\n<h2 id=\"4数组循环常用的方法\"><a class=\"anchor\" href=\"#4数组循环常用的方法\">#</a> 4. 数组循环，常用的方法</h2>\n<blockquote>\n<p>for in</p>\n<p>for of</p>\n<p>forEach()</p>\n</blockquote>\n<h2 id=\"5map循环三个参数map循环返回的值是新值还是旧值map的实际场景\"><a class=\"anchor\" href=\"#5map循环三个参数map循环返回的值是新值还是旧值map的实际场景\">#</a> 5.map 循环三个参数，map 循环返回的值是新值还是旧值，map 的实际场景</h2>\n<blockquote>\n<p><strong> <code>map()</code> </strong> 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。</p>\n<h3 id=\"参数-2\"><a class=\"anchor\" href=\"#参数-2\">#</a> 参数</h3>\n<ul>\n<li><code>callbackFn</code></li>\n</ul>\n<p>生成新数组元素的函数，使用三个参数： <code>currentValue``callbackFn</code>  数组中正在处理的当前元素。 <code>index``callbackFn</code>  数组中正在处理的当前元素的索引。 <code>array``map</code>  方法调用的数组。</p>\n<ul>\n<li><code>thisArg</code>  可选</li>\n</ul>\n<p>执行  <code>callbackFn</code>  函数时被用作  <code>this</code>  的值。</p>\n<h3 id=\"返回值-2\"><a class=\"anchor\" href=\"#返回值-2\">#</a> 返回值</h3>\n<p>一个新数组，每个元素都是回调函数的返回值</p>\n</blockquote>\n<h2 id=\"6react的生命周期\"><a class=\"anchor\" href=\"#6react的生命周期\">#</a> 6.react 的生命周期</h2>\n<blockquote>\n<h2 id=\"挂载\"><a class=\"anchor\" href=\"#挂载\">#</a> 挂载</h2>\n<p>当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：</p>\n<ul>\n<li><code>constructor()</code> : 在 React 组件挂载之前，会调用它的构造函数。</li>\n<li><code>getDerivedStateFromProps()</code> : 在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。</li>\n<li><code>render()</code> : render () 方法是 class 组件中唯一必须实现的方法。</li>\n<li><code>componentDidMount()</code> : 在组件挂载后（插入 DOM 树中）立即调用。</li>\n</ul>\n<p>render () 方法是 class 组件中唯一必须实现的方法，其他方法可以根据自己的需要来实现。</p>\n<h2 id=\"更新\"><a class=\"anchor\" href=\"#更新\">#</a> 更新</h2>\n<p>每当组件的 state 或 props 发生变化时，组件就会更新。</p>\n<p>当组件的 props 或 state 发生变化时会触发更新。组件更新的生命周期调用顺序如下：</p>\n<ul>\n<li><code>getDerivedStateFromProps()</code> : 在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。根据 shouldComponentUpdate () 的返回值，判断 React 组件的输出是否受当前 state 或 props 更改的影响。</li>\n<li><code>shouldComponentUpdate()</code> : 当 props 或 state 发生变化时，shouldComponentUpdate () 会在渲染执行之前被调用。</li>\n<li><code>render()</code> : render () 方法是 class 组件中唯一必须实现的方法。</li>\n<li><code>getSnapshotBeforeUpdate()</code> : 在最近一次渲染输出（提交到 DOM 节点）之前调用。</li>\n<li><code>componentDidUpdate()</code> : 在更新后会被立即调用。</li>\n</ul>\n<p>render () 方法是 class 组件中唯一必须实现的方法，其他方法可以根据自己的需要来实现。</p>\n<h2 id=\"卸载\"><a class=\"anchor\" href=\"#卸载\">#</a> 卸载</h2>\n<p>当组件从 DOM 中移除时会调用如下方法：</p>\n<ul>\n<li><code>componentWillUnmount()</code> : 在组件卸载及销毁之前直接调用。</li>\n</ul>\n</blockquote>\n<h2 id=\"7react的性能优化怎么做\"><a class=\"anchor\" href=\"#7react的性能优化怎么做\">#</a> 7.react 的性能优化怎么做</h2>\n<h2 id=\"8react的组件传值\"><a class=\"anchor\" href=\"#8react的组件传值\">#</a> 8.react 的组件传值</h2>\n<h2 id=\"9setstate是异步还是同步的怎样获取同步数据\"><a class=\"anchor\" href=\"#9setstate是异步还是同步的怎样获取同步数据\">#</a> 9.setState 是异步还是同步的，怎样获取同步数据</h2>\n<h2 id=\"10谈一下你对redux的理解\"><a class=\"anchor\" href=\"#10谈一下你对redux的理解\">#</a> 10. 谈一下你对 redux 的理解</h2>\n",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E7%A5%9E%E8%88%9F%E6%95%B0%E7%A0%81/",
            "url": "https://www.yexingcheng.com/interview-questions/%E7%A5%9E%E8%88%9F%E6%95%B0%E7%A0%81/",
            "title": "神舟数码面试题",
            "date_published": "2022-11-28T01:50:42.834Z",
            "content_html": "<h2 id=\"1说说你对vuex的理解mutations和actions有什么区别你的项目中有哪些数据保存在vuex当中\"><a class=\"anchor\" href=\"#1说说你对vuex的理解mutations和actions有什么区别你的项目中有哪些数据保存在vuex当中\">#</a> 1. 说说你对 vuex 的理解，mutations 和 actions 有什么区别，你的项目中有哪些数据保存在 vuex 当中？</h2>\n<h2 id=\"2vue项目首页加载做过哪些优化\"><a class=\"anchor\" href=\"#2vue项目首页加载做过哪些优化\">#</a> 2.vue 项目首页加载做过哪些优化？</h2>\n<h2 id=\"3vue页面组件的样式写scoped可以区分全局样式和组件内的样式那scoped的实现原理是什么\"><a class=\"anchor\" href=\"#3vue页面组件的样式写scoped可以区分全局样式和组件内的样式那scoped的实现原理是什么\">#</a> 3.vue 页面组件的样式写 scoped 可以区分全局样式和组件内的样式，那 scoped 的实现原理是什么？</h2>\n<h2 id=\"4说说vueuse的理解\"><a class=\"anchor\" href=\"#4说说vueuse的理解\">#</a> 4. 说说 Vue.use () 的理解？</h2>\n<h2 id=\"5有没有封装过组件有没有将封装的组件发布到npm或者别的平台的\"><a class=\"anchor\" href=\"#5有没有封装过组件有没有将封装的组件发布到npm或者别的平台的\">#</a> 5. 有没有封装过组件，有没有将封装的组件发布到 npm 或者别的平台的？</h2>\n<h2 id=\"6es6中箭头函数和普通函数有什么区别为什么箭头函数没有this\"><a class=\"anchor\" href=\"#6es6中箭头函数和普通函数有什么区别为什么箭头函数没有this\">#</a> 6.es6 中箭头函数和普通函数有什么区别，为什么箭头函数没有 this？</h2>\n<h2 id=\"7es6中foreach-map-for-of-for-in-四种循环的区别是什么哪些业务中使用过map循环平常用map多还是foreach多\"><a class=\"anchor\" href=\"#7es6中foreach-map-for-of-for-in-四种循环的区别是什么哪些业务中使用过map循环平常用map多还是foreach多\">#</a> 7.es6 中 forEach, map, for of , for in 四种循环的区别是什么，哪些业务中使用过 map 循环，平常用 map 多还是 forEach 多？</h2>\n<h2 id=\"8如果要去华东跟随项目出差能接受吗\"><a class=\"anchor\" href=\"#8如果要去华东跟随项目出差能接受吗\">#</a> 8. 如果要去华东跟随项目出差能接受吗...</h2>\n",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/interview-questions/%E5%8F%8C%E7%BE%BD%E4%B9%9D%E5%B7%9E/",
            "url": "https://www.yexingcheng.com/interview-questions/%E5%8F%8C%E7%BE%BD%E4%B9%9D%E5%B7%9E/",
            "title": "双羽九州面试题",
            "date_published": "2022-11-28T01:49:01.152Z",
            "content_html": "<h2 id=\"1说一下你知道的数据结构和算法\"><a class=\"anchor\" href=\"#1说一下你知道的数据结构和算法\">#</a> 1. 说一下你知道的数据结构和算法</h2>\n<h2 id=\"2冒泡排序的时间复杂度\"><a class=\"anchor\" href=\"#2冒泡排序的时间复杂度\">#</a> 2. 冒泡排序的时间复杂度</h2>\n<h2 id=\"3margin的值为负值会发生什么\"><a class=\"anchor\" href=\"#3margin的值为负值会发生什么\">#</a> 3.margin 的值为负值会发生什么</h2>\n<h2 id=\"4bfc\"><a class=\"anchor\" href=\"#4bfc\">#</a> 4.BFC</h2>\n<h2 id=\"5vue路由传参的方式以及弊端\"><a class=\"anchor\" href=\"#5vue路由传参的方式以及弊端\">#</a> 5.vue 路由传参的方式，以及弊端</h2>\n<h2 id=\"6vue传值\"><a class=\"anchor\" href=\"#6vue传值\">#</a> 6.vue 传值</h2>\n<h2 id=\"7嵌套路由\"><a class=\"anchor\" href=\"#7嵌套路由\">#</a> 7. 嵌套路由</h2>\n<h2 id=\"8http请求头你了解的\"><a class=\"anchor\" href=\"#8http请求头你了解的\">#</a> 8.http 请求头你了解的</h2>\n<h2 id=\"9contenttype你的了解\"><a class=\"anchor\" href=\"#9contenttype你的了解\">#</a> 9.contenttype 你的了解</h2>\n<h2 id=\"10描述你简历项目\"><a class=\"anchor\" href=\"#10描述你简历项目\">#</a> 10. 描述你简历项目</h2>\n",
            "tags": [
                "面试题总结",
                "interview"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/JavaScript/promise/",
            "url": "https://www.yexingcheng.com/JavaScript/promise/",
            "title": "详解JsPromise",
            "date_published": "2022-11-14T12:49:25.617Z",
            "content_html": "<h1 id=\"什么是promise\"><a class=\"anchor\" href=\"#什么是promise\">#</a> 什么是 promise?</h1>\n<p>来看看官方解释：</p>\n<p>Promise 是目前 JS 异步编程的一种解决方案。</p>\n<blockquote>\n<p>Promise 对象用于表示一个异步操作的最终完成（或失败）及其结果值。<br>\nPromise 必须为以下三种状态之一：等待态（Pending）、执行态（Fulfilled）和拒绝态（Rejected）。一旦 Promise 被 resolve 或 reject，不能再迁移至其他任何状态（即状态 immutable）。</p>\n</blockquote>\n<p><strong>基本过程</strong>：<br>\n初始化 Promise 状态（pending）<br>\n立即执行 Promise 中传入的 fn 函数，将 Promise 内部 resolve、reject 函数作为参数传递给 fn ，按事件机制时机处理<br>\n执行 then (..) 注册回调处理数组（then 方法可被同一个 promise 调用多次）<br>\nPromise 里的关键是要保证，then 方法传入的参数 onFulfilled 和 onRejected，必须在 then 方法被调用的那一轮事件循环之后的新执行栈中执行。</p>\n",
            "tags": [
                "JavaScript",
                "Js"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/JavaScript/object-oriented/",
            "url": "https://www.yexingcheng.com/JavaScript/object-oriented/",
            "title": "Js面向对象详解",
            "date_published": "2022-11-14T12:28:45.829Z",
            "content_html": "",
            "tags": [
                "JavaScript",
                "Js"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/algorithm/sort/",
            "url": "https://www.yexingcheng.com/algorithm/sort/",
            "title": "基础排序算法总结",
            "date_published": "2022-11-13T18:17:16.850Z",
            "content_html": "<h1 id=\"冒泡排序\"><a class=\"anchor\" href=\"#冒泡排序\">#</a> 冒泡排序：</h1>\n<blockquote>\n<p>从开始位置两两比较，持续 n 轮</p>\n</blockquote>\n<h2 id=\"基础版\"><a class=\"anchor\" href=\"#基础版\">#</a> 基础版：</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">let</span> tmp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"改进版\"><a class=\"anchor\" href=\"#改进版\">#</a> 改进版</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">bubleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"选择排序\"><a class=\"anchor\" href=\"#选择排序\">#</a> 选择排序：</h1>\n<blockquote>\n<p>每次选出最大 / 最小值 持续 n 轮</p>\n</blockquote>\n<h2 id=\"基础班\"><a class=\"anchor\" href=\"#基础班\">#</a> 基础班</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> 0i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                index <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"改进版-2\"><a class=\"anchor\" href=\"#改进版-2\">#</a> 改进版</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">selectSort</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len_i <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len_i<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> i</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> len_j <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len_j<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        index <span class=\"token operator\">=</span> j</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">!==</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"插入排序\"><a class=\"anchor\" href=\"#插入排序\">#</a> 插入排序</h1>\n<h1 id=\"希尔排序\"><a class=\"anchor\" href=\"#希尔排序\">#</a> 希尔排序</h1>\n<h1 id=\"归并排序\"><a class=\"anchor\" href=\"#归并排序\">#</a> 归并排序</h1>\n<h1 id=\"快速排序\"><a class=\"anchor\" href=\"#快速排序\">#</a> 快速排序</h1>\n<h1 id=\"堆排序\"><a class=\"anchor\" href=\"#堆排序\">#</a> 堆排序</h1>\n",
            "tags": [
                "算法",
                "js",
                "面试",
                "算法"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/algorithm/concurrent-requests/",
            "url": "https://www.yexingcheng.com/algorithm/concurrent-requests/",
            "title": "并发请求",
            "date_published": "2022-11-13T17:54:00.855Z",
            "content_html": "<h1 id=\"并发请求\"><a class=\"anchor\" href=\"#并发请求\">#</a> 并发请求：</h1>\n<p>给定一个 url 数组，每一项都是一个 url 地址，然后给出一个最大的并发请求数，直到所有请求发送完毕，然后把所有的返回结果归并到一个数组里面，并且顺序和 url 地址顺序相同</p>\n<p>首先，请求肯定是异步的，所以我们返回一个 Promise, 并且这个 Promise 一定是成功的，并且我们准备好一个返回数组，并且排除特殊情况</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">concurRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">urls<span class=\"token punctuation\">,</span>maxNum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">.</span>length<span class=\"token operator\">===</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">reslove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>每次我们取出一个 url 地址，然后发送请求，因为我们不用等待请求结果，所以可以看作是并发的</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">concurRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">urls<span class=\"token punctuation\">,</span>maxNum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">.</span>length<span class=\"token operator\">===</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">reslove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 下一个请求的下标</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> urls<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>现在以及可以发送请求了，但是在他请求完了之后，不管是成功还是失败，我们都加入到返回数组中</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">concurRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">urls<span class=\"token punctuation\">,</span>maxNum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">.</span>length<span class=\"token operator\">===</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">reslove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 下一个请求的下标</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">const</span> i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span><span class=\"token comment\">// 保存请求 url 在 urls 数组中的位置</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> urls<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">const</span> res  <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当一个请求完成了，就要开始发送下一个请求了：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">concurRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">urls<span class=\"token punctuation\">,</span>maxNum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">.</span>length<span class=\"token operator\">===</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">reslove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 下一个请求的下标</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">==</span>urls<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token comment\">// 发送次数到达最大就停止发送</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">const</span> i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span><span class=\"token comment\">// 保存请求 url 在 urls 数组中的位置</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> urls<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">const</span> res  <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后要判断所有请求是否都完成了，我们每完成一次请求就记录一次数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">concurRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">urls<span class=\"token punctuation\">,</span>maxNum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">.</span>length<span class=\"token operator\">===</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">reslove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 下一个请求的下标</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 完成的请求数量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">==</span>urls<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token comment\">// 发送次数到达最大就停止发送</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">const</span> i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span><span class=\"token comment\">// 保存请求 url 在 urls 数组中的位置</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> urls<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">const</span> res  <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                count<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">===</span>urls<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样我们请求的函数就有了，但是要调用几次呢，就是调用最大并发数的次数：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">concurRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">urls<span class=\"token punctuation\">,</span>maxNum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">.</span>length<span class=\"token operator\">===</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">reslove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 下一个请求的下标</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 完成的请求数量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">==</span>urls<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token comment\">// 发送次数到达最大就停止发送</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">const</span> i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span><span class=\"token comment\">// 保存请求 url 在 urls 数组中的位置</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> urls<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">const</span> res  <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                count<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">===</span>urls<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">let</span> times <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>maxNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> times<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>到这里这道面试题就完成了</p>\n",
            "tags": [
                "算法",
                "js",
                "面试",
                "算法"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/data-structures/stack/",
            "url": "https://www.yexingcheng.com/data-structures/stack/",
            "title": "栈代码面试题",
            "date_published": "2022-11-12T13:27:30.117Z",
            "content_html": "<h1 id=\"使用临时堆栈对堆栈进行排序\"><a class=\"anchor\" href=\"#使用临时堆栈对堆栈进行排序\">#</a> 使用临时堆栈对堆栈进行排序</h1>\n<p>给定一堆整数，使用另一个临时堆栈按升序对其进行排序。</p>\n<h2 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子：</h2>\n<blockquote>\n<p>输入 ：[34、3、31、98、92、23]<br>\n 输出：[3、23、31、34、92、98]</p>\n<p>输入：[3、5、1、4、2、8]<br>\n 输出：[1、2、3、4、5、8]</p>\n</blockquote>\n<h2 id=\"算法\"><a class=\"anchor\" href=\"#算法\">#</a> 算法：</h2>\n<p>1、创建一个临时堆栈为 tmpStack<br>\n2、虽然输入堆栈不为空，但请执行以下操作：</p>\n<ul>\n<li>从输入堆栈弹出一个元素，成为 temp</li>\n<li>当临时堆栈不为空且临时堆栈顶部大于 temp 时， 临时堆栈中弹出并将其推送到输入堆栈</li>\n<li>将 temp 推入临时堆栈</li>\n</ul>\n<p>3、排序后的数字在 tempStack</p>\n<h2 id=\"执行\"><a class=\"anchor\" href=\"#执行\">#</a> 执行：</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sortStack</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> tempStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tempStack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> tempStack<span class=\"token punctuation\">[</span>tempStack<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        input<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tempStack<span class=\"token punctuation\">[</span>tempStack<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        tempStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    tempStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> tempStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">92</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sortStack</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>输入：[34, 3, 31, 98, 92, 23]</p>\n<p>取出的元素：23<br>\n 输入：[34, 3, 31, 98, 92]<br>\ntmpStack：[23]</p>\n<p>取出的元素：92<br>\n 输入：[34, 3, 31, 98]<br>\ntmpStack: [23, 92]</p>\n<p>取出元素: 98<br>\n 输入: [34, 3, 31]<br>\ntmpStack: [23, 92, 98]</p>\n<p>取出元素: 31<br>\n 输入: [34, 3, 98, 92]<br>\ntmpStack: [23, 31]</p>\n<p>取出元素: 92<br>\n 输入: [34, 3, 98]<br>\ntmpStack: [23, 31, 92]</p>\n<p>取出元素: 98<br>\n 输入: [34, 3]<br>\ntmpStack: [23, 31, 92 , 98]</p>\n<p>取出的元素：3<br>\n 输入：[34, 98, 92, 31, 23]<br>\ntmpStack：[3]</p>\n<p>取出的元素：23<br>\n 输入：[34, 98, 92, 31]<br>\ntmpStack: [3, 23]</p>\n<p>取出元素: 31<br>\n 输入: [34, 98, 92]<br>\ntmpStack: [3, 23, 31]</p>\n<p>取出元素: 92<br>\n 输入: [34, 98]<br>\ntmpStack: [3, 23, 31 , 92]</p>\n<p>取出的元素：98<br>\n 输入：[34]<br>\ntmpStack：[3, 23, 31, 92, 98]</p>\n<p>取出的元素：34<br>\n 输入：[98, 92]<br>\ntmpStack：[3, 23, 31, 34]</p>\n<p>元素取出：92<br>\n 输入：[98]<br>\ntmpStack：[3,23,31,34,92]</p>\n<p>取出元素：98<br>\n 输入：[]<br>\ntmpStack：[3,23,31,34,92,98]</p>\n<p>最终排序列表： [3、23、31、34、92、98]</p>\n</blockquote>\n<h2 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h2>\n<blockquote>\n<p>98 92 34 31 23 3</p>\n</blockquote>\n<p><strong>时间复杂度：</strong> O (n 2) 其中 n 是给定堆栈中的整数总数。<br>\n<strong>辅助空间：</strong> O(n)</p>\n",
            "tags": [
                "数据结构",
                "js",
                "stack"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/data-structures/array/",
            "url": "https://www.yexingcheng.com/data-structures/array/",
            "title": "数组代码面试题",
            "date_published": "2022-11-11T14:11:17.368Z",
            "content_html": "<h1 id=\"查找数组中最小和次小的元素\"><a class=\"anchor\" href=\"#查找数组中最小和次小的元素\">#</a> 查找数组中最小和次小的元素</h1>\n<h2 id=\"实例\"><a class=\"anchor\" href=\"#实例\">#</a> 实例：</h2>\n<pre><code>输入：arr[] = &#123;12, 13, 1, 10, 34, 1&#125;\n输出：最小元素是 1 \n     第二个最小的元素是 10\n</code></pre>\n<h3 id=\"方法1简单方法\"><a class=\"anchor\" href=\"#方法1简单方法\">#</a> 方法 1（简单方法）</h3>\n<p>一个简单的解决方案是按照升序对数组进行排序。排序数组中的前两个元素将是两个最小的元素</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>a<span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果最小元素出现不止一次，那么我们将不得不使用循环来打印唯一的最小元素和次小元素。</p>\n<p><strong>时间复杂度：</strong> O(N*logN)<br>\n<strong> 辅助空间：</strong> O(1)</p>\n<h3 id=\"方法2\"><a class=\"anchor\" href=\"#方法2\">#</a> 方法 2</h3>\n<p>更好的<strong>解决方案</strong>是扫描阵列两次。在第一次遍历中找到最小元素。设此元素为 x。在第二次遍历中，找到大于 x 的最小元素。</p>\n<p>使用这种方法，我们可以克服方法 1 的问题，即最小元素在数组中出现多次时出现的问题。<br>\n上述解决方案需要对输入数组进行两次遍历。</p>\n",
            "tags": [
                "数据结构",
                "Array",
                "js"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/data-structures/main/",
            "url": "https://www.yexingcheng.com/data-structures/main/",
            "title": "面试需要了解的八个数据结构",
            "date_published": "2022-11-11T13:59:56.618Z",
            "content_html": "<p>1976 年，一个瑞士计算机科学家写一本书《Algorithms + Data Structures = Programs》。即：算法 + 数据结构 = 程序。40 多年过去了，这个等式依然成立。</p>\n<p>很多代码面试题都要求候选者深入理解数据结构，不管你来自大学计算机专业还是编程培训机构，也不管你有多少年编程经验。有时面试题会直接提到数据结构，比如 “给我实现一个二叉树”，然而有时则不那么明显，比如 “统计一下每个作者写的书的数量”。</p>\n<h1 id=\"什么是数据结构\"><a class=\"anchor\" href=\"#什么是数据结构\">#</a> 什么是数据结构？</h1>\n<p>数据结构是计算机存储、组织数据的方式。对于特定的数据结构 (比如数组)，有些操作效率很高 (读某个数组元素)，有些操作的效率很低 (删除某个数组元素)。程序员的目标是为当前的问题选择最优的数据结构。</p>\n<h2 id=\"为什么我们需要数据结构\"><a class=\"anchor\" href=\"#为什么我们需要数据结构\">#</a> 为什么我们需要数据结构</h2>\n<p>数据是程序的核心要素，因此数据结构的价值不言而喻。无论你在写什么程序，你都需要与数据打交道，比如员工工资、股票价格、杂货清单或者电话本。在不同场景下，数据需要以特定的方式存储，我们有不同的数据结构可以满足我们的需求。</p>\n<h1 id=\"8种常用的数据结构\"><a class=\"anchor\" href=\"#8种常用的数据结构\">#</a> 8 种常用的数据结构</h1>\n<p>1. 数组<br>\n 2. 栈<br>\n 3. 队列<br>\n 4. 链表<br>\n 5. 图<br>\n 6. 树<br>\n 7. 前缀树<br>\n 8. 哈希表</p>\n<h2 id=\"1-数组\"><a class=\"anchor\" href=\"#1-数组\">#</a> 1、数组</h2>\n<p><strong>数组</strong> (Array) 大概是最简单，也是最常用的数据结构了。其他数据结构，比如栈和队列都是由数组衍生出来的</p>\n<p>下面展示了一个数组，他有四个元素</p>\n<p><img data-src=\"image-20221111221359307.png\" alt=\"image-20221111221359307\"></p>\n<p>每一个元素的位置由数字编号，称为下标或者索引。大多数编程语言的第一个元素的下标为 0。</p>\n<p>根据维度区分，有 2 种不同的数组：</p>\n<ul>\n<li>一维数组</li>\n<li>多维数组</li>\n</ul>\n<h3 id=\"数组的基本操作\"><a class=\"anchor\" href=\"#数组的基本操作\">#</a> 数组的基本操作</h3>\n<ul>\n<li>Insert - 在某个索引处插入元素</li>\n<li>Get - 读取某个索引处的元素</li>\n<li>Delete - 删除某个索引处的元素</li>\n<li>Size - 获取数组的长度</li>\n</ul>\n<p><a href=\"/data-structures/array/\">常见的数组代码面试题</a></p>\n<h2 id=\"2-栈\"><a class=\"anchor\" href=\"#2-栈\">#</a> 2. 栈</h2>\n<p>撤回，即 Ctrl+Z，是我们最常见的操作之一，大多数应用都会支持这个功能。你知道它是怎么实现的吗？答案是这样的：把之前的应用状态 (限制个数) 保存到内存中，最近的状态放到第一个。这时，我们需要栈 (stack) 来实现这个功能。</p>\n<p>栈中的元素采用 LIFO (Last In First Out)，即后进先出。</p>\n<p>下图的栈有 3 个元素，3 在最上面，因此它会被第一个移除</p>\n<p><img data-src=\"image-20221112212908111.png\" alt=\"image-20221112212908111\"></p>\n<p>栈的基本操作</p>\n<p>栈的基本操作</p>\n<ul>\n<li>Push —  在栈的最上方插入元素</li>\n<li>Pop — 返回栈最上方的元素，并将其删除</li>\n<li>isEmpty —  查询栈是否为空</li>\n<li>Top —  返回栈最上方的元素，并不删除</li>\n</ul>\n<p><a href=\"/data-structures/stack/\">常见的数组代码面试题</a></p>\n",
            "tags": [
                "数据结构",
                "js"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/JavaScript/wrapper-object/",
            "url": "https://www.yexingcheng.com/JavaScript/wrapper-object/",
            "title": "js中包装对象",
            "date_published": "2022-11-08T13:08:22.631Z",
            "content_html": "<h1 id=\"先来看定义\"><a class=\"anchor\" href=\"#先来看定义\">#</a> 先来看定义</h1>\n<p>对象是 javascript 语言最主要的数据类型，三种原始类型的值 ————Number,string,boolean 在一定条件下，也会自动转为对象，也就是原始类型的 <code>包装对象</code>  (wrapper)</p>\n<p>所谓 <code>包装对象</code>  指的是 Number,string,boolean 分别对应的 Number,String,Boolean 三个原生对象。这三个原生对象可以把原始类型的值变成 (包装成) 对象</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> v1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> v2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> v3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typeof</span> v1 <span class=\"token comment\">// \"object\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typeof</span> v2 <span class=\"token comment\">// \"object\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typeof</span> v3 <span class=\"token comment\">// \"object\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>v1 <span class=\"token operator\">===</span> <span class=\"token number\">123</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>v2 <span class=\"token operator\">===</span> <span class=\"token string\">'abc'</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>v3 <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p>面代码中，基于原始类型的值，生成了三个对应的包装对象。可以看到，v1、v2、v3 都是对象，且与对应的简单类型值不相等。</p>\n<p>包装对象的设计目的，首先是使得 “对象” 这种类型可以覆盖 JavaScript 所有的值，整门语言有一个通用的数据模型，其次是使得原始类型的值也有办法调用自己的方法。</p>\n<p><code>Number</code> 、 <code>String</code>  和 <code>Boolean</code>  这三个原生对象，如果不作为构造函数调用（即调用时不加 new），而是作为普通函数调用，常常用于将任意类型的值转为数值、字符串和布尔值。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 字符串转为数值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 数值转为字符串</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"123\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 数值转为布尔值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>总结一下，这三个对象作为构造函数使用（带有 new）时，可以将原始类型的值转为对象；作为普通函数使用时（不带有 new），可以将任意类型的值，转为原始类型的值。</p>\n<h1 id=\"实例方法\"><a class=\"anchor\" href=\"#实例方法\">#</a> 实例方法</h1>\n<p>三种包装对象各自提供了许多实例方法。这里介绍两种它们共同具有、从 Object 对象继承的方法: <code>valueOf()</code>  和 <code>toString()</code></p>\n<ul>\n<li>valueOf()<br>\n <code>valueOf()</code>  方法返回包装对象实例对应的原始类型的值。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"abc\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><ul>\n<li>toString()<br>\n <code>toString()</code>  方法返回对应的字符串形式</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"123\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"abc\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"true\"</span></pre></td></tr></table></figure><h2 id=\"原始类型与实例对象的自动转换\"><a class=\"anchor\" href=\"#原始类型与实例对象的自动转换\">#</a> 原始类型与实例对象的自动转换</h2>\n<p>某些场合，原始类型的值会自动当作包装对象调用，即调用包装对象的属性和方法。这时，JavaScript 引擎会自动将原始类型的值转为包装对象实例，并在使用后立刻销毁实例。</p>\n<p>比如，字符串可以调用 <code>length</code>  属性，返回字符串的长度。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'abc'</span><span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 3</span></pre></td></tr></table></figure><p>上面代码中， <code>abc</code>  是一个字符串，本身不是对象，不能调用 <code>length</code>  属性。JavaScript 引擎自动将其转为包装对象，在这个对象上调用 <code>length</code>  属性。调用结束后，这个临时对象就会被销毁。这就叫原始类型与实例对象的自动转换</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>str<span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> strObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// String &#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//   0: \"a\", 1: \"b\", 2: \"c\", length: 3, [[PrimitiveValue]]: \"abc\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>strObj<span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 3</span></pre></td></tr></table></figure><p>自动转换生成的包装对象是只读的，无法修改。所以，字符串无法添加新属性。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">.</span>x <span class=\"token comment\">// undefined</span></pre></td></tr></table></figure><p>另一方面，调用结束后，包装对象实例会自动销毁。这意味着，下一次调用字符串的属性时，实际是调用一个新生成的对象，而不是上一次调用时生成的那个对象，所以取不到赋值在上一个对象的属性。如果要为字符串添加属性，只有在它的原型对象 String.prototype 上定义。</p>\n<h2 id=\"自定义方法\"><a class=\"anchor\" href=\"#自定义方法\">#</a> 自定义方法</h2>\n<p>除了原生的实例方法，包装对象还可以自定义方法和属性，供原始类型的值直接调用。</p>\n<p>比如，我们可以新增一个 double 方法，使得字符串和数字翻倍。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">double</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">'abc'</span><span class=\"token punctuation\">.</span><span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// abcabc</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Number</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">double</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 246</span></pre></td></tr></table></figure><p>上面代码在 String 和 Number 这两个对象的原型上面，分别自定义了一个方法，从而可以在所有实例对象上调用。注意，最后的 123 外面必须要加上圆括号，否则后面的点运算符（.）会被解释成小数点。</p>\n<h1 id=\"boolean对象\"><a class=\"anchor\" href=\"#boolean对象\">#</a> Boolean 对象</h1>\n<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述:</h2>\n<p>Boolean 对象是 JavaScript 的三个包装对象之一。作为构造函数，它主要用于生成布尔值的包装对象实例。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typeof</span> b <span class=\"token comment\">// \"object\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>b<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>上面代码的变量 b 是一个 <code>Boolean</code>  对象的实例，它的类型是对象，值为布尔值 <code>true</code> 。</p>\n<p>注意， <code>false</code>  对应的包装对象实例，布尔运算结果也是 <code>true</code> 。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 无输出</span></pre></td></tr></table></figure><p>上面代码的第一个例子之所以得到 true，是因为 false 对应的包装对象实例是一个对象，进行逻辑运算时，被自动转化成布尔值 true（因为所有对象对应的布尔值都是 true）。而实例的 valueOf 方法，则返回实例对应的原始值，本例为 false。</p>\n<h2 id=\"boolean-函数的类型转换作用\"><a class=\"anchor\" href=\"#boolean-函数的类型转换作用\">#</a> Boolean 函数的类型转换作用</h2>\n<p><code>Boolean</code>  对象除了可以作为构造函数，还可以单独使用，将任意值转为布尔值。这时 <code>Boolean</code>  就是一个单纯的工具方法。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">'false'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">foo</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>上面代码中几种得到 true 的情况，都值得认真记住。</p>\n<p>顺便提一下，使用双重的否运算符（!）也可以将任意值转为对应的布尔值。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token keyword\">undefined</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token keyword\">null</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">0</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token string\">''</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">NaN</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">1</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token string\">'false'</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">foo</span><span class=\"token regex-delimiter\">/</span></span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>最后，对于一些特殊值， <code>Boolean</code>  对象前面加不加 <code>new</code> ，会得到完全相反的结果，必须小心。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 无输出</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 无输出</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><h1 id=\"number-对象\"><a class=\"anchor\" href=\"#number-对象\">#</a> Number 对象</h1>\n<h2 id=\"概述-2\"><a class=\"anchor\" href=\"#概述-2\">#</a> 概述</h2>\n<p><code>Number</code>  对象是数值对应的包装对象，可以作为构造函数使用，也可以作为工具函数使用。</p>\n<p>作为构造函数时，它用于生成值为数值的对象。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typeof</span> n <span class=\"token comment\">// \"object\"</span></pre></td></tr></table></figure><p>上面代码中， <code>Number</code>  对象作为构造函数使用，返回一个值为 1 的对象。</p>\n<p>作为工具函数时，它可以将任何类型的值转为数值。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><h2 id=\"静态属性\"><a class=\"anchor\" href=\"#静态属性\">#</a> 静态属性</h2>\n<p><code>Number</code>  对象拥有以下一些静态属性（即直接定义在 <code>Number</code>  对象上的属性，而不是定义在实例上的属性）。</p>\n<ul>\n<li><code>Number.POSITIVE_INFINITY</code> ：正的无限，指向 Infinity。</li>\n<li><code>Number.NEGATIVE_INFINITY</code> ：负的无限，指向 - Infinity。</li>\n<li><code>Number.NaN</code> ：表示非数值，指向 NaN。</li>\n<li><code>Number.MIN_VALUE</code> ：表示最小的正数（即最接近 0 的正数，在 64 位浮点数体系中为 5e-324），相应 - 的，最接近 0 的负数为 - <code>Number.MIN_VALUE</code> 。</li>\n<li><code>Number.MAX_SAFE_INTEGER</code> ：表示能够精确表示的最大整数，即 9007199254740991。</li>\n<li><code>Number.MIN_SAFE_INTEGER</code> ：表示能够精确表示的最小整数，即 - 9007199254740991。</li>\n</ul>\n<p>实例方法<br>\n <code>Number</code>  对象有 4 个实例方法，都跟将数值转换成指定格式有关。</p>\n<p><strong>Number.prototype.toString()</strong><br>\n <code>Numbe</code> r 对象部署了自己的 <code>toString</code>  方法，用来将一个数值转为字符串形式。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"10\"</span></pre></td></tr></table></figure><p><code>toString</code>  方法可以接受一个参数，表示输出的进制。如果省略这个参数，默认将数值先转为十进制，再输出字符串；否则，就根据参数指定的进制，将一个数字转化成某个进制的字符串。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1010\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"12\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"a\"</span></pre></td></tr></table></figure><p>上面代码中，10 一定要放在括号里，这样表明后面的点表示调用对象属性。如果不加括号，这个点会被 JavaScript 引擎解释成小数点，从而报错。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">10.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// SyntaxError: Unexpected token ILLEGAL</span></pre></td></tr></table></figure><p>只要能够让 JavaScript 引擎不混淆小数点和对象的点运算符，各种写法都能用。除了为 10 加上括号，还可以在 <code>10</code>  后面加两个点，JavaScript 会把第一个点理解成小数点（即 10.0），把第二个点理解成调用对象属性，从而得到正确结果。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">10.</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1010\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 其他方法还包括</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1010\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">10.0</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1010\"</span></pre></td></tr></table></figure><p>这实际上意味着，可以直接对一个小数使用 <code>toString</code>  方法。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">10.5</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"10.5\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">10.5</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1010.1\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">10.5</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"12.4\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">10.5</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"a.8\"</span></pre></td></tr></table></figure><p>通过方括号运算符也可以调用 <code>toString</code>  方法。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">10</span><span class=\"token punctuation\">[</span><span class=\"token string\">'toString'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1010\"</span></pre></td></tr></table></figure><p><code>toString</code>  方法只能将十进制的数，转为其他进制的字符串。如果要将其他进制的数，转回十进制，需要使用 <code>parseInt</code>  方法。</p>\n<p><strong>Number.prototype.toFixed()</strong></p>\n<p>toPrecision 方法用于将一个数转为指定位数的有效数字。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">12.34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1e+1\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">12.34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"12\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">12.34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"12.3\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">12.34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"12.34\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">12.34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"12.340\"</span></pre></td></tr></table></figure><p><code>toPrecision</code>  方法的参数为有效数字的位数，范围是 1 到 21，超出这个范围会抛出 <code>RangeError</code>  错误。</p>\n<p><code>toPrecision</code>  方法用于四舍五入时不太可靠，跟浮点数不是精确储存有关。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">12.35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"12.3\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">12.25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"12.3\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">12.15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"12.2\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">12.45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"12.4\"</span></pre></td></tr></table></figure><h1 id=\"string-对象\"><a class=\"anchor\" href=\"#string-对象\">#</a> String 对象</h1>\n<h2 id=\"概述-3\"><a class=\"anchor\" href=\"#概述-3\">#</a> 概述</h2>\n<p>String 对象是 JavaScript 原生提供的三个包装对象之一，用来生成字符串对象。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typeof</span> s1 <span class=\"token comment\">// \"string\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typeof</span> s2 <span class=\"token comment\">// \"object\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>s2<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"abc\"</span></pre></td></tr></table></figure><p>字符串对象是一个类似数组的对象（很像数组，但不是数组）。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// String &#123;0: \"a\", 1: \"b\", 2: \"c\", length: 3&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// \"b\"</span></pre></td></tr></table></figure><h2 id=\"实例属性\"><a class=\"anchor\" href=\"#实例属性\">#</a> 实例属性</h2>\n<p><strong>String.prototype.length</strong><br>\n 字符串实例的 length 属性返回字符串的长度。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'abc'</span><span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 3</span></pre></td></tr></table></figure><h2 id=\"静态方法\"><a class=\"anchor\" href=\"#静态方法\">#</a> 静态方法:</h2>\n<p><strong>String.prototype.match()</strong></p>\n<p><code>match</code>  方法用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回 <code>null</code> 。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'cat, bat, sat, fat'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'at'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"at\"]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'cat, bat, sat, fat'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xt'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// null</span></pre></td></tr></table></figure><p>返回的数组还有 <code>index</code>  属性和 <code>input</code>  属性，分别表示匹配字符串开始的位置和原始字符串。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> matches <span class=\"token operator\">=</span> <span class=\"token string\">'cat, bat, sat, fat'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'at'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>matches<span class=\"token punctuation\">.</span>index <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>matches<span class=\"token punctuation\">.</span>input <span class=\"token comment\">// \"cat, bat, sat, fat\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>match方法还可以使用正则表达式作为参数。</pre></td></tr></table></figure><p><strong>String.prototype.localeCompare()</strong></p>\n<p><code>localeCompare</code>  方法用于比较两个字符串。它返回一个整数，如果小于 0，表示第一个字符串小于第二个字符串；如果等于 0，表示两者相等；如果大于 0，表示第一个字符串大于第二个字符串。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'apple'</span><span class=\"token punctuation\">.</span><span class=\"token function\">localeCompare</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'apple'</span><span class=\"token punctuation\">.</span><span class=\"token function\">localeCompare</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></pre></td></tr></table></figure><p>该方法的最大特点，就是会考虑自然语言的顺序。举例来说，正常情况下，大写的英文字母小于小写字母。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'B'</span> <span class=\"token operator\">></span> <span class=\"token string\">'a'</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p>上面代码中，字母 B 小于字母 a。因为 JavaScript 采用的是 Unicode 码点比较，B 的码点是 <code>66</code> ，而 a 的码点是 <code>97</code> 。</p>\n<p>但是， <code>localeCompare</code>  方法会考虑自然语言的排序情况，将 B 排在 a 的前面。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'B'</span><span class=\"token punctuation\">.</span><span class=\"token function\">localeCompare</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><p>上面代码中， <code>localeCompare</code>  方法返回整数 1，表示 B 较大。</p>\n<p><code>localeCompare</code>  还可以有第二个参数，指定所使用的语言（默认是英语），然后根据该语言的规则进行比较。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'ä'</span><span class=\"token punctuation\">.</span><span class=\"token function\">localeCompare</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'de'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'ä'</span><span class=\"token punctuation\">.</span><span class=\"token function\">localeCompare</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sv'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><p>上面代码中，de 表示德语，sv 表示瑞典语。德语中，ä 小于 z，所以返回 - 1；瑞典语中，ä 大于 z，所以返回 1。</p>\n",
            "tags": [
                "JavaScript",
                "js"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/JavaScript/Variable-recycling/",
            "url": "https://www.yexingcheng.com/JavaScript/Variable-recycling/",
            "title": "JS变量回收机制",
            "date_published": "2022-11-06T16:09:01.945Z",
            "content_html": "<h1 id=\"先看题目\"><a class=\"anchor\" href=\"#先看题目\">#</a> 先看题目:</h1>\n<ol>\n<li class=\"quiz fill\">\n<p>下列代码有几个变量没有被回收？ <code>点我查看</code>  <span class=\"gap\">3</span>。</p>\n<blockquote>\n<p>即 i 和 add, 局部变量有一个 i，因为局部变量被另一个作用域引用，所以局部变量 i 也不回收</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"变量回收原则\"><a class=\"anchor\" href=\"#变量回收原则\">#</a> 变量回收原则:</h1>\n<ul>\n<li>全局变量不会回收</li>\n<li>局部变量会被回收，也就是函数一旦运行完后，函数内部的东西都会被销毁</li>\n<li>只要被另外一个作用域引用就不会被回收</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 全局变量不会被回收</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 这里重复声明变量 i, 因此 var 声明被忽略，只是把 i 赋值为 2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 全局变量不会被回收</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 局部变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 被另一个作用域引用导致不会被回收</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"js的垃圾回收机制\"><a class=\"anchor\" href=\"#js的垃圾回收机制\">#</a> JS 的垃圾回收机制</h1>\n<h2 id=\"标记清除\"><a class=\"anchor\" href=\"#标记清除\">#</a> 标记清除</h2>\n<blockquote>\n<p>js 中最常见的垃圾回收方式是标记清除<br>\n标记清除就是从根部出发，看是否能达到某个对象，如果能达到则认定这个对象还被需要，如果无法达到，则释放它。<br>\n这个过程大致分为三步</p>\n</blockquote>\n<ul>\n<li>垃圾回收器创建 roots 列表，roots 通常是代码中保留引用的全局变量，在 js 中，我们一般认定全局变量 window 作为 root, 也就是所谓的跟部</li>\n<li>从根部出发检查所有的 roots, 所有的 children 也会被递归检查，能从 root 到达的都会被标记为 active</li>\n<li>未被标记为 active 的数据被认定为不再需要，垃圾回收器开始释放他们</li>\n</ul>\n<p>注意:<br>\n 当一个对象 <code>零引用</code> 时，我们从根部 <code>一定无法到达</code> 。<br>\n但反过来，从 <code>根部无法到达</code> 的 <code>不一定</code> 是严格意义上的零引用，比如循环引用，所以标记清除要 <code>更优于引用计数</code> 。</p>\n<h2 id=\"引用计数\"><a class=\"anchor\" href=\"#引用计数\">#</a> 引用计数</h2>\n<p>工作原理：工作原理：跟踪记录每个值被引用的次数。</p>\n<h2 id=\"什么情况会引起内存泄漏无法释放已经不使用的内存\"><a class=\"anchor\" href=\"#什么情况会引起内存泄漏无法释放已经不使用的内存\">#</a> 什么情况会引起内存泄漏 (无法释放已经不使用的内存)?</h2>\n<blockquote>\n<p>虽然有垃圾回收机制但是我们编写代码操作不当还是会造成内存泄漏。</p>\n</blockquote>\n<ul>\n<li>1、意外的全局变量引起的内存泄漏。</li>\n</ul>\n<p>原因：全局变量，不会被回收。<br>\n解决：使用严格模式避免。</p>\n<ul>\n<li>2、闭包引起的内存泄漏</li>\n</ul>\n<p>原因：闭包可以维持函数内局部变量，使其得不到释放。<br>\n解决：将事件处理函数定义在外部，解除闭包，或者在定义事件处理函数的外部函数中，删除对 dom 的引用。</p>\n<ul>\n<li>3、没有清理的 DOM 元素引用</li>\n</ul>\n<p>原因：虽然别的地方删除了，但是对象中还存在对 dom 的引用<br>\n解决：手动删除。</p>\n<ul>\n<li>4、被遗忘的定时器或者回调</li>\n</ul>\n<p>原因：定时器中有 dom 的引用，即使 dom 删除了，但是定时器还在，所以内存中还是有这个 dom。<br>\n解决：手动删除定时器和 dom。</p>\n<ul>\n<li>5、子元素存在引用引起的内存泄漏</li>\n</ul>\n<p>原因：div 中的 ul li 得到这个 div，会间接引用某个得到的 li，那么此时因为 div 间接引用 li，即使 li 被清空，也还是在内存中，并且只要 li 不被删除，他的父元素都不会被删除。<br>\n解决：手动删除清空。</p>\n",
            "tags": [
                "JavaScript",
                "js"
            ]
        }
    ]
}