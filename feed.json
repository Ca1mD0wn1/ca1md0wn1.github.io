{
    "version": "https://jsonfeed.org/version/1",
    "title": "永不陨落的星辰",
    "subtitle": "",
    "icon": "https://www.yexingcheng.com/images/favicon.ico",
    "description": "如因为网络原因,如果有文章加载不出来的情况，请访问(https://beize_admin.gitee.io)",
    "home_page_url": "https://www.yexingcheng.com",
    "items": [
        {
            "id": "https://www.yexingcheng.com/Linux/Linux%E8%BF%9E%E6%8E%A5%E5%88%B0github/",
            "url": "https://www.yexingcheng.com/Linux/Linux%E8%BF%9E%E6%8E%A5%E5%88%B0github/",
            "title": "Linux连接到github",
            "date_published": "2022-12-07T04:14:59.916Z",
            "content_html": "<p>今天在搭建Move开发环境的时候，发现从github上克隆东西会报TCP断开的错误，但是又是可以ping通百度的。下面来解决这个问题：</p>\n<p>原因<br>git clone特别慢是因为github.global.ssl.fastly.net域名被限制了。<br>只要找到这个域名对应的ip地址，然后在hosts文件中加上ip–&gt;域名的映射，刷新DNS缓存便可。</p>\n<p>解决方法</p>\n<ol>\n<li>在网站 ​ ​<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaXBhZGRyZXNzLmNvbS8lRTIlODAlOEIlRTIlODAlOEI=\">https://www.ipaddress.com/​​</span> 分别搜索：</li>\n</ol>\n<blockquote>\n<p>github.global.ssl.fastly.net<br>github.com<br>得到ip:</p>\n</blockquote>\n<p><img data-src=\"F:\\前端项目\\Blog\\source_posts\\Linux\\Linux连接到github\\image-20221207122028874.png\" alt=\"image-20221207122028874\"></p>\n<p>接下来我们修改在etc目录下的 hosts文件：（如果显示文件是read-only的，就需要切换到超级管理员身份：su root）</p>\n<p>这里我使用的是nano编辑器：</p>\n<pre><code class=\"awk\">nano hosts\n</code></pre>\n<p>然后在最下面添加两行：</p>\n<blockquote>\n<p>199.232.69.194 github.global-ssl.fastly.net<br>140.82.112.4 github.com</p>\n</blockquote>\n<p>此时我们再git clone就发现可以了：</p>\n<p><img data-src=\"F:\\前端项目\\Blog\\source_posts\\Linux\\Linux连接到github\\image-20221207132349688.png\" alt=\"image-20221207132349688\"></p>\n<p> 网速还是慢得要死。但总归开始走了。而且有时还会报错，可以多输几遍试试</p>\n",
            "tags": [
                "Linux",
                "Linux"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/Linux/Linux%E5%AE%89%E8%A3%85vscode/",
            "url": "https://www.yexingcheng.com/Linux/Linux%E5%AE%89%E8%A3%85vscode/",
            "title": "Linux从0开始安装vscode",
            "date_published": "2022-12-06T13:12:11.253Z",
            "content_html": "<p>这里我用到的是VMware虚拟机 +CentOS7 64位的环境搭建的Linux系统</p>\n<p>在安装好虚拟机后，作为编程人我们肯定首先是下载最好的编辑器VScode。</p>\n<p>在一番查找攻略之后，发现只需要一行代码就可以下载VScode,但是运行代码之后发现报错：<br>Linux: ‘Username’ is not in the sudoers file. This incident will be reported</p>\n<p>经过一番查找发现，是没有把自己的用户名添加到配置文件当中：</p>\n<p>打开文件</p>\n<pre><code class=\"awk\">su root \nnano /etc/sudoers\n```awk\n然后像下面的语法一样在管理员用户下面添加用户。\n```awk\nuser_name ALL=(ALL)  ALL\n</code></pre>\n<p>然后按Ctrl+X保存。<br>我们重新下载，发现下载速度极慢；<br>这是为什么呢？最初我怀疑是虚拟机可能没有网络环境，于是我ping了一下百度：</p>\n<p><img data-src=\"/Linux/Linux%E5%AE%89%E8%A3%85vscode/image-20221206212453591.png\" alt=\"image-20221206212453591\"></p>\n<p>但是显示是可以ping的通的，于是我又ping了一下谷歌：</p>\n<p><img data-src=\"/Linux/Linux%E5%AE%89%E8%A3%85vscode/image-20221206212529854.png\" alt=\"image-20221206212529854\"></p>\n<p>果然是ping不通的。虽然我采用了科学上网，但是很明显虚拟机是没有翻出去的，那怎么办呢？我们就需要换源：</p>\n<h5 id=\"1-安装-wget\"><a href=\"#1-安装-wget\" class=\"headerlink\" title=\"1. 安装 wget\"></a>1. 安装 wget</h5><pre><code class=\"powershell\">type wget\n# 如果找不到wget命令，需要先安装\nyum -y install wget\n</code></pre>\n<h5 id=\"2-备份\"><a href=\"#2-备份\" class=\"headerlink\" title=\"2. 备份\"></a>2. 备份</h5><pre><code class=\"awk\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n</code></pre>\n<h5 id=\"3-下载\"><a href=\"#3-下载\" class=\"headerlink\" title=\"3. 下载\"></a>3. 下载</h5><pre><code class=\"awk\"># CentOS 7\nwget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo\n# CentOS 8\nwget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo\n</code></pre>\n<h5 id=\"4-生成缓存\"><a href=\"#4-生成缓存\" class=\"headerlink\" title=\"4. 生成缓存\"></a>4. 生成缓存</h5><pre><code class=\"awk\"># 清除缓存\nyum clean all\n# 生成缓存，建立元数据\nyum makecache\n</code></pre>\n<p>因为我这里用的是CentOs,所以使用以下命令安装vscode:</p>\n<p>对于centos则如下：</p>\n<pre><code class=\"awk\">sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\nsudo sh -c &#39;echo -e &quot;[code]\\nname=Visual Studio Code\\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc&quot; &gt; /etc/yum.repos.d/vscode.repo&#39;\n</code></pre>\n<p>然后用yum命令安装</p>\n<pre><code class=\"awk\">yum check-update\nsudo yum install code\n</code></pre>\n<p>完成后，就可以用 code 命令来打开 vscode了</p>\n<p><img data-src=\"/Linux/Linux%E5%AE%89%E8%A3%85vscode/image-20221206212843111.png\" alt=\"image-20221206212843111\"></p>\n",
            "tags": [
                "Linux",
                "Linux"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/algorithm/DeepClone/",
            "url": "https://www.yexingcheng.com/algorithm/DeepClone/",
            "title": "js实现深拷贝",
            "date_published": "2022-12-02T03:22:10.233Z",
            "content_html": "<h1 id=\"要求：\"><a href=\"#要求：\" class=\"headerlink\" title=\"要求：\"></a>要求：</h1><p>1、请实现一个对象深拷贝的方法，要求支持全部is基本数据类型提示: typeof 用来检测变量的数据类型，返回值一共有六个<br>‘number’<br>‘string’”boolean’<br>‘object’<br>‘undefined’<br>‘function’</p>\n<p>核心思路：<strong>递归</strong></p>\n<p>直接上代码：</p>\n<pre><code class=\"js\">function deepCloneObject(object) &#123;\n    let newObject = &#123;&#125;\n    for (let key in object) &#123;\n\n        if (Array.isArray(object[key])) &#123;\n            newObject[key] = deepCloneArray(object[key])\n        &#125; else if (typeof object[key] === &#39;object&#39;) &#123;\n            newObject[key] = deepCloneObject(object[key])\n        &#125; else &#123;\n            newObject[key] = object[key]\n        &#125;\n    &#125;\n    return newObject\n&#125;\n\nfunction deepCloneArray(array) &#123;\n    let newArray = [];\n    for (let i = 0; i &lt; array.length; i++) &#123;\n        if (Array.isArray(array[i])) &#123;\n            newArray[i] = deepCloneArray(array[i])\n        &#125; else if (typeof array[i] === &#39;object&#39;) &#123;\n            newArray[i] = deepCloneObject(array[i])\n        &#125; else &#123;\n            newArray[i] = array[i]\n        &#125;\n    &#125;\n    return newArray\n&#125;\n\nlet obj1 = &#123;\n    key1: &#39;value1&#39;,\n    key2: function () &#123; console.log(1); &#125;,\n    key3: [1, 2, 3, 4],\n    key4: [&#123;&#125;, &#123;&#125;, &#123;&#125;],\n    key5: undefined,\n    key6: false\n&#125;\nlet obj2 = deepCloneObject(obj1)\n\nconsole.log(JSON.stringify(obj1) === JSON.stringify(obj2));\n\nobj1.key3[0] = &quot;1&quot;\nconsole.log(JSON.stringify(obj1) === JSON.stringify(obj2));\n</code></pre>\n",
            "tags": [
                "算法",
                "js",
                "面试",
                "算法"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/JavaScript/promise/",
            "url": "https://www.yexingcheng.com/JavaScript/promise/",
            "title": "详解JsPromise",
            "date_published": "2022-11-14T12:49:25.617Z",
            "content_html": "<h1 id=\"什么是promise\"><a href=\"#什么是promise\" class=\"headerlink\" title=\"什么是promise?\"></a>什么是promise?</h1><p>来看看官方解释：</p>\n<p>Promise 是目前 JS 异步编程的一种解决方案。</p>\n<blockquote>\n<p>Promise 对象用于表示一个异步操作的最终完成（或失败）及其结果值。<br>Promise 必须为以下三种状态之一：等待态（Pending）、执行态（Fulfilled）和拒绝态（Rejected）。一旦Promise 被 resolve 或 reject，不能再迁移至其他任何状态（即状态 immutable）。</p>\n</blockquote>\n<p><strong>基本过程</strong>：<br>初始化 Promise 状态（pending）<br>立即执行 Promise 中传入的 fn 函数，将Promise 内部 resolve、reject 函数作为参数传递给 fn ，按事件机制时机处理<br>执行 then(..) 注册回调处理数组（then 方法可被同一个 promise 调用多次）<br>Promise里的关键是要保证，then方法传入的参数 onFulfilled 和 onRejected，必须在then方法被调用的那一轮事件循环之后的新执行栈中执行。</p>\n",
            "tags": [
                "JavaScript",
                "Js"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/JavaScript/object-oriented/",
            "url": "https://www.yexingcheng.com/JavaScript/object-oriented/",
            "title": "Js面向对象详解",
            "date_published": "2022-11-14T12:28:45.829Z",
            "content_html": "",
            "tags": [
                "JavaScript",
                "Js"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/algorithm/sort/",
            "url": "https://www.yexingcheng.com/algorithm/sort/",
            "title": "基础排序算法总结",
            "date_published": "2022-11-13T18:17:16.850Z",
            "content_html": "<h1 id=\"冒泡排序：\"><a href=\"#冒泡排序：\" class=\"headerlink\" title=\"冒泡排序：\"></a>冒泡排序：</h1><blockquote>\n<p>从开始位置两两比较，持续n轮</p>\n</blockquote>\n<h2 id=\"基础版：\"><a href=\"#基础版：\" class=\"headerlink\" title=\"基础版：\"></a>基础版：</h2><pre><code class=\"js\">function bubbleSort(arr)&#123;\n    for(let i = 0; i &lt;arr.length; i++)&#123;\n        for(let j = 0; j &lt;arr.length; j++)&#123;\n            if(arr[j]&gt;arr[j+1])&#123;\n                let tmp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = tmp;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"改进版\"><a href=\"#改进版\" class=\"headerlink\" title=\"改进版\"></a>改进版</h2><pre><code class=\"js\">function bubleSort(arr)&#123;\n    for(let i = arr.length-1;i&gt;0;i--)&#123;\n        for(let j = 0; j&lt;i;j++)&#123;\n            if(arr[j]&gt;arr[j+1])&#123;\n                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]]\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"选择排序：\"><a href=\"#选择排序：\" class=\"headerlink\" title=\"选择排序：\"></a>选择排序：</h1><blockquote>\n<p>每次选出最大&#x2F;最小值 持续n轮</p>\n</blockquote>\n<h2 id=\"基础班\"><a href=\"#基础班\" class=\"headerlink\" title=\"基础班\"></a>基础班</h2><pre><code class=\"javascript\">function selectSort(arr)&#123;\n    for(let i = 0i&lt;arr.length; i &lt; ++)&#123;\n        let index = i;\n\n        for(let j = i;j&lt;arr.length;j++)&#123;\n            if(arr[index]&gt;arr[j])&#123;\n                index = j;\n        &#125;\n    &#125;\n    [arr[i], arr[index]] = [arr[index],arr[i]]\n&#125;\n</code></pre>\n<h2 id=\"改进版-1\"><a href=\"#改进版-1\" class=\"headerlink\" title=\"改进版\"></a>改进版</h2><pre><code class=\"javascript\">function selectSort (arr) &#123;\n  for (let i = 0, len_i = arr.length - 1; i &lt; len_i; i++) &#123;\n    let index = i\n    for (let j = i + 1, len_j = arr.length; j &lt; len_j; j++) &#123;\n      if (arr[index] &gt; arr[j]) &#123;\n        index = j\n      &#125;\n    &#125;\n    if (index !== i) &#123;\n      [arr[i], arr[index]] = [arr[index], arr[i]]\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<h1 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h1><h1 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h1><h1 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h1><h1 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h1><h1 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h1>",
            "tags": [
                "算法",
                "js",
                "面试",
                "算法"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/algorithm/concurrent-requests/",
            "url": "https://www.yexingcheng.com/algorithm/concurrent-requests/",
            "title": "并发请求",
            "date_published": "2022-11-13T17:54:00.855Z",
            "content_html": "<h1 id=\"并发请求：\"><a href=\"#并发请求：\" class=\"headerlink\" title=\"并发请求：\"></a>并发请求：</h1><p>给定一个url数组，每一项都是一个url地址，然后给出一个最大的并发请求数，直到所有请求发送完毕，然后把所有的返回结果归并到一个数组里面，并且顺序和url地址顺序相同</p>\n<p>首先，请求肯定是异步的，所以我们返回一个Promise,并且这个Promise一定是成功的，并且我们准备好一个返回数组，并且排除特殊情况</p>\n<pre><code class=\"js\">function concurRequest(urls,maxNum)&#123;\n    return new Promise(resolve=&gt;&#123;\n        if(urls.length===0)&#123;\n            reslove([])\n            return\n        &#125;\n    &#125;)\n        let result = []\n\n&#125;\n</code></pre>\n<p>每次我们取出一个url地址，然后发送请求，因为我们不用等待请求结果，所以可以看作是并发的</p>\n<pre><code class=\"js\">function concurRequest(urls,maxNum)&#123;\n    return new Promise(resolve=&gt;&#123;\n        if(urls.length===0)&#123;\n            reslove([])\n            return\n        &#125;\n        let result = []\n        let index = 0;//下一个请求的下标\n\n        function request()&#123;\n            const url = urls[index];\n            index++;\n            fetch(url)\n        &#125;\n\n    &#125;)\n&#125;\n</code></pre>\n<p>现在以及可以发送请求了，但是在他请求完了之后，不管是成功还是失败，我们都加入到返回数组中</p>\n<pre><code class=\"js\">function concurRequest(urls,maxNum)&#123;\n    return new Promise(resolve=&gt;&#123;\n        if(urls.length===0)&#123;\n            reslove([])\n            return\n        &#125;\n        let result = []\n        let index = 0;//下一个请求的下标\n\n        async function request()&#123;\n            const i = index;//保存请求url在urls数组中的位置\n            const url = urls[index];\n            index++;\n            try&#123;\n                const res  = await fetch(url)\n                result[i] = res\n            &#125;catch(e)&#123;\n                result[i] = e\n            &#125;\n\n        &#125;\n\n    &#125;)\n&#125;\n</code></pre>\n<p>当一个请求完成了，就要开始发送下一个请求了：</p>\n<pre><code class=\"js\">function concurRequest(urls,maxNum)&#123;\n    return new Promise(resolve=&gt;&#123;\n        if(urls.length===0)&#123;\n            reslove([])\n            return\n        &#125;\n        let result = []\n        let index = 0;//下一个请求的下标\n\n        async function request()&#123;\n\n            if(index==urls.length)return//发送次数到达最大就停止发送\n            const i = index;//保存请求url在urls数组中的位置\n            const url = urls[index];\n            index++;\n            try&#123;\n                const res  = await fetch(url)\n                result[i] = res\n            &#125;catch(e)&#123;\n                result[i] = e\n            &#125;finally&#123;\n                request()\n            &#125;\n\n        &#125;\n\n    &#125;)\n&#125;\n</code></pre>\n<p>最后要判断所有请求是否都完成了，我们每完成一次请求就记录一次数据</p>\n<pre><code class=\"js\">function concurRequest(urls,maxNum)&#123;\n    return new Promise(resolve=&gt;&#123;\n        if(urls.length===0)&#123;\n            reslove([])\n            return\n        &#125;\n        let result = []\n        let index = 0;//下一个请求的下标\n        let count = 0;//完成的请求数量\n        async function request()&#123;\n\n            if(index==urls.length)return//发送次数到达最大就停止发送\n            const i = index;//保存请求url在urls数组中的位置\n            const url = urls[index];\n            index++;\n            try&#123;\n                const res  = await fetch(url)\n                result[i] = res\n            &#125;catch(e)&#123;\n                result[i] = e\n            &#125;finally&#123;\n                count++\n                if(count===urls.length)&#123;\n                    resolve(result)\n                &#125;\n                request()\n            &#125;\n\n        &#125;\n    &#125;)\n&#125;\n</code></pre>\n<p>这样我们请求的函数就有了，但是要调用几次呢，就是调用最大并发数的次数：</p>\n<pre><code class=\"js\">function concurRequest(urls,maxNum)&#123;\n    return new Promise(resolve=&gt;&#123;\n        if(urls.length===0)&#123;\n            reslove([])\n            return\n        &#125;\n        let result = []\n        let index = 0;//下一个请求的下标\n        let count = 0;//完成的请求数量\n        async function request()&#123;\n\n            if(index==urls.length)return//发送次数到达最大就停止发送\n            const i = index;//保存请求url在urls数组中的位置\n            const url = urls[index];\n            index++;\n            try&#123;\n                const res  = await fetch(url)\n                result[i] = res\n            &#125;catch(e)&#123;\n                result[i] = e\n            &#125;finally&#123;\n                count++\n                if(count===urls.length)&#123;\n                    resolve(result)\n                &#125;\n                request()\n            &#125;\n\n        &#125;\n\n        let times = Math.min(urls.length,maxNum)\n\n        for(let i = 0; i &lt; times; i++)&#123;\n            request()\n        &#125;\n    &#125;)\n&#125;\n</code></pre>\n<p>到这里这道面试题就完成了</p>\n",
            "tags": [
                "算法",
                "js",
                "面试",
                "算法"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/data-structures/stack/",
            "url": "https://www.yexingcheng.com/data-structures/stack/",
            "title": "栈代码面试题",
            "date_published": "2022-11-12T13:27:30.117Z",
            "content_html": "<h1 id=\"使用临时堆栈对堆栈进行排序\"><a href=\"#使用临时堆栈对堆栈进行排序\" class=\"headerlink\" title=\"使用临时堆栈对堆栈进行排序\"></a>使用临时堆栈对堆栈进行排序</h1><p>给定一堆整数，使用另一个临时堆栈按升序对其进行排序。</p>\n<h2 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h2><blockquote>\n<p>输入 ：[34、3、31、98、92、23]<br>输出：[3、23、31、34、92、98]</p>\n<p>输入：[3、5、1、4、2、8]<br>输出：[1、2、3、4、5、8]</p>\n</blockquote>\n<h2 id=\"算法：\"><a href=\"#算法：\" class=\"headerlink\" title=\"算法：\"></a>算法：</h2><p>1、创建一个临时堆栈为tmpStack<br>2、虽然输入堆栈不为空，但请执行以下操作：</p>\n<ul>\n<li>从输入堆栈弹出一个元素，成为temp</li>\n<li>当临时堆栈不为空且临时堆栈顶部大于 temp 时， 临时堆栈中弹出并将其推送到输入堆栈</li>\n<li>将temp推入临时堆栈</li>\n</ul>\n<p>3、排序后的数字在tempStack</p>\n<h2 id=\"执行：\"><a href=\"#执行：\" class=\"headerlink\" title=\"执行：\"></a>执行：</h2><pre><code class=\"js\">function sortStack(input)&#123;\n\n    let tempStack = [];\n    while(input.length &gt; 0)&#123;\n\n        let temp = input.pop();\n\n    while(tempStack.length &gt; 0 &amp;&amp; tempStack[tempStack.length-1]&gt;temp)&#123;\n\n        input.push(tempStack[tempStack.length-1]);\n\n        tempStack.pop();\n    &#125;   \n\n    tempStack.push(temp);\n\n    &#125;\n    return tempStack;\n&#125;\n\n\nconst arr = [34, 3, 31, 98, 92, 23]\n\nconsole.log(sortStack(arr))\n</code></pre>\n<blockquote>\n<p>输入：[34, 3, 31, 98, 92, 23]</p>\n<p>取出的元素：23<br>输入：[34, 3, 31, 98, 92]<br>tmpStack：[23]</p>\n<p>取出的元素：92<br>输入：[34, 3, 31, 98]<br>tmpStack: [23, 92]</p>\n<p>取出元素: 98<br>输入: [34, 3, 31]<br>tmpStack: [23, 92, 98]</p>\n<p>取出元素: 31<br>输入: [34, 3, 98, 92]<br>tmpStack: [23, 31]</p>\n<p>取出元素: 92<br>输入: [34, 3, 98]<br>tmpStack: [23, 31, 92]</p>\n<p>取出元素: 98<br>输入: [34, 3]<br>tmpStack: [23, 31, 92 , 98]</p>\n<p>取出的元素：3<br>输入：[34, 98, 92, 31, 23]<br>tmpStack：[3]</p>\n<p>取出的元素：23<br>输入：[34, 98, 92, 31]<br>tmpStack: [3, 23]</p>\n<p>取出元素: 31<br>输入: [34, 98, 92]<br>tmpStack: [3, 23, 31]</p>\n<p>取出元素: 92<br>输入: [34, 98]<br>tmpStack: [3, 23, 31 , 92]</p>\n<p>取出的元素：98<br>输入：[34]<br>tmpStack：[3, 23, 31, 92, 98]</p>\n<p>取出的元素：34<br>输入：[98, 92]<br>tmpStack：[3, 23, 31, 34]</p>\n<p>元素取出：92<br>输入：[98]<br>tmpStack：[3,23,31,34,92]</p>\n<p>取出元素：98<br>输入：[]<br>tmpStack：[3,23,31,34,92,98]</p>\n<p>最终排序列表： [3、23、31、34、92、98]</p>\n</blockquote>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><blockquote>\n<p>98 92 34 31 23 3</p>\n</blockquote>\n<p><strong>时间复杂度：</strong> O(n 2 )其中 n 是给定堆栈中的整数总数。<br><strong>辅助空间：</strong> O(n)</p>\n",
            "tags": [
                "数据结构",
                "js",
                "stack"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/data-structures/array/",
            "url": "https://www.yexingcheng.com/data-structures/array/",
            "title": "数组代码面试题",
            "date_published": "2022-11-11T14:11:17.368Z",
            "content_html": "<h1 id=\"查找数组中最小和次小的元素\"><a href=\"#查找数组中最小和次小的元素\" class=\"headerlink\" title=\"查找数组中最小和次小的元素\"></a>查找数组中最小和次小的元素</h1><h2 id=\"实例：\"><a href=\"#实例：\" class=\"headerlink\" title=\"实例：\"></a>实例：</h2><pre><code>输入：arr[] = &#123;12, 13, 1, 10, 34, 1&#125;\n输出：最小元素是 1 \n     第二个最小的元素是 10\n</code></pre>\n<h3 id=\"方法1（简单方法）\"><a href=\"#方法1（简单方法）\" class=\"headerlink\" title=\"方法1（简单方法）\"></a>方法1（简单方法）</h3><p>一个简单的解决方案是按照升序对数组进行排序。排序数组中的前两个元素将是两个最小的元素</p>\n<pre><code class=\"js\">let arr = [111, 13, 25, 9, 34, 1];\n\narr.sort((a,b)=&gt;a-b)\n\nconsole.log(arr[0],arr[1]);\n</code></pre>\n<p>如果最小元素出现不止一次，那么我们将不得不使用循环来打印唯一的最小元素和次小元素。 </p>\n<p><strong>时间复杂度：</strong> O(N*logN)<br><strong>辅助空间：</strong> O(1)</p>\n<h3 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h3><p>更好的<strong>解决方案</strong>是扫描阵列两次。在第一次遍历中找到最小元素。设此元素为 x。在第二次遍历中，找到大于 x 的最小元素。</p>\n<p>使用这种方法，我们可以克服方法 1 的问题，即最小元素在数组中出现多次时出现的问题。<br>上述解决方案需要对输入数组进行两次遍历。 </p>\n",
            "tags": [
                "数据结构",
                "Array",
                "js"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/data-structures/main/",
            "url": "https://www.yexingcheng.com/data-structures/main/",
            "title": "面试需要了解的八个数据结构",
            "date_published": "2022-11-11T13:59:56.618Z",
            "content_html": "<p>1976 年，一个瑞士计算机科学家写一本书《Algorithms + Data Structures &#x3D; Programs》。即：算法 + 数据结构 &#x3D; 程序。40 多年过去了，这个等式依然成立。</p>\n<p>很多代码面试题都要求候选者深入理解数据结构，不管你来自大学计算机专业还是编程培训机构，也不管你有多少年编程经验。有时面试题会直接提到数据结构，比如“给我实现一个二叉树”，然而有时则不那么明显，比如“统计一下每个作者写的书的数量”。</p>\n<h1 id=\"什么是数据结构？\"><a href=\"#什么是数据结构？\" class=\"headerlink\" title=\"什么是数据结构？\"></a>什么是数据结构？</h1><p>数据结构是计算机存储、组织数据的方式。对于特定的数据结构(比如数组)，有些操作效率很高(读某个数组元素)，有些操作的效率很低(删除某个数组元素)。程序员的目标是为当前的问题选择最优的数据结构。</p>\n<h2 id=\"为什么我们需要数据结构\"><a href=\"#为什么我们需要数据结构\" class=\"headerlink\" title=\"为什么我们需要数据结构\"></a>为什么我们需要数据结构</h2><p>数据是程序的核心要素，因此数据结构的价值不言而喻。无论你在写什么程序，你都需要与数据打交道，比如员工工资、股票价格、杂货清单或者电话本。在不同场景下，数据需要以特定的方式存储，我们有不同的数据结构可以满足我们的需求。</p>\n<h1 id=\"8种常用的数据结构\"><a href=\"#8种常用的数据结构\" class=\"headerlink\" title=\"8种常用的数据结构\"></a>8种常用的数据结构</h1><p>1.数组<br>2.栈<br>3.队列<br>4.链表<br>5.图<br>6.树<br>7.前缀树<br>8.哈希表</p>\n<h2 id=\"1、数组\"><a href=\"#1、数组\" class=\"headerlink\" title=\"1、数组\"></a>1、数组</h2><p><strong>数组</strong>(Array)大概是最简单，也是最常用的数据结构了。其他数据结构，比如栈和队列都是由数组衍生出来的</p>\n<p>下面展示了一个数组，他有四个元素</p>\n<p><img data-src=\"/data-structures/main/image-20221111221359307.png\" alt=\"image-20221111221359307\"></p>\n<p>每一个元素的位置由数字编号，称为下标或者索引。大多数编程语言的第一个元素的下标为0。</p>\n<p>根据维度区分，有2种不同的数组：</p>\n<ul>\n<li>一维数组</li>\n<li>多维数组</li>\n</ul>\n<h3 id=\"数组的基本操作\"><a href=\"#数组的基本操作\" class=\"headerlink\" title=\"数组的基本操作\"></a>数组的基本操作</h3><ul>\n<li>Insert - 在某个索引处插入元素</li>\n<li>Get - 读取某个索引处的元素</li>\n<li>Delete - 删除某个索引处的元素</li>\n<li>Size - 获取数组的长度</li>\n</ul>\n<p><a href=\"/data-structures/array/\">常见的数组代码面试题</a></p>\n<h2 id=\"2-栈\"><a href=\"#2-栈\" class=\"headerlink\" title=\"2. 栈\"></a>2. 栈</h2><p>撤回，即 Ctrl+Z，是我们最常见的操作之一，大多数应用都会支持这个功能。你知道它是怎么实现的吗？答案是这样的：把之前的应用状态(限制个数)保存到内存中，最近的状态放到第一个。这时，我们需要栈(stack)来实现这个功能。</p>\n<p>栈中的元素采用 LIFO (Last In First Out)，即后进先出。</p>\n<p>下图的栈有 3 个元素，3 在最上面，因此它会被第一个移除</p>\n<p><img data-src=\"/data-structures/main/image-20221112212908111.png\" alt=\"image-20221112212908111\"></p>\n<p>栈的基本操作 </p>\n<p>栈的基本操作</p>\n<ul>\n<li>Push —  在栈的最上方插入元素</li>\n<li>Pop — 返回栈最上方的元素，并将其删除</li>\n<li>isEmpty —  查询栈是否为空</li>\n<li>Top —  返回栈最上方的元素，并不删除</li>\n</ul>\n<p><a href=\"/data-structures/stack/\">常见的数组代码面试题</a></p>\n",
            "tags": [
                "数据结构",
                "js"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/JavaScript/wrapper-object/",
            "url": "https://www.yexingcheng.com/JavaScript/wrapper-object/",
            "title": "js中包装对象",
            "date_published": "2022-11-08T13:08:22.631Z",
            "content_html": "<h1 id=\"先来看定义\"><a href=\"#先来看定义\" class=\"headerlink\" title=\"先来看定义\"></a>先来看定义</h1><p>对象是javascript语言最主要的数据类型，三种原始类型的值————Number,string,boolean在一定条件下，也会自动转为对象，也就是原始类型的<code>包装对象</code>(wrapper)</p>\n<p>所谓<code>包装对象</code> 指的是Number,string,boolean分别对应的Number,String,Boolean三个原生对象。这三个原生对象可以把原始类型的值变成(包装成)对象</p>\n<pre><code class=\"js\">var v1 = new Number(123);\nvar v2 = new String(&#39;abc&#39;);\nvar v3 = new Boolean(true);\n\ntypeof v1 // &quot;object&quot;\ntypeof v2 // &quot;object&quot;\ntypeof v3 // &quot;object&quot;\n\nv1 === 123 // false\nv2 === &#39;abc&#39; // false\nv3 === true // false\n</code></pre>\n<p>面代码中，基于原始类型的值，生成了三个对应的包装对象。可以看到，v1、v2、v3都是对象，且与对应的简单类型值不相等。</p>\n<p>包装对象的设计目的，首先是使得“对象”这种类型可以覆盖 JavaScript 所有的值，整门语言有一个通用的数据模型，其次是使得原始类型的值也有办法调用自己的方法。</p>\n<p><code>Number</code>、<code>String</code>和<code>Boolean</code>这三个原生对象，如果不作为构造函数调用（即调用时不加new），而是作为普通函数调用，常常用于将任意类型的值转为数值、字符串和布尔值。</p>\n<pre><code class=\"js\">// 字符串转为数值\nNumber(&#39;123&#39;) // 123\n\n// 数值转为字符串\nString(123) // &quot;123&quot;\n\n// 数值转为布尔值\nBoolean(123) // true\n</code></pre>\n<p>总结一下，这三个对象作为构造函数使用（带有new）时，可以将原始类型的值转为对象；作为普通函数使用时（不带有new），可以将任意类型的值，转为原始类型的值。</p>\n<h1 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h1><p>三种包装对象各自提供了许多实例方法。这里介绍两种它们共同具有、从Object对象继承的方法:<code>valueOf()</code>和<code>toString()</code></p>\n<ul>\n<li>valueOf()<br><code>valueOf()</code>方法返回包装对象实例对应的原始类型的值。</li>\n</ul>\n<pre><code class=\"js\">new Number(123).valueOf()  // 123\nnew String(&#39;abc&#39;).valueOf() // &quot;abc&quot;\nnew Boolean(true).valueOf() // true\n</code></pre>\n<ul>\n<li>toString()<br><code>toString()</code>方法返回对应的字符串形式</li>\n</ul>\n<pre><code class=\"js\">new Number(123).toString() // &quot;123&quot;\nnew String(&#39;abc&#39;).toString() // &quot;abc&quot;\nnew Boolean(true).toString() // &quot;true&quot;\n</code></pre>\n<h2 id=\"原始类型与实例对象的自动转换\"><a href=\"#原始类型与实例对象的自动转换\" class=\"headerlink\" title=\"原始类型与实例对象的自动转换\"></a>原始类型与实例对象的自动转换</h2><p>某些场合，原始类型的值会自动当作包装对象调用，即调用包装对象的属性和方法。这时，JavaScript 引擎会自动将原始类型的值转为包装对象实例，并在使用后立刻销毁实例。</p>\n<p>比如，字符串可以调用<code>length</code>属性，返回字符串的长度。</p>\n<pre><code class=\"js\">&#39;abc&#39;.length // 3\n</code></pre>\n<p>上面代码中，<code>abc</code>是一个字符串，本身不是对象，不能调用<code>length</code>属性。JavaScript 引擎自动将其转为包装对象，在这个对象上调用<code>length</code>属性。调用结束后，这个临时对象就会被销毁。这就叫原始类型与实例对象的自动转换</p>\n<pre><code class=\"js\">var str = &#39;abc&#39;;\nstr.length // 3\n\n// 等同于\nvar strObj = new String(str)\n// String &#123;\n//   0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;, length: 3, [[PrimitiveValue]]: &quot;abc&quot;\n// &#125;\nstrObj.length // 3\n</code></pre>\n<p>自动转换生成的包装对象是只读的，无法修改。所以，字符串无法添加新属性。</p>\n<pre><code class=\"js\">var s = &#39;Hello World&#39;;\ns.x = 123;\ns.x // undefined\n</code></pre>\n<p>另一方面，调用结束后，包装对象实例会自动销毁。这意味着，下一次调用字符串的属性时，实际是调用一个新生成的对象，而不是上一次调用时生成的那个对象，所以取不到赋值在上一个对象的属性。如果要为字符串添加属性，只有在它的原型对象String.prototype上定义。</p>\n<h2 id=\"自定义方法\"><a href=\"#自定义方法\" class=\"headerlink\" title=\"自定义方法\"></a>自定义方法</h2><p>除了原生的实例方法，包装对象还可以自定义方法和属性，供原始类型的值直接调用。</p>\n<p>比如，我们可以新增一个double方法，使得字符串和数字翻倍。</p>\n<pre><code class=\"js\">String.prototype.double = function () &#123;\n  return this.valueOf() + this.valueOf();\n&#125;;\n\n&#39;abc&#39;.double() // abcabc\n\nNumber.prototype.double = function () &#123;\n  return this.valueOf() + this.valueOf();\n&#125;;\n\n(123).double() // 246\n</code></pre>\n<p>上面代码在String和Number这两个对象的原型上面，分别自定义了一个方法，从而可以在所有实例对象上调用。注意，最后的123外面必须要加上圆括号，否则后面的点运算符（.）会被解释成小数点。</p>\n<h1 id=\"Boolean对象\"><a href=\"#Boolean对象\" class=\"headerlink\" title=\"Boolean对象\"></a>Boolean对象</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述:\"></a>概述:</h2><p>Boolean对象是 JavaScript 的三个包装对象之一。作为构造函数，它主要用于生成布尔值的包装对象实例。</p>\n<pre><code class=\"js\">var b = new Boolean(true);\n\ntypeof b // &quot;object&quot;\nb.valueOf() // true\n</code></pre>\n<p>上面代码的变量b是一个<code>Boolean</code>对象的实例，它的类型是对象，值为布尔值<code>true</code>。</p>\n<p>注意，<code>false</code>对应的包装对象实例，布尔运算结果也是<code>true</code>。</p>\n<pre><code class=\"js\">if (new Boolean(false)) &#123;\n  console.log(&#39;true&#39;);\n&#125; // true\n\nif (new Boolean(false).valueOf()) &#123;\n  console.log(&#39;true&#39;);\n&#125; // 无输出\n</code></pre>\n<p>上面代码的第一个例子之所以得到true，是因为false对应的包装对象实例是一个对象，进行逻辑运算时，被自动转化成布尔值true（因为所有对象对应的布尔值都是true）。而实例的valueOf方法，则返回实例对应的原始值，本例为false。</p>\n<h2 id=\"Boolean-函数的类型转换作用\"><a href=\"#Boolean-函数的类型转换作用\" class=\"headerlink\" title=\"Boolean 函数的类型转换作用\"></a>Boolean 函数的类型转换作用</h2><p><code>Boolean</code>对象除了可以作为构造函数，还可以单独使用，将任意值转为布尔值。这时<code>Boolean</code>就是一个单纯的工具方法。</p>\n<pre><code class=\"js\">Boolean(undefined) // false\nBoolean(null) // false\nBoolean(0) // false\nBoolean(&#39;&#39;) // false\nBoolean(NaN) // false\n\nBoolean(1) // true\nBoolean(&#39;false&#39;) // true\nBoolean([]) // true\nBoolean(&#123;&#125;) // true\nBoolean(function () &#123;&#125;) // true\nBoolean(/foo/) // true\n</code></pre>\n<p>上面代码中几种得到true的情况，都值得认真记住。</p>\n<p>顺便提一下，使用双重的否运算符（!）也可以将任意值转为对应的布尔值。</p>\n<pre><code class=\"js\">!!undefined // false\n!!null // false\n!!0 // false\n!!&#39;&#39; // false\n!!NaN // false\n\n!!1 // true\n!!&#39;false&#39; // true\n!![] // true\n!!&#123;&#125; // true\n!!function()&#123;&#125; // true\n!!/foo/ // true\n</code></pre>\n<p>最后，对于一些特殊值，<code>Boolean</code>对象前面加不加<code>new</code>，会得到完全相反的结果，必须小心。</p>\n<pre><code class=\"js\">if (Boolean(false)) &#123;\n  console.log(&#39;true&#39;);\n&#125; // 无输出\n\nif (new Boolean(false)) &#123;\n  console.log(&#39;true&#39;);\n&#125; // true\n\nif (Boolean(null)) &#123;\n  console.log(&#39;true&#39;);\n&#125; // 无输出\n\nif (new Boolean(null)) &#123;\n  console.log(&#39;true&#39;);\n&#125; // true\n</code></pre>\n<h1 id=\"Number-对象\"><a href=\"#Number-对象\" class=\"headerlink\" title=\"Number 对象\"></a>Number 对象</h1><h2 id=\"概述-1\"><a href=\"#概述-1\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><code>Number</code>对象是数值对应的包装对象，可以作为构造函数使用，也可以作为工具函数使用。</p>\n<p>作为构造函数时，它用于生成值为数值的对象。</p>\n<pre><code class=\"js\">var n = new Number(1);\ntypeof n // &quot;object&quot;\n</code></pre>\n<p>上面代码中，<code>Number</code>对象作为构造函数使用，返回一个值为1的对象。</p>\n<p>作为工具函数时，它可以将任何类型的值转为数值。</p>\n<pre><code class=\"js\">Number(true) // 1\n</code></pre>\n<h2 id=\"静态属性\"><a href=\"#静态属性\" class=\"headerlink\" title=\"静态属性\"></a>静态属性</h2><p><code>Number</code>对象拥有以下一些静态属性（即直接定义在<code>Number</code>对象上的属性，而不是定义在实例上的属性）。</p>\n<ul>\n<li><code>Number.POSITIVE_INFINITY</code>：正的无限，指向Infinity。</li>\n<li><code>Number.NEGATIVE_INFINITY</code>：负的无限，指向-Infinity。</li>\n<li><code>Number.NaN</code>：表示非数值，指向NaN。</li>\n<li><code>Number.MIN_VALUE</code>：表示最小的正数（即最接近0的正数，在64位浮点数体系中为5e-324），相应- 的，最接近0的负数为-<code>Number.MIN_VALUE</code>。</li>\n<li><code>Number.MAX_SAFE_INTEGER</code>：表示能够精确表示的最大整数，即9007199254740991。</li>\n<li><code>Number.MIN_SAFE_INTEGER</code>：表示能够精确表示的最小整数，即-9007199254740991。</li>\n</ul>\n<p>实例方法<br><code>Number</code>对象有4个实例方法，都跟将数值转换成指定格式有关。</p>\n<p><strong>Number.prototype.toString()</strong><br><code>Numbe</code>r对象部署了自己的<code>toString</code>方法，用来将一个数值转为字符串形式。</p>\n<pre><code class=\"js\">(10).toString() // &quot;10&quot;\n</code></pre>\n<p><code>toString</code>方法可以接受一个参数，表示输出的进制。如果省略这个参数，默认将数值先转为十进制，再输出字符串；否则，就根据参数指定的进制，将一个数字转化成某个进制的字符串。</p>\n<pre><code class=\"js\">(10).toString(2) // &quot;1010&quot;\n(10).toString(8) // &quot;12&quot;\n(10).toString(16) // &quot;a&quot;\n</code></pre>\n<p>上面代码中，10一定要放在括号里，这样表明后面的点表示调用对象属性。如果不加括号，这个点会被 JavaScript 引擎解释成小数点，从而报错。</p>\n<pre><code class=\"js\">10.toString(2)\n// SyntaxError: Unexpected token ILLEGAL\n</code></pre>\n<p>只要能够让 JavaScript 引擎不混淆小数点和对象的点运算符，各种写法都能用。除了为10加上括号，还可以在<code>10</code>后面加两个点，JavaScript 会把第一个点理解成小数点（即10.0），把第二个点理解成调用对象属性，从而得到正确结果。</p>\n<pre><code class=\"js\">10..toString(2) // &quot;1010&quot;\n\n// 其他方法还包括\n10 .toString(2) // &quot;1010&quot;\n10.0.toString(2) // &quot;1010&quot;\n</code></pre>\n<p>这实际上意味着，可以直接对一个小数使用<code>toString</code>方法。</p>\n<pre><code class=\"js\">10.5.toString() // &quot;10.5&quot;\n10.5.toString(2) // &quot;1010.1&quot;\n10.5.toString(8) // &quot;12.4&quot;\n10.5.toString(16) // &quot;a.8&quot;\n</code></pre>\n<p>通过方括号运算符也可以调用<code>toString</code>方法。</p>\n<pre><code class=\"js\">10[&#39;toString&#39;](2) // &quot;1010&quot;\n</code></pre>\n<p><code>toString</code>方法只能将十进制的数，转为其他进制的字符串。如果要将其他进制的数，转回十进制，需要使用<code>parseInt</code>方法。</p>\n<p><strong>Number.prototype.toFixed()</strong></p>\n<p>toPrecision方法用于将一个数转为指定位数的有效数字。</p>\n<pre><code class=\"js\">(12.34).toPrecision(1) // &quot;1e+1&quot;\n(12.34).toPrecision(2) // &quot;12&quot;\n(12.34).toPrecision(3) // &quot;12.3&quot;\n(12.34).toPrecision(4) // &quot;12.34&quot;\n(12.34).toPrecision(5) // &quot;12.340&quot;\n</code></pre>\n<p><code>toPrecision</code>方法的参数为有效数字的位数，范围是1到21，超出这个范围会抛出<code>RangeError</code>错误。</p>\n<p><code>toPrecision</code>方法用于四舍五入时不太可靠，跟浮点数不是精确储存有关。</p>\n<pre><code class=\"js\">(12.35).toPrecision(3) // &quot;12.3&quot;\n(12.25).toPrecision(3) // &quot;12.3&quot;\n(12.15).toPrecision(3) // &quot;12.2&quot;\n(12.45).toPrecision(3) // &quot;12.4&quot;\n</code></pre>\n<h1 id=\"String-对象\"><a href=\"#String-对象\" class=\"headerlink\" title=\"String 对象\"></a>String 对象</h1><h2 id=\"概述-2\"><a href=\"#概述-2\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>String对象是 JavaScript 原生提供的三个包装对象之一，用来生成字符串对象。</p>\n<pre><code class=\"js\">var s1 = &#39;abc&#39;;\nvar s2 = new String(&#39;abc&#39;);\n\ntypeof s1 // &quot;string&quot;\ntypeof s2 // &quot;object&quot;\n\ns2.valueOf() // &quot;abc&quot;\n</code></pre>\n<p>字符串对象是一个类似数组的对象（很像数组，但不是数组）。</p>\n<pre><code class=\"js\">new String(&#39;abc&#39;)\n// String &#123;0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;, length: 3&#125;\n\n(new String(&#39;abc&#39;))[1] // &quot;b&quot;\n</code></pre>\n<h2 id=\"实例属性\"><a href=\"#实例属性\" class=\"headerlink\" title=\"实例属性\"></a>实例属性</h2><p><strong>String.prototype.length</strong><br>字符串实例的length属性返回字符串的长度。</p>\n<pre><code class=\"js\">&#39;abc&#39;.length // 3\n</code></pre>\n<h2 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法:\"></a>静态方法:</h2><p><strong>String.prototype.match()</strong></p>\n<p><code>match</code>方法用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回<code>null</code>。</p>\n<pre><code class=\"js\">&#39;cat, bat, sat, fat&#39;.match(&#39;at&#39;) // [&quot;at&quot;]\n&#39;cat, bat, sat, fat&#39;.match(&#39;xt&#39;) // null\n</code></pre>\n<p>返回的数组还有<code>index</code>属性和<code>input</code>属性，分别表示匹配字符串开始的位置和原始字符串。</p>\n<pre><code class=\"js\">var matches = &#39;cat, bat, sat, fat&#39;.match(&#39;at&#39;);\nmatches.index // 1\nmatches.input // &quot;cat, bat, sat, fat&quot;\nmatch方法还可以使用正则表达式作为参数。\n</code></pre>\n<p><strong>String.prototype.localeCompare()</strong></p>\n<p><code>localeCompare</code>方法用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。</p>\n<pre><code class=\"js\">&#39;apple&#39;.localeCompare(&#39;banana&#39;) // -1\n&#39;apple&#39;.localeCompare(&#39;apple&#39;) // 0\n</code></pre>\n<p>该方法的最大特点，就是会考虑自然语言的顺序。举例来说，正常情况下，大写的英文字母小于小写字母。</p>\n<pre><code class=\"js\">&#39;B&#39; &gt; &#39;a&#39; // false\n</code></pre>\n<p>上面代码中，字母B小于字母a。因为 JavaScript 采用的是 Unicode 码点比较，B的码点是<code>66</code>，而a的码点是<code>97</code>。</p>\n<p>但是，<code>localeCompare</code>方法会考虑自然语言的排序情况，将B排在a的前面。</p>\n<pre><code class=\"js\">&#39;B&#39;.localeCompare(&#39;a&#39;) // 1\n</code></pre>\n<p>上面代码中，<code>localeCompare</code>方法返回整数1，表示B较大。</p>\n<p><code>localeCompare</code>还可以有第二个参数，指定所使用的语言（默认是英语），然后根据该语言的规则进行比较。</p>\n<pre><code class=\"js\">&#39;ä&#39;.localeCompare(&#39;z&#39;, &#39;de&#39;) // -1\n&#39;ä&#39;.localeCompare(&#39;z&#39;, &#39;sv&#39;) // 1\n</code></pre>\n<p>上面代码中，de表示德语，sv表示瑞典语。德语中，ä小于z，所以返回-1；瑞典语中，ä大于z，所以返回1。</p>\n",
            "tags": [
                "JavaScript",
                "js"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/JavaScript/Variable-recycling/",
            "url": "https://www.yexingcheng.com/JavaScript/Variable-recycling/",
            "title": "JS变量回收机制",
            "date_published": "2022-11-06T16:09:01.945Z",
            "content_html": "<h1 id=\"先看题目\"><a href=\"#先看题目\" class=\"headerlink\" title=\"先看题目:\"></a>先看题目:</h1><ol>\n<li><p>下列代码有几个变量没有被回收？<code>点我查看</code> [3]{.gap}。 {.quiz .fill}</p>\n<blockquote>\n<p>即i和add,局部变量有一个i，因为局部变量被另一个作用域引用，所以局部变量i也不回收</p>\n</blockquote>\n</li>\n</ol>\n<pre><code class=\"js\">var i = 1;\nvar i = 2;\nvar add = function() &#123;\n    var i = 0;\n    return function()\n&#123;\n        i++;\n        console.log(i);\n    &#125;\n&#125;();\nadd();\n</code></pre>\n<h1 id=\"变量回收原则\"><a href=\"#变量回收原则\" class=\"headerlink\" title=\"变量回收原则:\"></a>变量回收原则:</h1><ul>\n<li>全局变量不会回收</li>\n<li>局部变量会被回收,也就是函数一旦运行完后，函数内部的东西都会被销毁</li>\n<li>只要被另外一个作用域引用就不会被回收</li>\n</ul>\n<pre><code class=\"js\">var i = 1;   // 全局变量不会被回收\nvar i = 2;   // 这里重复声明变量i,因此var声明被忽略，只是把i赋值为2\nvar add = function() &#123;  // 全局变量不会被回收\n    var i = 0;  // 局部变量\n    return function() &#123;\n        i++;\n        console.log(i); // 被另一个作用域引用导致不会被回收\n    &#125;\n&#125;();\nadd();\n</code></pre>\n<h1 id=\"JS的垃圾回收机制\"><a href=\"#JS的垃圾回收机制\" class=\"headerlink\" title=\"JS的垃圾回收机制\"></a>JS的垃圾回收机制</h1><h2 id=\"标记清除\"><a href=\"#标记清除\" class=\"headerlink\" title=\"标记清除\"></a>标记清除</h2><blockquote>\n<p>js中最常见的垃圾回收方式是标记清除<br>标记清除就是从根部出发，看是否能达到某个对象，如果能达到则认定这个对象还被需要，如果无法达到，则释放它。<br>这个过程大致分为三步</p>\n</blockquote>\n<ul>\n<li>垃圾回收器创建roots列表,roots通常是代码中保留引用的全局变量，在js中，我们一般认定全局变量window作为root,也就是所谓的跟部</li>\n<li>从根部出发检查所有的roots,所有的children也会被递归检查，能从root到达的都会被标记为active</li>\n<li>未被标记为active的数据被认定为不再需要，垃圾回收器开始释放他们</li>\n</ul>\n<p>注意:<br>当一个对象<code>零引用</code>时，我们从根部<code>一定无法到达</code>。<br>但反过来，从<code>根部无法到达</code>的<code>不一定</code>是严格意义上的零引用，比如循环引用，所以标记清除要<code>更优于引用计数</code>。</p>\n<h2 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h2><p>工作原理:工作原理：跟踪记录每个值被引用的次数。</p>\n<h2 id=\"什么情况会引起内存泄漏-无法释放已经不使用的内存\"><a href=\"#什么情况会引起内存泄漏-无法释放已经不使用的内存\" class=\"headerlink\" title=\"什么情况会引起内存泄漏(无法释放已经不使用的内存)?\"></a>什么情况会引起内存泄漏(无法释放已经不使用的内存)?</h2><blockquote>\n<p>虽然有垃圾回收机制但是我们编写代码操作不当还是会造成内存泄漏。</p>\n</blockquote>\n<ul>\n<li>1、意外的全局变量引起的内存泄漏。</li>\n</ul>\n<p>原因：全局变量，不会被回收。<br>解决：使用严格模式避免。</p>\n<ul>\n<li>2、闭包引起的内存泄漏</li>\n</ul>\n<p>原因：闭包可以维持函数内局部变量，使其得不到释放。<br>解决：将事件处理函数定义在外部，解除闭包,或者在定义事件处理函数的外部函数中，删除对dom的引用。</p>\n<ul>\n<li>3、没有清理的DOM元素引用</li>\n</ul>\n<p>原因：虽然别的地方删除了，但是对象中还存在对dom的引用<br>解决：手动删除。</p>\n<ul>\n<li>4、被遗忘的定时器或者回调</li>\n</ul>\n<p>原因：定时器中有dom的引用，即使dom删除了，但是定时器还在，所以内存中还是有这个dom。<br>解决：手动删除定时器和dom。</p>\n<ul>\n<li>5、子元素存在引用引起的内存泄漏</li>\n</ul>\n<p>原因：div中的ul li 得到这个div，会间接引用某个得到的li，那么此时因为div间接引用li，即使li被清空，也还是在内存中，并且只要li不被删除，他的父元素都不会被删除。<br>解决：手动删除清空。</p>\n",
            "tags": [
                "JavaScript",
                "js"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/algorithm/toTree/",
            "url": "https://www.yexingcheng.com/algorithm/toTree/",
            "title": "扁平数据结构转tree",
            "date_published": "2022-11-04T02:11:00.788Z",
            "content_html": "<h1 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h1><p>首先来看下题目:打平的数据内容如下：</p>\n<pre><code class=\"javascript\">let arr = [\n    &#123;id: 1, name: &#39;部门1&#39;, pid: 0&#125;,\n    &#123;id: 2, name: &#39;部门2&#39;, pid: 1&#125;,\n    &#123;id: 3, name: &#39;部门3&#39;, pid: 1&#125;,\n    &#123;id: 4, name: &#39;部门4&#39;, pid: 3&#125;,\n    &#123;id: 5, name: &#39;部门5&#39;, pid: 4&#125;,\n]\n</code></pre>\n<p>我们想要的输出结果如下:</p>\n<pre><code class=\"json\">[\n    &#123;\n        &quot;id&quot;: 1,\n        &quot;name&quot;: &quot;部门1&quot;,\n        &quot;pid&quot;: 0,\n        &quot;children&quot;: [\n            &#123;\n                &quot;id&quot;: 2,\n                &quot;name&quot;: &quot;部门2&quot;,\n                &quot;pid&quot;: 1,\n                &quot;children&quot;: []\n            &#125;,\n            &#123;\n                &quot;id&quot;: 3,\n                &quot;name&quot;: &quot;部门3&quot;,\n                &quot;pid&quot;: 1,\n                &quot;children&quot;: [\n                    // 结果 ,,,\n                ]\n            &#125;\n        ]\n    &#125;\n]\n</code></pre>\n<p>首先我们要了解一个概念，衡量一个算法的好坏，主要看算法的时间复杂度和空间复杂度</p>\n<blockquote>\n<p>时间复杂度的计算并不是计算程序具体运行的时间，而是算法执行语句的次数。 随着n的不断增大，时间复杂度不断增大，算法花费时间越多。</p>\n</blockquote>\n<h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><h3 id=\"计算方法\"><a href=\"#计算方法\" class=\"headerlink\" title=\"计算方法\"></a>计算方法</h3><ul>\n<li>选取相对增长最高的项</li>\n<li>最高项系数是都化为1</li>\n<li>若是常数的话用O(1)表示 举个例子：如f(n)&#x3D;3*n^4+3n+300 则 O(n)&#x3D;n^4</li>\n</ul>\n<p>通常我们计算时间复杂度都是计算最坏情况。计算时间复杂度的要注意的几个点</p>\n<ul>\n<li>如果算法的执行时间不随n的增加而增长，假如算法中有上千条语句，执行时间也不过是一个较大的常数。此类算法的时间复杂度是O(1)。 举例如下：代码执行100次，是一个常数，复杂度也是O(1)</li>\n</ul>\n<pre><code class=\"js\">    let x = 1;\n    while (x &lt;100) &#123;\n     x++;\n    &#125;\n</code></pre>\n<ul>\n<li>有多个循环语句时候，算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的方法决定的。举例如下：在下面for循环当中，外层循环每执行一次，内层循环要执行n次，执行次数是根据n所决定的，时间复杂度是O(n^2)。</li>\n</ul>\n<pre><code class=\"js\">  for (i = 0; i &lt; n; i++)&#123;\n         for (j = 0; j &lt; n; j++) &#123;\n             // ...code\n         &#125;\n     &#125;\n</code></pre>\n<ul>\n<li>循环不仅与n有关，还与执行循环判断条件有关。举例如下：在代码中，如果arr[i]不等于1的话，时间复杂度是O(n)。如果arr[i]等于1的话，循环不执行，时间复杂度是O(0)。</li>\n</ul>\n<pre><code class=\"js\">    for(var i = 0; i&lt;n &amp;&amp; arr[i] !=1; i++) &#123;\n    // ...code\n    &#125;\n</code></pre>\n<h2 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h2><blockquote>\n<p>空间复杂度是对一个算法在运行过程中临时占用存储空间的大小。</p>\n</blockquote>\n<h3 id=\"计算方法-1\"><a href=\"#计算方法-1\" class=\"headerlink\" title=\"计算方法\"></a>计算方法</h3><p>1、 忽略常数，用O(1)表示</p>\n<p>2、 递归算法的空间复杂度 &#x3D; （递归深度n）*(每次递归所要的辅助空间)</p>\n<p>计算空间复杂度的简单几点</p>\n<ul>\n<li>仅仅只复制单个变量，空间复杂度为O(1)。 以下例子空间复杂度为O(1)</li>\n</ul>\n<pre><code class=\"js\">   let a = 1;\n   let b = 2;\n   let c = 3;\n   console.log(&#39;输出a,b,c&#39;, a, b, c);\n</code></pre>\n<ul>\n<li>递归实现，调用fun函数，每次都创建一个变量K，调用n次，空间复杂度O(n*1) &#x3D; O(n)</li>\n</ul>\n<pre><code class=\"js\">    function fun(n) &#123;\n       let k = 10;\n       if (n == k) &#123;\n           return n;\n       &#125; else &#123;\n           return fun(++n)\n       &#125;\n    &#125;\n</code></pre>\n<h1 id=\"不考虑性能实现，递归遍历查找\"><a href=\"#不考虑性能实现，递归遍历查找\" class=\"headerlink\" title=\"不考虑性能实现，递归遍历查找\"></a>不考虑性能实现，递归遍历查找</h1>",
            "tags": [
                "算法",
                "js",
                "面试",
                "算法"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/JavaScript/Array.Methods/",
            "url": "https://www.yexingcheng.com/JavaScript/Array.Methods/",
            "title": "JS中数组方法总结",
            "date_published": "2022-11-03T16:00:00.000Z",
            "content_html": "<h1 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h1><p>**<code>concat()</code>**此方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><p>一个或多个数组</p>\n<h2 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h2><p>一个新数组</p>\n<pre><code class=\"js\">const array1 = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];\nconst array2 = [&#39;d&#39;, &#39;e&#39;, &#39;f&#39;];\nconst array3 = array1.concat(array2);\n\nconsole.log(array3);\n// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]\n</code></pre>\n<h1 id=\"copyWithin\"><a href=\"#copyWithin\" class=\"headerlink\" title=\"copyWithin()\"></a>copyWithin()</h1><p><strong><code>copyWithin()</code></strong> 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。</p>\n<pre><code class=\"js\">copyWithin(target, start, end)\n</code></pre>\n<h2 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h2><ul>\n<li><p><code>target</code></p>\n<p>0 为基底的索引，复制序列到该位置。如果是负数，<code>target</code> 将从末尾开始计算。如果 <code>target</code> 大于等于 <code>arr.length</code>，将不会发生拷贝。如果 <code>target</code> 在 <code>start</code> 之后，复制的序列将被修改以符合 <code>arr.length</code>。</p>\n</li>\n<li><p><code>start</code></p>\n<p>0 为基底的索引，开始复制元素的起始位置。如果是负数，<code>start</code> 将从末尾开始计算。如果 <code>start</code> 被忽略，<code>copyWithin</code> 将会从 0 开始复制。</p>\n</li>\n<li><p><code>end</code></p>\n<p>0 为基底的索引，开始复制元素的结束位置。<code>copyWithin</code> 将会拷贝到该位置，但不包括 <code>end</code> 这个位置的元素。如果是负数， <code>end</code> 将从末尾开始计算。如果 <code>end</code> 被忽略，<code>copyWithin</code> 方法将会一直复制至数组结尾（默认为 <code>arr.length</code>）。</p>\n</li>\n</ul>\n<h2 id=\"返回值-1\"><a href=\"#返回值-1\" class=\"headerlink\" title=\"返回值 :\"></a>返回值 :</h2><p>改变后的数组。</p>\n<pre><code class=\"js\">[1, 2, 3, 4, 5].copyWithin(-2)\n// [1, 2, 3, 1, 2]\n\n[1, 2, 3, 4, 5].copyWithin(0, 3)\n// [4, 5, 3, 4, 5]\n\n[1, 2, 3, 4, 5].copyWithin(-2, -3, -1)\n// [1, 2, 3, 3, 4]\n</code></pre>\n<h1 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h1><p><strong><code>filter()</code></strong> 方法创建给定数组一部分的浅拷贝 ,其包含通过所提供函数实现的测试的所有元素。</p>\n<pre><code class=\"js\">// 箭头函数\nfilter((element) =&gt; &#123; /* … */ &#125; )\nfilter((element, index) =&gt; &#123; /* … */ &#125; )\nfilter((element, index, array) =&gt; &#123; /* … */ &#125; )\n\n// 回调函数\nfilter(callbackFn)\nfilter(callbackFn, thisArg)\n\n// 内联回调函数\nfilter(function(element) &#123; /* … */ &#125;)\nfilter(function(element, index) &#123; /* … */ &#125;)\nfilter(function(element, index, array)&#123; /* … */ &#125;)\nfilter(function(element, index, array) &#123; /* … */ &#125;, thisArg)\n</code></pre>\n<h2 id=\"参数：\"><a href=\"#参数：\" class=\"headerlink\" title=\"参数：\"></a>参数：</h2><pre><code>callbackFn\n</code></pre>\n<p>用来测试数组中每个元素的函数。返回 <code>true</code> 表示该元素通过测试，保留该元素，<code>false</code> 则不保留。它接受以下三个参数：</p>\n<ul>\n<li><p><code>element</code></p>\n<p>数组中当前正在处理的元素。</p>\n</li>\n<li><p><code>index</code></p>\n<p>正在处理的元素在数组中的索引。</p>\n</li>\n<li><p><code>array</code></p>\n<p>调用了 <code>filter()</code> 的数组本身。</p>\n</li>\n</ul>\n<p><code>thisArg</code>可选</p>\n<p>执行 <code>callbackFn</code> 时，用于 <code>this</code> 的值。</p>\n<h2 id=\"返回值-2\"><a href=\"#返回值-2\" class=\"headerlink\" title=\"返回值\"></a>返回值</h2><p>​\t一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组。</p>\n<h1 id=\"flat\"><a href=\"#flat\" class=\"headerlink\" title=\"flat()\"></a>flat()</h1><p><strong><code>flat()</code></strong> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p>\n<pre><code class=\"js\">const arr1 = [0, 1, 2, [3, 4]];\n\nconsole.log(arr1.flat());\n// expected output: [0, 1, 2, 3, 4]\n\nconst arr2 = [0, 1, 2, [[[3, 4]]]];\n\nconsole.log(arr2.flat(2));\n// expected output: [0, 1, 2, [3, 4]]\n</code></pre>\n<h2 id=\"参数-2\"><a href=\"#参数-2\" class=\"headerlink\" title=\"参数\"></a>参数</h2><ul>\n<li><p><code>depth</code> 可选</p>\n<p>指定要提取嵌套数组的结构深度，默认值为 1。</p>\n</li>\n</ul>\n<h2 id=\"返回值-3\"><a href=\"#返回值-3\" class=\"headerlink\" title=\"返回值\"></a>返回值</h2><p>一个包含将数组与子数组中所有元素的新数组。</p>\n<h1 id=\"flatMap\"><a href=\"#flatMap\" class=\"headerlink\" title=\"flatMap()\"></a>flatMap()</h1><p><strong><code>flatMap()</code></strong> 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvbWFw\">map</span> 连着深度值为 1 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZmxhdA==\">flat</span> 几乎相同，但 <code>flatMap</code> 通常在合并成一种方法的效率稍微高一些。</p>\n<pre><code class=\"js\">const arr1 = [1, 2, [3], [4, 5], 6, []];\n\nconst flattened = arr1.flatMap(num =&gt; num);\n\nconsole.log(flattened);\n// expected output: Array [1, 2, 3, 4, 5, 6]\n</code></pre>\n<h2 id=\"参数-3\"><a href=\"#参数-3\" class=\"headerlink\" title=\"参数\"></a>参数</h2><ul>\n<li><p><code>callback</code></p>\n<p>可以生成一个新数组中的元素的函数，可以传入三个参数：<code>currentValue</code>当前正在数组中处理的元素<code>index</code>可选可选的。数组中正在处理的当前元素的索引。<code>array</code>可选可选的。被调用的 <code>map</code> 数组</p>\n</li>\n<li><p><code>thisArg</code>可选</p>\n<p>可选的。执行 <code>callback</code> 函数时 使用的<code>this</code> 值。</p>\n</li>\n</ul>\n<h2 id=\"返回值-4\"><a href=\"#返回值-4\" class=\"headerlink\" title=\"返回值\"></a>返回值</h2><p>一个新的数组，其中每个元素都是回调函数的结果，并且结构深度 <code>depth</code> 值为 1。</p>\n<h2 id=\"map-和flatMap-的区别\"><a href=\"#map-和flatMap-的区别\" class=\"headerlink\" title=\"map()和flatMap()的区别\"></a>map()和flatMap()的区别</h2><pre><code class=\"js\">var arr1 = [1, 2, 3, 4];\n\narr1.map(x =&gt; [x * 2]);\n// [[2], [4], [6], [8]]\n\narr1.flatMap(x =&gt; [x * 2]);\n// [2, 4, 6, 8]\n\n// only one level is flattened\narr1.flatMap(x =&gt; [[x * 2]]);\n// [[2], [4], [6], [8]]\n</code></pre>\n",
            "tags": [
                "JavaScript",
                "Array",
                "js"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/Screeps/action1/",
            "url": "https://www.yexingcheng.com/Screeps/action1/",
            "title": "screeps日记 part1",
            "date_published": "2022-10-30T16:00:00.000Z",
            "content_html": "",
            "tags": [
                "screeps",
                "javascript",
                "screeps"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/Screeps/chinese/",
            "url": "https://www.yexingcheng.com/Screeps/chinese/",
            "title": "screeps汉化（steam)",
            "date_published": "2022-10-29T16:00:00.000Z",
            "content_html": "<p>如果你对 screeps 有所了解的话，那么你应该曾经听说过这个游戏的 steam 版本是基于 node 和 nw.js 进行开发的，说白了就是一个套壳浏览器，本质上还是一个 web 应用。既然是 web 应用，那么就可以用我们的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwczovL2dyZWFzeWZvcmsub3JnL3poLUNOL3NjcmlwdHMvNDE2NjUxLXNjcmVlcHMtY2hpbmVzZS1wYWNr\">web 端汉化补丁</span> 进行汉化。</p>\n<p>这里我们看到默认是全英文版本，但由于本人是英语小白，又懒得去一个一个翻译，所以就想翻译这个界面</p>\n<p><img data-src=\"/Screeps/chinese/image-20221102235142846.png\" alt=\"image-20221102235142846\"></p>\n<h1 id=\"汉化步骤\"><a href=\"#汉化步骤\" class=\"headerlink\" title=\"汉化步骤\"></a>汉化步骤</h1><p>实际操作也非常的简单，首先我们通过 steam 打开 screeps 的本地目录：</p>\n<p><img data-src=\"/Screeps/chinese/image-20221102235357536.png\" alt=\"image-20221102235357536\"></p>\n<p><img data-src=\"/Screeps/chinese/image-20221102235416601.png\" alt=\"image-20221102235416601\"></p>\n<p>然后，你应该可以 <strong>找到一个名为 package.nw 的文件</strong>，这个就是游戏的源码包。</p>\n<p>然后用压缩文件的格式打开，这里我用的是WINRAR</p>\n<p><img data-src=\"/Screeps/chinese/image-20221102235616013.png\" alt=\"image-20221102235616013\"></p>\n<p>打开之后我们可以 <strong>找到一个名为 index.html 的文件，对其右键并选择编辑</strong>，同理不要进行解压。</p>\n<p><img data-src=\"/Screeps/chinese/image-20221102235706903.png\" alt=\"image-20221102235706903\"></p>\n<p>然后我们添加汉化脚本到里面</p>\n<pre><code class=\"xml\">&lt;script src=&quot;https://screeps-cn.gitee.io/screeps-chinese-pack-release/main.js&quot; async defer&gt;&lt;/script&gt;\n</code></pre>\n<p>此时我们进入游戏发现已经汉化完毕</p>\n<p><img data-src=\"/Screeps/chinese/image-20221103000423147.png\" alt=\"image-20221103000423147\"></p>\n",
            "tags": [
                "screeps",
                "javascript",
                "screeps"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/React/react-router-params/",
            "url": "https://www.yexingcheng.com/React/react-router-params/",
            "title": "React路由传参的几种方式",
            "date_published": "2022-10-29T16:00:00.000Z",
            "content_html": "<h1 id=\"一、函数式组件\"><a href=\"#一、函数式组件\" class=\"headerlink\" title=\"一、函数式组件\"></a>一、函数式组件</h1><p>首先新建两个页面并导入到app.tsx页面中</p>\n<pre><code class=\"jsx\">import React,  from &quot;react&quot;;\n\nconst From = () =&gt; &#123;\n  return &lt;&gt;\n  &lt;h1&gt;函数式组件传值&lt;/h1&gt;\n  &lt;/&gt;;\n&#125;;\n\nexport default From;\n</code></pre>\n<pre><code class=\"jsx\">import React,  from &#39;react&#39;;\n\n\nconst To = () =&gt; &#123;\n\n\n  return (\n    &lt;&gt;\n    \n    &lt;h1&gt;函数式组件接受值&lt;/h1&gt;\n    &lt;/&gt;\n  )\n\n&#125;;\n\nexport default To;\n</code></pre>\n<pre><code class=\"tsx\">import React from &#39;react&#39;;\nimport &#123; Route, Routes &#125; from &#39;react-router-dom&#39;\nimport From from &#39;./From-function&#39;;\nimport To from &#39;./To-function&#39;;\n\nconst App= () =&gt; &#123;\n\n\n  return (\n\n    &lt;Routes&gt;\n      &lt;Route path=&#39;/&#39; element=&#123;&lt;From /&gt;&#125;&gt;&lt;/Route&gt;\n      &lt;Route path=&#39;to&#39; element=&#123;&lt;To /&gt;&#125;&gt;&lt;/Route&gt;\n    &lt;/Routes&gt;\n  )\n\n&#125;;\n\nexport default App;\n</code></pre>\n<pre><code class=\"jsx\">import App from &#39;./router-params/App&#39;\nconst root = ReactDOM.createRoot(document.getElementById(&#39;root&#39;));\nroot.render(\n  &lt;BrowserRouter&gt;\n    &lt;App /&gt;\n  &lt;/BrowserRouter&gt;,\n)\n</code></pre>\n<h2 id=\"1、params传参\"><a href=\"#1、params传参\" class=\"headerlink\" title=\"1、params传参\"></a>1、params传参</h2><p>优点：刷新页面，参数不丢失</p>\n<p>缺点：1.只能传字符串，传值过多url会变得很长 2. 参数必须在路由上配置</p>\n<p>是通过在路由后面写&#x2F;:参数名将路径配合?name&#x3D;xxx的形式</p>\n<p>通过useParams来获取路径参数</p>\n<p><code>路由配置</code></p>\n<pre><code class=\"jsx\">&lt;Routes&gt;\n      &lt;Route path=&quot;/&quot; element=&#123;&lt;From /&gt;&#125; /&gt;\n      &lt;Route path=&quot;to:number&quot; element=&#123;&lt;To /&gt;&#125; /&gt;\n    &lt;/Routes&gt;\n</code></pre>\n<p><code>From组件</code></p>\n<pre><code class=\"jsx\">import React from &quot;react&quot;;\nimport &#123; useNavigate &#125; from &#39;react-router-dom&#39;;\nconst From = () =&gt; &#123;\n\n  const navigate = useNavigate()\n\n  const to =()=&gt;&#123;\n    navigate(&#39;to:666&#39;)\n  &#125;\n  return (&lt;&gt;\n  &lt;h1&gt;函数式组件传值&lt;/h1&gt;\n  &lt;button onClick=&#123;()=&gt;&#123;to()&#125;&#125;&gt;传参&lt;/button&gt;\n  &lt;/&gt;)\n&#125;;\n\nexport default From;\n</code></pre>\n<p><code>to组件</code></p>\n<pre><code class=\"jsx\">import React, &#123; FC &#125; from &#39;react&#39;;\nimport &#123;useParams&#125; from &#39;react-router-dom&#39;\n\nconst To = () =&gt; &#123;\n  const params = useParams()  \n  console.log(params)\n\n  return (\n    &lt;&gt;\n\n    &lt;h1&gt;函数式组件接受值&lt;/h1&gt;\n    传递的参数为&#123;params.number&#125;\n    &lt;/&gt;\n  )\n\n&#125;;\n\nexport default To;\n</code></pre>\n<p>运行结果:</p>\n<p><img data-src=\"/React/react-router-params/image-20221030173426778.png\" alt=\"image-20221030173426778\"></p>\n<h2 id=\"2、-search传参\"><a href=\"#2、-search传参\" class=\"headerlink\" title=\"2、. search传参\"></a>2、. search传参</h2><p>优点：刷新页面，参数不丢失</p>\n<p>缺点：只能传字符串，传值过多url会变得很长，获取参数需要自定义hooks</p>\n<p><code>路由配置</code></p>\n<pre><code class=\"jsx\">    &lt;Routes&gt;\n      &lt;Route path=&quot;/&quot; element=&#123;&lt;From /&gt;&#125; /&gt;\n      &lt;Route path=&quot;to&quot; element=&#123;&lt;To /&gt;&#125; /&gt;\n    &lt;/Routes&gt;\n</code></pre>\n<p><code>from组件</code></p>\n<pre><code>import React from &quot;react&quot;;\nimport &#123; useNavigate &#125; from &#39;react-router-dom&#39;;\nconst From = () =&gt; &#123;\n\n  const navigate = useNavigate()\n\n\n  const search =()=&gt;&#123;\n    navigate(&#39;to/?num=666&#39;)\n  &#125;\n\n\n  return (&lt;&gt;\n  &lt;h1&gt;函数式组件传值&lt;/h1&gt;\n  &lt;button onClick=&#123;()=&gt;&#123;search()&#125;&#125;&gt;search传参&lt;/button&gt;\n\n  &lt;/&gt;)\n&#125;;\n\nexport default From;\n</code></pre>\n<p><code>to组件</code></p>\n<pre><code>import React from &#39;react&#39;;\nimport &#123; useParams, useSearchParams ,useLocation&#125; from &#39;react-router-dom&#39;;\n\nconst To = () =&gt; &#123;\nconst [search] = useSearchParams()\nconsole.log(search.get(&#39;num&#39;));\n\n\n  return (\n    &lt;&gt;\n\n    &lt;h1&gt;函数式组件接受值&lt;/h1&gt;\n    \n    search传递的参数为\n   \n    &lt;/&gt;\n  )\n\n&#125;;\n\nexport default To;\n</code></pre>\n<p><code>运行结果</code></p>\n<p><img data-src=\"/React/react-router-params/image-20221030190608909.png\" alt=\"image-20221030190608909\"></p>\n<h2 id=\"3、state传参\"><a href=\"#3、state传参\" class=\"headerlink\" title=\"3、state传参\"></a>3、state传参</h2><p>优点：可以传对象</p>\n<p>缺点： <code>&lt;HashRouter&gt;</code>刷新页面，参数丢失</p>\n<p><code>路由配置</code></p>\n<pre><code class=\"jsx\">&lt;Routes&gt;\n      &lt;Route path=&quot;/&quot; element=&#123;&lt;From /&gt;&#125; /&gt;\n      &lt;Route path=&quot;to&quot; element=&#123;&lt;To /&gt;&#125; /&gt;\n    &lt;/Routes&gt;\n</code></pre>\n<p><code>from</code>组件</p>\n<pre><code class=\"jsx\">import React from &quot;react&quot;;\nimport &#123; useNavigate &#125; from &#39;react-router-dom&#39;;\nconst From = () =&gt; &#123;\n\n  const navigate = useNavigate()\n\n\n\n  const state = ()=&gt;&#123;\n\n    navigate(&#39;to&#39;,&#123;state:&#123;\n      name:&#39;叶星辰&#39;,\n      age:&#39;18&#39;,\n      hobby:&quot;敲代码&quot;\n    &#125;\n  \n    &#125;)\n  &#125;\n  return (&lt;&gt;\n  &lt;h1&gt;函数式组件传值&lt;/h1&gt;\n\n  &lt;button onClick=&#123;()=&gt;&#123;state()&#125;&#125;&gt;state传参&lt;/button&gt;\n  &lt;/&gt;)\n&#125;;\n\nexport default From;\n</code></pre>\n<p><code>to组件</code></p>\n<pre><code class=\"jsx\">import React from &#39;react&#39;;\nimport &#123; useParams, useSearchParams ,useLocation&#125; from &#39;react-router-dom&#39;;\n\nconst To = () =&gt; &#123;\n\nconst &#123; state: &#123; name, age, hobby &#125; &#125; = useLocation()\n\n  return (\n    &lt;&gt;\n    statec传递的参数为姓名&#123;name&#125;年纪&#123;age&#125;爱好&#123;hobby&#125;\n    &lt;/&gt;\n  )\n\n&#125;;\n\nexport default To;\n</code></pre>\n<p><code>运行结果</code></p>\n<p><img data-src=\"/React/react-router-params/image-20221030180814827.png\" alt=\"image-20221030180814827\"></p>\n<h1 id=\"二、类组件\"><a href=\"#二、类组件\" class=\"headerlink\" title=\"二、类组件\"></a>二、类组件</h1><p>类组件不能用到useNavigate等hooks,所以采用NavLink的方式跳转路由，同理，函数式组件中也可以用NavLink的方式跳转路由</p>\n<p>如果不用withRouter，发现组件的this.props是一个空对象</p>\n<p><img data-src=\"/React/react-router-params/image-20221030194100624.png\" alt=\"image-20221030194100624\"></p>\n<p>经过各方查阅，我们在react-router-dom v6版本中，已经去除了withRouter，所以在这里我们可以自己封装，但还是推荐使用函数式组件hooks</p>\n<p>js版本:</p>\n<pre><code class=\"js\">import &#123; useLocation, useNavigate &#125; from &quot;react-router-dom&quot;;\nexport function withRouter( Child ) &#123;\n  return ( props ) =&gt; &#123;\n    const location = useLocation();\n    const navigate = useNavigate();\n    const params = useParams();\n    return &lt;Child &#123; ...props &#125; navigate=&#123; navigate &#125; location=&#123; location &#125; params=&#123; params &#125;/&gt;;\n  &#125;\n&#125;\n</code></pre>\n<p>ts版本:</p>\n<pre><code class=\"ts\">import React from &quot;react&quot;;\nimport &#123; NavigateFunction, useLocation, useNavigate, useParams &#125; from &quot;react-router&quot;;\n\nexport interface RoutedProps&lt;Params = any, State = any&gt; &#123;\n    location: State;\n    navigate: NavigateFunction;\n    params: Params;\n&#125;\n\n\nexport function withRouter&lt;P extends RoutedProps&gt;( Child: React.ComponentClass&lt;P&gt; ) &#123;\n    return ( props: Omit&lt;P, keyof RoutedProps&gt; ) =&gt; &#123;\n        const location = useLocation();\n        const navigate = useNavigate();\n        const params = useParams();\n        return &lt;Child &#123; ...props as P &#125; navigate=&#123; navigate &#125; location=&#123; location &#125; params=&#123; params &#125;/&gt;;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"1、params传参-1\"><a href=\"#1、params传参-1\" class=\"headerlink\" title=\"1、params传参\"></a>1、params传参</h2><p><code>路由配置</code></p>\n<pre><code class=\"jsx\">&lt;Routes&gt;\n      &lt;Route path=&quot;/&quot; element=&#123;&lt;From /&gt;&#125; /&gt;\n      &lt;Route path=&quot;to:number&quot; element=&#123;&lt;To /&gt;&#125; /&gt;\n    &lt;/Routes&gt;\n</code></pre>\n<p><code>From组件</code></p>\n<pre><code class=\"jsx\">import React, &#123; Component &#125; from &quot;react&quot;;\nimport &#123; NavLink, Link &#125; from &quot;react-router-dom&quot;;\nimport &#123; withRouter &#125; from &quot;./withRouter&quot;;\nclass FromClass extends Component &#123;\n  render() &#123;\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;类组件传参&lt;/h1&gt;\n        &lt;Link to=&#123;&quot;/to:666&quot;&#125;&gt;详情&lt;/Link&gt;\n      &lt;/div&gt;\n    );\n  &#125;\n&#125;\n\nexport default withRouter(FromClass);\n\n</code></pre>\n<p><code>to组件</code></p>\n<pre><code class=\"jsx\">import React, &#123; Component &#125; from &quot;react&quot;;\nimport &#123; withRouter &#125; from &quot;./withRouter&quot;;\nclass ToClass extends Component &#123;\n  render() &#123;\n    return (\n      &lt;div&gt;\n        params传递的参数为&#123;this.props.params.number&#125;\n      &lt;/div&gt;\n    );\n  &#125;\n&#125;\n\nexport default withRouter(ToClass);\n</code></pre>\n<p>运行结果:</p>\n<p><img data-src=\"/React/react-router-params/image-20221030195320898.png\" alt=\"image-20221030195320898\"></p>\n<h2 id=\"2、-search传参-1\"><a href=\"#2、-search传参-1\" class=\"headerlink\" title=\"2、. search传参\"></a>2、. search传参</h2><p><code>路由配置</code></p>\n<pre><code class=\"jsx\">    &lt;Routes&gt;\n      &lt;Route path=&quot;/&quot; element=&#123;&lt;From /&gt;&#125; /&gt;\n      &lt;Route path=&quot;to&quot; element=&#123;&lt;To /&gt;&#125; /&gt;\n    &lt;/Routes&gt;\n</code></pre>\n<p><code>from组件</code></p>\n<pre><code class=\"jsx\">import React, &#123; Component &#125; from &quot;react&quot;;\nimport &#123; NavLink, Link &#125; from &quot;react-router-dom&quot;;\nimport &#123; withRouter &#125; from &quot;./withRouter&quot;;\nclass FromClass extends Component &#123;\n  render() &#123;\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;类组件传参&lt;/h1&gt;\n        &lt;Link to=&#123;&quot;/to/?number=666&quot;&#125;&gt;详情&lt;/Link&gt;\n      &lt;/div&gt;\n    );\n  &#125;\n&#125;\n\nexport default withRouter(FromClass);\n</code></pre>\n<p><code>to组件</code></p>\n<p>由于search传递的参数比较特殊，所以用query-string解析一下就行</p>\n<pre><code class=\"jsx\">import React, &#123; Component &#125; from &quot;react&quot;;\nimport &#123; withRouter &#125; from &quot;./withRouter&quot;;\nimport qs from &quot;query-string&quot;;\nclass ToClass extends Component &#123;\n  render() &#123;\n    console.log(qs.parse(this.props.location.search));\n    return (\n      &lt;div&gt;\n        search传递的参数为&#123;qs.parse(this.props.location.search).number&#125;\n      &lt;/div&gt;\n    );\n  &#125;\n&#125;\n\nexport default withRouter(ToClass);\n</code></pre>\n<p><code>运行结果</code></p>\n<p><img data-src=\"/React/react-router-params/image-20221030200459605.png\" alt=\"image-20221030200459605\"></p>\n<h2 id=\"3、state传参-1\"><a href=\"#3、state传参-1\" class=\"headerlink\" title=\"3、state传参\"></a>3、state传参</h2><p><code>路由配置</code></p>\n<pre><code class=\"jsx\">&lt;Routes&gt;\n      &lt;Route path=&quot;/&quot; element=&#123;&lt;From /&gt;&#125; /&gt;\n      &lt;Route path=&quot;to&quot; element=&#123;&lt;To /&gt;&#125; /&gt;\n    &lt;/Routes&gt;\n</code></pre>\n<p><code>from</code>组件</p>\n<pre><code class=\"jsx\">import React, &#123; Component &#125; from &quot;react&quot;;\nimport &#123; NavLink, Link &#125; from &quot;react-router-dom&quot;;\nimport &#123; withRouter &#125; from &quot;./withRouter&quot;;\nclass FromClass extends Component &#123;\n  render() &#123;\n    const path = &#123;\n      pathname: &quot;to&quot;,\n      state: &#123;\n        name: &quot;叶星辰&quot;,\n        age: 18\n      &#125;\n    &#125;;\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;类组件传参&lt;/h1&gt;\n        &lt;Link to=&#123;path&#125;&gt;传参&lt;/Link&gt;\n      &lt;/div&gt;\n    );\n  &#125;\n&#125;\n\nexport default withRouter(FromClass);\n</code></pre>\n<p><code>to组件</code></p>\n<pre><code class=\"jsx\">import React, &#123; Component &#125; from &quot;react&quot;;\nimport &#123; withRouter &#125; from &quot;./withRouter&quot;;\nimport qs from &quot;query-string&quot;;\nclass ToClass extends Component &#123;\n  render() &#123;\n    console.log(this.props);\n    return (\n      &lt;div&gt;\n       \n        state传递的参数为&#123;this.props.location.state&#125;\n      &lt;/div&gt;\n    );\n  &#125;\n&#125;\n\nexport default withRouter(ToClass);\n</code></pre>\n<p><code>运行结果</code></p>\n<p>扩展延伸:react-router-dom中<code>NavLink</code>和<code>Link</code>的区别</p>\n<p>在 ReactJS 中，有三种不同的链接。这些是<code>NavLink</code>、、<code>Link</code>和<code>a</code>链接，它们都有不同的用途。</p>\n<ol>\n<li>**<code>NavLink</code>**：当您想要突出显示当前或活动链接时使用此选项。这与<code>activeClassName</code>启用它的属性一起使用。请参见下面的示例。</li>\n</ol>\n<pre><code>&lt;NavLink to=&quot;/home&quot; activeClassName=&quot;active&quot; &gt;Home&lt;/NavLink&gt;&lt;br/&gt;\n</code></pre>\n<p>然后<code>CSS</code>可以根据您在<code>App.css</code>文件中的选择设置样式。让我们将文本颜色设为红色以使其简单。</p>\n<pre><code>.active&#123;\n  color:red;\n&#125;\n</code></pre>\n<ol>\n<li>**<code>Link</code>**：当您的链接没有特殊样式或突出显示时使用。请参见下面的示例。</li>\n</ol>\n<pre><code>&lt;Link to=&quot;/not-active&quot;&gt;Not Active &lt;/Link&gt;&lt;br/&gt;\n</code></pre>\n<blockquote>\n<p>注意：当您需要链接到属于您的应用程序的页面时，请使用<code>NavLink</code>或。<code>Link</code>对于外部链接，<code>a</code>是首选。</p>\n</blockquote>\n<ol>\n<li>**锚标记<code>a</code>**：这用于网页外的链接。<br>请参见下面的示例。</li>\n</ol>\n<pre><code>&lt;a href=&quot;https://www.educative.io/edpresso&quot;&gt;Visit Edpresso &lt;/a&gt;\n</code></pre>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>当<code>NavLink</code>您想要将链接突出显示为活动时使用。因此，在每次路由到页面时，链接都会根据<code>activeClassName</code>. <code>Link</code>用于不需要突出显示的链接。并且<code>a</code>用于外部链接。</p>\n",
            "tags": [
                "react",
                "react",
                "router"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/computer/rightPointNewMd/",
            "url": "https://www.yexingcheng.com/computer/rightPointNewMd/",
            "title": "如何在右键菜单下添加一个新建markdown文件选项",
            "date_published": "2022-10-29T16:00:00.000Z",
            "content_html": "<h1 id=\"在新建笔记的时候，我们都会用到md文件，但是windows11自带的新建文件夹下面没有新建md文件这一选项，让我们很苦恼，怎么办呢？下面就一起来看看吧\"><a href=\"#在新建笔记的时候，我们都会用到md文件，但是windows11自带的新建文件夹下面没有新建md文件这一选项，让我们很苦恼，怎么办呢？下面就一起来看看吧\" class=\"headerlink\" title=\"在新建笔记的时候，我们都会用到md文件，但是windows11自带的新建文件夹下面没有新建md文件这一选项，让我们很苦恼，怎么办呢？下面就一起来看看吧\"></a>在新建笔记的时候，我们都会用到md文件，但是windows11自带的新建文件夹下面没有新建md文件这一选项，让我们很苦恼，怎么办呢？下面就一起来看看吧</h1><h2 id=\"第一种方法：修改注册表\"><a href=\"#第一种方法：修改注册表\" class=\"headerlink\" title=\"第一种方法：修改注册表\"></a>第一种方法：修改注册表</h2><h3 id=\"一、win-R输入【regedit】\"><a href=\"#一、win-R输入【regedit】\" class=\"headerlink\" title=\"一、win + R输入【regedit】\"></a>一、win + R输入【regedit】</h3><p><img data-src=\"/computer/rightPointNewMd/image-20221030035511584.png\" alt=\"image-20221030035511584\"></p>\n<h3 id=\"二、定位路径-【计算机-HKEY-CLASSES-ROOT-md】\"><a href=\"#二、定位路径-【计算机-HKEY-CLASSES-ROOT-md】\" class=\"headerlink\" title=\"二、定位路径 【计算机\\HKEY_CLASSES_ROOT.md】\"></a>二、定位路径 【计算机\\HKEY_CLASSES_ROOT.md】</h3><p><img data-src=\"/computer/rightPointNewMd/image-20221030035632249.png\" alt=\"image-20221030035632249\"></p>\n<h3 id=\"三、右键-md文件夹-x3D-gt-新建-x3D-gt-项，把新建的项命名为【ShellNew】\"><a href=\"#三、右键-md文件夹-x3D-gt-新建-x3D-gt-项，把新建的项命名为【ShellNew】\" class=\"headerlink\" title=\"三、右键.md文件夹 &#x3D;&gt; 新建 &#x3D;&gt; 项，把新建的项命名为【ShellNew】\"></a>三、右键.md文件夹 &#x3D;&gt; 新建 &#x3D;&gt; 项，把新建的项命名为【ShellNew】</h3><p><img data-src=\"/computer/rightPointNewMd/image-20221030035755119.png\" alt=\"image-20221030035755119\"></p>\n<h3 id=\"四、右键ShellNew-x3D-gt-新建-x3D-gt-字符串值，将该字符串值名称改为【NullFile】\"><a href=\"#四、右键ShellNew-x3D-gt-新建-x3D-gt-字符串值，将该字符串值名称改为【NullFile】\" class=\"headerlink\" title=\"四、右键ShellNew &#x3D;&gt; 新建 &#x3D;&gt; 字符串值，将该字符串值名称改为【NullFile】\"></a>四、右键ShellNew &#x3D;&gt; 新建 &#x3D;&gt; 字符串值，将该字符串值名称改为【NullFile】</h3><p><img data-src=\"/computer/rightPointNewMd/image-20221030035848133.png\" alt=\"image-20221030035848133\"></p>\n<p>如果没有生效，请尝试注销重启系统。</p>\n<h2 id=\"二、注册表导入\"><a href=\"#二、注册表导入\" class=\"headerlink\" title=\"二、注册表导入\"></a>二、注册表导入</h2><p>我们可以新建文本文文档，将以下命名复制进去，将txt后缀名改为reg格式，直接双击reg文件进行注册表导入。</p>\n<pre><code class=\"powershell\">Windows Registry Editor Version 5.00\n\n[HKEY_CLASSES_ROOT\\.md]\n@=&quot;Marktext.exe&quot;\n\n[HKEY_CLASSES_ROOT\\.md\\ShellNew]\n&quot;NullFile&quot;=&quot;&quot;\n\n[HKEY_CLASSES_ROOT\\Marktext.exe]\n@=&quot;Markdown&quot;\n</code></pre>\n<p><img data-src=\"/computer/rightPointNewMd/image-20221030040857071.png\" alt=\"image-20221030040857071\"></p>\n<h2 id=\"三、通过-Reg-注册表命令添加\"><a href=\"#三、通过-Reg-注册表命令添加\" class=\"headerlink\" title=\"三、通过 Reg 注册表命令添加\"></a>三、通过 Reg 注册表命令添加</h2><p>更深入一些，我们也可以通过 reg 注册表命令来进行修改。</p>\n<p>必须以管理员权限启动 CMD 窗口，输如下命令。</p>\n<pre><code class=\"powershell\">reg add &quot;HKEY_CLASSES_ROOT\\.md&quot; /d &quot;Marktext.exe&quot; /f\nreg add &quot;HKEY_CLASSES_ROOT\\.md\\ShellNew&quot; /v &quot;NullFile&quot; /t &quot;REG_SZ&quot;  /f\nreg add &quot;HKEY_CLASSES_ROOT\\Marktext.exe&quot; /d &quot;Markdown&quot; /f\n</code></pre>\n<p><img data-src=\"/computer/rightPointNewMd/image-20221030041025319.png\" alt=\"image-20221030041025319\"></p>\n<h1 id=\"最终我们发现可以在右键菜单下有了这个选项\"><a href=\"#最终我们发现可以在右键菜单下有了这个选项\" class=\"headerlink\" title=\"最终我们发现可以在右键菜单下有了这个选项\"></a>最终我们发现可以在右键菜单下有了这个选项</h1><p><img data-src=\"/computer/rightPointNewMd/image-20221030042132599.png\" alt=\"image-20221030042132599\"></p>\n",
            "tags": [
                "计算机相关",
                "windows",
                "windows11"
            ]
        },
        {
            "id": "https://www.yexingcheng.com/Blog_introduction/Blog_introduction/",
            "url": "https://www.yexingcheng.com/Blog_introduction/Blog_introduction/",
            "title": "Welcome!",
            "date_published": "2022-09-30T16:00:00.000Z",
            "content_html": "",
            "tags": [
                "index",
                "index"
            ]
        }
    ]
}